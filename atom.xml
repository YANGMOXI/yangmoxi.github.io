<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-19T08:36:56.286Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yango</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>华为机试</title>
    <link href="http://example.com/2021/01/19/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%8E%E4%B8%BA-%E6%9C%BA%E8%80%83/"/>
    <id>http://example.com/2021/01/19/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%8E%E4%B8%BA-%E6%9C%BA%E8%80%83/</id>
    <published>2021-01-19T06:03:19.131Z</published>
    <updated>2021-01-19T08:36:56.286Z</updated>
    
    <content type="html"><![CDATA[<p><strong>知识点：</strong></p><p>查找</p><p>排序</p><p>递归</p><p>贪心</p><p>动态规划</p><p>分治</p><p>模拟</p><p>穷举</p><p>复杂度</p><p>高级算法</p><p>搜索</p><p>回溯</p><p>思维</p><p>字典树</p><p>数学</p><p>dsf</p><p>逆元</p><p>快速幂</p><p>双指针</p><p>矩阵快速幂</p><p>欧拉函数</p><p>优先队列</p><p>二分</p><p>前缀和</p><p>三分</p><p>拓扑排序</p><p>后缀数组</p><p>位运算</p><p>语法</p><p>并查集</p><p>bfs</p><p>数组</p><p>字符串</p><p>链表</p><p>栈</p><p>队列</p><p>数</p><p>图</p><p>哈希</p><p>堆</p><p>高级结构</p><p>有序表</p><p>线性表</p><p>计算几何</p><h2 id="入门"><a class="markdownIt-Anchor" href="#入门"></a> 入门</h2><h3 id="1-取近似值"><a class="markdownIt-Anchor" href="#1-取近似值"></a> 1. 取近似值</h3><p>写出一个程序，接受一个正浮点数值，输出该数值的近似整数值。如果小数点后数值大于等于5,向上取整；小于5，则向下取整。</p><h2 id="-code0-"><a class="markdownIt-Anchor" href="#-code0-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入描述：</span><br><span class="line">输入一个正浮点数值</span><br><span class="line">输出描述:</span><br><span class="line">输出该数值的近似整数值</span><br><span class="line"></span><br><span class="line">示例<span class="number">1</span></span><br><span class="line">输入</span><br><span class="line"><span class="number">5.5</span></span><br><span class="line">输出</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></h2><p>思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">类似函数：<span class="built_in">round</span>()函数有坑，不使用</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> 输入正整数</span><br><span class="line"><span class="number">2</span> 对数字进行分割，得整数部分</span><br><span class="line">a 小数部分 = 输入 - 正数部分</span><br><span class="line">    b 判断 小数部分 * <span class="number">10</span> &gt; <span class="number">5</span></span><br><span class="line">    - 是，向上取整</span><br><span class="line">        - 否，向下取整 </span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">n_int = <span class="built_in">str</span>(n).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">n_dec = n - <span class="built_in">int</span>(n_int)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n_dec * <span class="number">10</span> &gt;= <span class="number">5</span>:</span><br><span class="line">    print(<span class="built_in">int</span>(n_int) + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="built_in">int</span>(n_int))</span><br></pre></td></tr></table></figure><p><strong>最优解</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># int转float，默认向下取整</span></span><br><span class="line"></span><br><span class="line">f= <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">print(<span class="built_in">int</span>(f+<span class="number">0.5</span>))</span><br></pre></td></tr></table></figure><h3 id="2-求int型数据在内存中存储时1的个数"><a class="markdownIt-Anchor" href="#2-求int型数据在内存中存储时1的个数"></a> 2.  求<code>int</code>型数据在内存中存储时1的个数</h3><p>输入一个<code>int</code>型的正整数，计算出该<code>int</code>型数据在内存中存储时1的个数。</p><p><strong>输入描述</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一个整数（int类型）</span><br></pre></td></tr></table></figure><p><strong>输出描述</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个数转换成2进制后，输出1的个数</span><br></pre></td></tr></table></figure><p><strong>示例1</strong></p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>输出</p><h2 id="-code7-"><a class="markdownIt-Anchor" href="#-code7-"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></h2><p>最优解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用str的count方法</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>()) </span><br><span class="line">n = <span class="built_in">bin</span>(n) </span><br><span class="line">print(n.count(<span class="string">&#x27;1&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="简单"><a class="markdownIt-Anchor" href="#简单"></a> 简单</h2><h3 id="hj11-数字颠倒"><a class="markdownIt-Anchor" href="#hj11-数字颠倒"></a> HJ11 数字颠倒</h3><p>输入一个整数，将这个整数以字符串的形式逆序输出</p><p>程序不考虑负数的情况，若数字含有0，则逆序形式也含有0，如输入为100，则输出为001</p><p><strong>输入描述:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一个int整数</span><br></pre></td></tr></table></figure><p><strong>输出描述:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将这个整数以字符串的形式逆序输出</span><br></pre></td></tr></table></figure><p><strong>示例1</strong></p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1516000</span><br></pre></td></tr></table></figure><p>输出</p><h2 id="-code12-"><a class="markdownIt-Anchor" href="#-code12-"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0006151</span><br></pre></td></tr></table></figure></h2><p>思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种：使用字符串切片</span></span><br><span class="line">result = s[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种：使用列表的reverse方法</span></span><br><span class="line">l = <span class="built_in">list</span>(s)</span><br><span class="line">l.reverse()</span><br><span class="line">result = <span class="string">&quot;&quot;</span>.join(l)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三种</span></span><br><span class="line">l = <span class="built_in">list</span>(s)</span><br><span class="line">result = <span class="string">&quot;&quot;</span>.join(l[::-<span class="number">1</span>])</span><br><span class="line">第三种：使用reduce</span><br><span class="line">result = reduce(<span class="keyword">lambda</span> x,y:y+x,s)</span><br></pre></td></tr></table></figure><h3 id="hj12-字符串反转"><a class="markdownIt-Anchor" href="#hj12-字符串反转"></a> HJ12 字符串反转</h3><p>接受一个只包含小写字母的字符串，然后输出该字符串反转后的字符串。（字符串长度不超过1000）</p><p><strong>输入描述:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一行，为一个只包含小写字母的字符串。</span><br></pre></td></tr></table></figure><p><strong>输出描述</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出该字符串反转后的字符串。</span><br></pre></td></tr></table></figure><p><strong>示例1</strong></p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcd</span><br></pre></td></tr></table></figure><p>输出</p><h2 id="-code17-"><a class="markdownIt-Anchor" href="#-code17-"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dcba</span><br></pre></td></tr></table></figure></h2><p>思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">str</span>(<span class="built_in">input</span>()).lower()</span><br><span class="line">print(n[::-<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="hj22-汽水瓶"><a class="markdownIt-Anchor" href="#hj22-汽水瓶"></a> HJ22 汽水瓶</h3><p>有这样一道智力题：“某商店规定：三个空汽水瓶可以换一瓶汽水。小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？”答案是5瓶，方法如下：先用9个空瓶子换3瓶汽水，喝掉3瓶满的，喝完以后4个空瓶子，用3个再换一瓶，喝掉这瓶满的，这时候剩2个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用3个空瓶子换一瓶满的还给老板。如果小张手上有n个空汽水瓶，最多可以换多少瓶汽水喝？</p><p><strong>输入描述</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n（1&lt;&#x3D;n&lt;&#x3D;100），表示小张手上的空汽水瓶数。n&#x3D;0表示输入结束，你的程序不应当处理这一行。</span><br></pre></td></tr></table></figure><p><strong>输出描述</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也喝不到，输出0。</span><br></pre></td></tr></table></figure><p><strong>示例1</strong></p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10</span><br><span class="line">81</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>输出</p><h2 id="-code22-"><a class="markdownIt-Anchor" href="#-code22-"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br><span class="line">40</span><br></pre></td></tr></table></figure></h2><p>思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">       <span class="keyword">if</span> a!=<span class="number">0</span>:</span><br><span class="line">           print(a//<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span>   </span><br></pre></td></tr></table></figure><h3 id="hj37-统计每个月兔子的总数"><a class="markdownIt-Anchor" href="#hj37-统计每个月兔子的总数"></a> HJ37 统计每个月兔子的总数</h3><p>有一只兔子，从出生后第3个月起每个月都生一只兔子，小兔子长到第三个月后每个月又生一只兔子，假如兔子都不死，问每个月的兔子总数为多少？</p><p>本题有多组数据。</p><p><strong>输入描述:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入int型表示month</span><br></pre></td></tr></table></figure><p><strong>输出描述</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出兔子总数int型</span><br></pre></td></tr></table></figure><p><strong>示例1</strong></p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><p>输出</p><h2 id="-code27-"><a class="markdownIt-Anchor" href="#-code27-"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">34</span><br></pre></td></tr></table></figure></h2><p>解法1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#    新生度1 新生度2 熟兔</span></span><br><span class="line"><span class="comment">#      1      0     0</span></span><br><span class="line"><span class="comment">#      0      1     0</span></span><br><span class="line"><span class="comment">#      1      0     1</span></span><br><span class="line"><span class="comment">#      1      1     1</span></span><br><span class="line"><span class="comment">#      2      1     2</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTotalCount</span>(<span class="params">n</span>):</span></span><br><span class="line">    new1 =<span class="number">1</span></span><br><span class="line">    new2 =<span class="number">0</span></span><br><span class="line">    adult=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">        adult+=new2</span><br><span class="line">        new2=new1</span><br><span class="line">        new1=adult</span><br><span class="line">    <span class="keyword">return</span> new1+new2+adult</span><br><span class="line">  </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        month=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        print(getTotalCount(month))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span>       </span><br></pre></td></tr></table></figure><p>解法2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTotalCount</span>(<span class="params">month</span>):</span></span><br><span class="line">    <span class="keyword">if</span> month &lt; <span class="number">3</span>:</span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count = getTotalCount(month-<span class="number">1</span>) + getTotalCount(month-<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        month=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        print(getTotalCount(month))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span>  </span><br></pre></td></tr></table></figure><h3 id="hj50-四则运算"><a class="markdownIt-Anchor" href="#hj50-四则运算"></a> HJ50 四则运算</h3><p>输入一个表达式（用字符串表示），求这个表达式的值。</p><p>保证字符串中的有效字符包括[‘0’-‘9’],‘+’,‘-’, ‘*’,‘/’ ,‘(’， ‘)’,‘[’, ‘]’,‘{’ ,‘}’。且表达式一定合法。</p><p><strong>输入描述:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入一个算术表达式</span><br></pre></td></tr></table></figure><p><strong>输出描述:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">得到计算结果</span><br></pre></td></tr></table></figure><p><strong>示例1</strong></p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3+2*&#123;1+2*[-4&#x2F;(8-6)+7]&#125;</span><br></pre></td></tr></table></figure><p>输出</p><h2 id="-code33-"><a class="markdownIt-Anchor" href="#-code33-"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure></h2><p>HJ53 iNOC产品部-杨辉三角的变形</p><p>HJ54 表达式求值</p><ol><li><p>iNOC产品部–完全数计算</p></li><li><p>放苹果</p></li><li><p>查找输入正数二进制中1的个数</p></li><li><p>配置文件恢复</p></li></ol><h3 id="hj72-百钱买百鸡问题"><a class="markdownIt-Anchor" href="#hj72-百钱买百鸡问题"></a> HJ72. 百钱买百鸡问题</h3><p><strong>题目描述</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">公元前五世纪，我国古代数学家张丘建在《算经》一书中提出了“百鸡问题”：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？</span><br><span class="line"></span><br><span class="line">详细描述：</span><br><span class="line">    接口说明</span><br><span class="line">    原型：</span><br><span class="line">    int GetResult(vector &amp;list)</span><br><span class="line"></span><br><span class="line">    输入参数：</span><br><span class="line">        无</span><br><span class="line"></span><br><span class="line">    输出参数（指针指向的内存区域保证有效）：</span><br><span class="line">      list 鸡翁、鸡母、鸡雏组合的列表</span><br><span class="line"></span><br><span class="line">    返回值：</span><br><span class="line">       -1 失败   </span><br><span class="line">       0 成功</span><br></pre></td></tr></table></figure><p>思路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 鸡的总价格 = 100   x + y + z = 100</span></span><br><span class="line"><span class="comment"># 鸡的总数 = 100    5x + 3y + z/3 = 100</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;要点&quot;</span>：查找 - 循环越少越好</span><br></pre></td></tr></table></figure><p>解题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;输入整数：&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_chick</span>():</span></span><br><span class="line">    ll = []</span><br><span class="line">    max_x = <span class="built_in">int</span>(<span class="number">100</span> // <span class="number">5</span>)</span><br><span class="line">    max_y = <span class="built_in">int</span>(<span class="number">100</span> // <span class="number">3</span>)</span><br><span class="line">    max_z = <span class="built_in">int</span>(<span class="number">100</span> // (<span class="number">1</span> / <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_x + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_y + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, max_z + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> x + y + z == <span class="number">100</span> <span class="keyword">and</span> <span class="number">5</span> * x + <span class="number">3</span> * y + z / <span class="number">3</span> == <span class="number">100</span>:</span><br><span class="line">                    ll.append(<span class="string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x, y, z))</span><br><span class="line">                    <span class="comment"># print(ll[-1])</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(ll) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ll:</span><br><span class="line">            print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n.isdigit():</span><br><span class="line">    buy_chick()</span><br></pre></td></tr></table></figure><p><strong>最优解</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">只用了2层循环</span></span><br><span class="line"><span class="string">使用关系制约第3个变量，少写一层循环</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>((<span class="number">100</span> - <span class="number">5</span> * i) / <span class="number">3</span>)):</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">100</span> - i - j) % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">and</span> <span class="number">5</span>*i + <span class="number">3</span>*j + (<span class="number">100</span>-i-j) / <span class="number">3</span> == <span class="number">100</span>:</span><br><span class="line">                        print(<span class="built_in">str</span>(i) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(<span class="number">100</span>-i-j))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ol><li>计算日期到天数转换</li><li>参数解析</li></ol><h3 id="h75-公共字串计算"><a class="markdownIt-Anchor" href="#h75-公共字串计算"></a> H75 公共字串计算</h3><p>思路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 二层循环 ss[i:j]</span></span><br><span class="line"><span class="string">2. 去重: 加入集合(len(子串), 子串)</span></span><br><span class="line"><span class="string">3. sorted </span></span><br><span class="line"><span class="string">4. 循环 输出最新匹配的</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>解题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ss1 = <span class="built_in">input</span>()</span><br><span class="line">ss2 = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">set1 = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ss1)-<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(ss1)+<span class="number">1</span>):</span><br><span class="line">        stuff = ss1[i:j]</span><br><span class="line">        set1.add((<span class="built_in">len</span>(stuff), stuff))</span><br><span class="line"></span><br><span class="line">ll = <span class="built_in">sorted</span>(set1, reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tu <span class="keyword">in</span> ll:</span><br><span class="line">    <span class="keyword">if</span> tu[<span class="number">1</span>] <span class="keyword">in</span> ss2:</span><br><span class="line">        print(tu[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最优解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用自增减少了一层循环</span></span><br><span class="line"><span class="string">循环完成在打印：（由短到常）</span></span><br><span class="line"><span class="string">满足条件的 +1</span></span><br><span class="line"><span class="string">输出最长匹配</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = <span class="built_in">input</span>().upper()</span><br><span class="line">        b = <span class="built_in">input</span>().upper()</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">            <span class="keyword">if</span> a[i-n:i+<span class="number">1</span>] <span class="keyword">in</span> b:</span><br><span class="line">                n += <span class="number">1</span></span><br><span class="line">        print(n)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><ol><li>尼科彻斯定理</li><li>二维数组操作</li><li>统计大写字母个数</li><li>字符串运用-密码截取</li><li>求最大连续bit数</li><li>密码强度等级</li><li>201301 JAVA 题目2-3级</li><li>等差数列</li><li>字符逆序</li><li>求最小公倍数</li></ol><h2 id="中等"><a class="markdownIt-Anchor" href="#中等"></a> 中等</h2><h3 id="1-进制转换"><a class="markdownIt-Anchor" href="#1-进制转换"></a> 1. 进制转换</h3><ol start="2"><li><h2 id="质数因子"><a class="markdownIt-Anchor" href="#质数因子"></a> 质数因子</h2></li><li><p>合并表记录</p></li><li><p>提取不重复的整数</p></li><li><p>字符个数统计</p></li><li><p>字符串排序</p></li><li><p>购物单</p></li><li><p>简单密码破解</p></li><li><p>字符串排序</p></li><li><p>图片整理</p></li><li><p>蛇形矩阵</p></li><li><p>字符串加密</p></li><li><p>求小球落地5次后所经历的路程和第5次反弹的高度</p></li><li><p>输入一行字符，分别统计出包含英文字母、空格、数字和其它字符的个数</p></li><li><p>迷宫问题</p></li><li><p>名字的漂亮度</p></li><li><p>按字节截取字符串</p></li><li><p>从单向链表中删除指定值的节点</p></li><li><p>多线程</p></li><li><p>计算字符串距离</p></li><li><p>（练习用）挑7</p></li><li><p>无线OSS－高精度整数加法</p></li><li><p>找出字符串中第一个只出现一次的字符</p></li><li><p>查找组成一个偶数最接近的两个素数</p></li><li><p>DNA序列</p></li><li><p>MP3光标位置</p></li><li><p>查找两个字符串a,b中的最长公共子串</p></li><li><p>24点游戏算法</p></li><li><p>矩阵乘法</p></li><li><p>矩阵乘法计算量估算</p></li><li><p>字符串通配符</p></li><li><p>扑克牌大小</p></li><li><p>合法IP</p></li><li><p>表示数字</p></li><li><p>自动售货系统</p></li><li><p>自守数</p></li><li><p>字符统计</p></li><li><p>Redraiment的走法</p></li><li><p>求解立方根</p></li></ol><h2 id="较难"><a class="markdownIt-Anchor" href="#较难"></a> 较难</h2><h3 id="1-字符串最后一个单词的长度"><a class="markdownIt-Anchor" href="#1-字符串最后一个单词的长度"></a> 1.  字符串最后一个单词的长度</h3><ol start="2"><li>计算字符个数</li><li>明明的随机数</li><li>字符串分隔</li><li>句子逆序</li><li>坐标移动</li><li>密码验证合格程序</li><li>删除字符串中出现次数最少的字符</li><li>合唱队</li><li>数据分类处理</li><li>字符串加密</li><li>字符串合并处理</li><li>【中级】字符串运用-密码截取</li><li>整数与IP地址间的转换</li><li>判断两个IP是否属于同一子网</li><li>称砝码</li><li>学英语</li><li>线性插值</li><li>输出单项链表中倒数第k个结点</li><li>输入n个正数，输出其中最小的k个</li><li>成绩排序</li><li>火车进站</li><li>整形数组合并</li><li>字符串匹配</li><li>在字符串中找出连续最长的数字串</li><li>201301 JAVA题目0-1级</li><li>记票统计</li><li>人民币转换</li><li>记负均正</li><li>输入整型数组和排序标识，对其元素按照升序或</li><li>记负均正II</li></ol><h2 id="困难"><a class="markdownIt-Anchor" href="#困难"></a> 困难</h2><ol><li>识别有效的IP地址和掩码并进行分类统计</li><li>简单记录错误</li><li>查找兄弟单词</li><li>素数伴侣</li><li>【中级】单词排序</li><li>Sudoku-Java</li><li>将真分数分解为埃及分数</li><li>24点运算</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;知识点：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查找&lt;/p&gt;
&lt;p&gt;排序&lt;/p&gt;
&lt;p&gt;递归&lt;/p&gt;
&lt;p&gt;贪心&lt;/p&gt;
&lt;p&gt;动态规划&lt;/p&gt;
&lt;p&gt;分治&lt;/p&gt;
&lt;p&gt;模拟&lt;/p&gt;
&lt;p&gt;穷举&lt;/p&gt;
&lt;p&gt;复杂度&lt;/p&gt;
&lt;p&gt;高级算法&lt;/p&gt;
&lt;p&gt;搜索&lt;</summary>
      
    
    
    
    <category term="算法和数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="面试题" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>常考算法题（汇总）</title>
    <link href="http://example.com/2021/01/19/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B9%A0%E9%A2%98/"/>
    <id>http://example.com/2021/01/19/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B9%A0%E9%A2%98/</id>
    <published>2021-01-19T06:03:19.127Z</published>
    <updated>2021-01-19T06:05:32.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h2><h3 id="1-爬楼梯"><a class="markdownIt-Anchor" href="#1-爬楼梯"></a> 1. 爬楼梯</h3><p>n个台阶，一次可以走1步，也可以走2步，一共多少种走法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将问题规模缩小化</span></span><br><span class="line"><span class="comment"># 只剩一阶：1种走法</span></span><br><span class="line">    <span class="comment"># 剩两阶：2种走法</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ladder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> ladder(n-<span class="number">1</span>) + ladder(n-<span class="number">2</span>) <span class="comment"># 最后剩1个+剩2个台阶有几种走法</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><h2 id="栈和队列"><a class="markdownIt-Anchor" href="#栈和队列"></a> 栈和队列</h2><h3 id="迷宫问题"><a class="markdownIt-Anchor" href="#迷宫问题"></a> 迷宫问题</h3><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608800325066.png" alt="1608800325066" /></p><ul><li>迷宫</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">maze = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li><p><strong>栈解法</strong>（深度优先 - 最长路径）</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608800446913.png" alt="1608800446913" /></p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608809551984.png" alt="1608809551984" /></p></li></ol><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方向：上、右、下、左</span></span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> y, x: (y - <span class="number">1</span>, x),</span><br><span class="line">    <span class="keyword">lambda</span> y, x: (y, x + <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">lambda</span> y, x: (y + <span class="number">1</span>, x),</span><br><span class="line">    <span class="keyword">lambda</span> y, x: (y, x - <span class="number">1</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maze_path</span>(<span class="params">y1, x1, y2, x2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    栈 - 深度优先解迷宫</span></span><br><span class="line"><span class="string">    :param x1, y1: 起点坐标</span></span><br><span class="line"><span class="string">    :param x2, y2: 终点坐标</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    stack = []</span><br><span class="line">    stack.append((y1, x1))  <span class="comment"># 走的通：进栈；走不通：出栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span>:  <span class="comment"># &gt;0 表示路径走的通； &lt;0 走不通</span></span><br><span class="line">        <span class="comment"># 当前节点</span></span><br><span class="line">        curNode = stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 判断当前节点是否为终点</span></span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == y2 <span class="keyword">and</span> curNode[<span class="number">1</span>] == x2:</span><br><span class="line">            print(<span class="string">&quot;到终点了， 路径如下&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> path <span class="keyword">in</span> stack:</span><br><span class="line">                print(path)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 下走一节点（四个方向）</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])  <span class="comment"># 用当前节点定位下一步</span></span><br><span class="line">            <span class="keyword">if</span> maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                stack.append(nextNode) <span class="comment"># 进栈</span></span><br><span class="line">                maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span>  <span class="comment"># 标记为走过</span></span><br><span class="line">                <span class="keyword">break</span>  <span class="comment"># 找到一个就break，继续下一步</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span> <span class="comment"># 走不通也标记为走过</span></span><br><span class="line">            stack.pop()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;该迷宫没有解&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    maze_path(<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>队列解法</strong>（广度优先 - 最短路径）</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608813530391.png" alt="1608813530391" /></p></li></ol><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方向：上、右、下、左</span></span><br><span class="line">dirs = [</span><br><span class="line">    <span class="keyword">lambda</span> y, x: (y - <span class="number">1</span>, x),</span><br><span class="line">    <span class="keyword">lambda</span> y, x: (y, x + <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">lambda</span> y, x: (y + <span class="number">1</span>, x),</span><br><span class="line">    <span class="keyword">lambda</span> y, x: (y, x - <span class="number">1</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_r</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;打印路径&quot;&quot;&quot;</span></span><br><span class="line">    curNode = path[-<span class="number">1</span>]</span><br><span class="line">    realpath = []</span><br><span class="line">    <span class="keyword">while</span> curNode[<span class="number">2</span>] != -<span class="number">1</span>:</span><br><span class="line">        realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        curNode = path[curNode[<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">    realpath.append(curNode[<span class="number">0</span>:<span class="number">2</span>])  <span class="comment"># 加入起点</span></span><br><span class="line">    <span class="comment"># 方向输出（正向）</span></span><br><span class="line">    realpath.reverse()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> realpath:</span><br><span class="line">        print(node)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maze_path_queue</span>(<span class="params">y1, x1, y2, x2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    队列 解迷宫——先进先出</span></span><br><span class="line"><span class="string">    queue(y, x, i)</span></span><br><span class="line"><span class="string">    i: 该坐标的标记位；起点记为-1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    queue = deque()</span><br><span class="line">    queue.append((y1, x1, -<span class="number">1</span>))</span><br><span class="line">    path = []  <span class="comment"># 记录出队节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span>:</span><br><span class="line">        curNode = queue.pop()  <span class="comment"># 走下一步前，先出队</span></span><br><span class="line">        path.append(curNode)  <span class="comment"># 记录出队的元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> curNode[<span class="number">0</span>] == y2 <span class="keyword">and</span>  curNode[<span class="number">1</span>] == x2: <span class="comment"># 当前节点是否是终点</span></span><br><span class="line">            print(<span class="string">&quot;抵达终点，路径如下&quot;</span>)</span><br><span class="line">            print_r(path)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 前进一位</span></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            nextNode = <span class="built_in">dir</span>(curNode[<span class="number">0</span>], curNode[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] == <span class="number">0</span>:</span><br><span class="line">                queue.append((nextNode[<span class="number">0</span>], nextNode[<span class="number">1</span>], <span class="built_in">len</span>(path) - <span class="number">1</span>))  <span class="comment"># len(path)-1)：标记位; 起始: -1</span></span><br><span class="line">                maze[nextNode[<span class="number">0</span>]][nextNode[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;没有路了&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    maze_path_queue(<span class="number">1</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> yy <span class="keyword">in</span> maze:</span><br><span class="line">        print(yy)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;递归&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#递归&quot;&gt;&lt;/a&gt; 递归&lt;/h2&gt;
&lt;h3 id=&quot;1-爬楼梯&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-爬楼梯&quot;&gt;&lt;/a&gt; 1. 爬楼梯&lt;/h3&gt;
</summary>
      
    
    
    
    <category term="算法和数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="面试题" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Python知识点汇总</title>
    <link href="http://example.com/2021/01/19/Python%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>http://example.com/2021/01/19/Python%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</id>
    <published>2021-01-19T05:56:53.446Z</published>
    <updated>2021-01-19T05:56:28.917Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自：<a href="https://github.com/taizilongxu/interview_python">https://github.com/taizilongxu/interview_python</a></p></blockquote><!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again --><p><strong>Table of Contents</strong></p><ul><li><a href="#python%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">Python语言特性</a><ul><li><a href="#1-python%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92">1 Python的函数参数传递</a></li><li><a href="#2-python%E4%B8%AD%E7%9A%84%E5%85%83%E7%B1%BBmetaclass">2 Python中的元类(metaclass)</a></li><li><a href="#3-staticmethod%E5%92%8Cclassmethod">3 @staticmethod和@classmethod</a></li><li><a href="#4-%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F">4 类变量和实例变量</a></li><li><a href="#5-python%E8%87%AA%E7%9C%81">5 Python自省</a></li><li><a href="#6-%E5%AD%97%E5%85%B8%E6%8E%A8%E5%AF%BC%E5%BC%8F">6 字典推导式</a></li><li><a href="#7-python%E4%B8%AD%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E5%92%8C%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF">7 Python中单下划线和双下划线</a></li><li><a href="#8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8Cformat">8 字符串格式化:\x和.format</a></li><li><a href="#9-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8">9 迭代器和生成器</a></li><li><a href="#10-args-and-kwargs">10 *args and <code>**kwargs</code></a></li><li><a href="#11-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8Baop%E5%92%8C%E8%A3%85%E9%A5%B0%E5%99%A8">11 面向切面编程AOP和装饰器</a></li><li><a href="#12-%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B">12 鸭子类型</a></li><li><a href="#13-python%E4%B8%AD%E9%87%8D%E8%BD%BD">13 Python中重载</a></li><li><a href="#14-%E6%96%B0%E5%BC%8F%E7%B1%BB%E5%92%8C%E6%97%A7%E5%BC%8F%E7%B1%BB">14 新式类和旧式类</a></li><li><a href="#15-__new__%E5%92%8C__init__%E7%9A%84%E5%8C%BA%E5%88%AB">15 __new__和<code><strong>init</strong></code>的区别</a></li><li><a href="#16-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">16 单例模式</a><ul><li><a href="#1-%E4%BD%BF%E7%94%A8__new__%E6%96%B9%E6%B3%95">1 使用__new__方法</a></li><li><a href="#2-%E5%85%B1%E4%BA%AB%E5%B1%9E%E6%80%A7">2 共享属性</a></li><li><a href="#3-%E8%A3%85%E9%A5%B0%E5%99%A8%E7%89%88%E6%9C%AC">3 装饰器版本</a></li><li><a href="#4-import%E6%96%B9%E6%B3%95">4 import方法</a></li></ul></li><li><a href="#17-python%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F">17 Python中的作用域</a></li><li><a href="#18-gil%E7%BA%BF%E7%A8%8B%E5%85%A8%E5%B1%80%E9%94%81">18 GIL线程全局锁</a></li><li><a href="#19-%E5%8D%8F%E7%A8%8B">19 协程</a></li><li><a href="#20-%E9%97%AD%E5%8C%85">20 闭包</a></li><li><a href="#21-lambda%E5%87%BD%E6%95%B0">21 lambda函数</a></li><li><a href="#22-python%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B">22 Python函数式编程</a></li><li><a href="#23-python%E9%87%8C%E7%9A%84%E6%8B%B7%E8%B4%9D">23 Python里的拷贝</a></li><li><a href="#24-python%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6">24 Python垃圾回收机制</a><ul><li><a href="#1-%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0">1 引用计数</a></li><li><a href="#2-%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4%E6%9C%BA%E5%88%B6">2 标记-清除机制</a></li><li><a href="#3-%E5%88%86%E4%BB%A3%E6%8A%80%E6%9C%AF">3 分代技术</a></li></ul></li><li><a href="#25-python%E7%9A%84list">25 Python的List</a></li><li><a href="#26-python%E7%9A%84is">26 Python的is</a></li><li><a href="#27-readreadline%E5%92%8Creadlines">27 read,readline和readlines</a></li><li><a href="#28-python2%E5%92%8C3%E7%9A%84%E5%8C%BA%E5%88%AB">28 Python2和3的区别</a></li><li><a href="#29-super-init">29 super init</a></li><li><a href="#30-range-and-xrange">30 range and xrange</a></li></ul></li><li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a><ul><li><a href="#1-selectpoll%E5%92%8Cepoll">1 select,poll和epoll</a></li><li><a href="#2-%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95">2 调度算法</a></li><li><a href="#3-%E6%AD%BB%E9%94%81">3 死锁</a></li><li><a href="#4-%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5">4 程序编译与链接</a><ul><li><a href="#1-%E9%A2%84%E5%A4%84%E7%90%86">1 预处理</a></li><li><a href="#2-%E7%BC%96%E8%AF%91">2 编译</a></li><li><a href="#3-%E6%B1%87%E7%BC%96">3 汇编</a></li><li><a href="#4-%E9%93%BE%E6%8E%A5">4 链接</a></li></ul></li><li><a href="#5-%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5">5 静态链接和动态链接</a></li><li><a href="#6-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E6%8A%80%E6%9C%AF">6 虚拟内存技术</a></li><li><a href="#7-%E5%88%86%E9%A1%B5%E5%92%8C%E5%88%86%E6%AE%B5">7 分页和分段</a><ul><li><a href="#%E5%88%86%E9%A1%B5%E4%B8%8E%E5%88%86%E6%AE%B5%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB">分页与分段的主要区别</a></li></ul></li><li><a href="#8-%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95">8 页面置换算法</a></li><li><a href="#9-%E8%BE%B9%E6%B2%BF%E8%A7%A6%E5%8F%91%E5%92%8C%E6%B0%B4%E5%B9%B3%E8%A7%A6%E5%8F%91">9 边沿触发和水平触发</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a><ul><li><a href="#1-%E4%BA%8B%E5%8A%A1">1 事务</a></li><li><a href="#2-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95">2 数据库索引</a></li><li><a href="#3-redis%E5%8E%9F%E7%90%86">3 Redis原理</a><ul><li><a href="#redis%E6%98%AF%E4%BB%80%E4%B9%88">Redis是什么？</a></li><li><a href="#redis%E6%95%B0%E6%8D%AE%E5%BA%93">Redis数据库</a></li><li><a href="#redis%E7%BC%BA%E7%82%B9">Redis缺点</a></li></ul></li><li><a href="#4-%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81">4 乐观锁和悲观锁</a></li><li><a href="#5-mvcc">5 MVCC</a><ul><li><a href="#mysql%E7%9A%84innodb%E5%BC%95%E6%93%8E%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0mvcc%E7%9A%84"><a href="http://lib.csdn.net/base/mysql">MySQL</a>的innodb引擎是如何实现MVCC的</a></li></ul></li><li><a href="#6-myisam%E5%92%8Cinnodb">6 MyISAM和InnoDB</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C">网络</a><ul><li><a href="#1-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">1 三次握手</a></li><li><a href="#2-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B">2 四次挥手</a></li><li><a href="#3-arp%E5%8D%8F%E8%AE%AE">3 ARP协议</a></li><li><a href="#4-urllib%E5%92%8Curllib2%E7%9A%84%E5%8C%BA%E5%88%AB">4 urllib和urllib2的区别</a></li><li><a href="#5-post%E5%92%8Cget">5 Post和Get</a></li><li><a href="#6-cookie%E5%92%8Csession">6 Cookie和Session</a></li><li><a href="#7-apache%E5%92%8Cnginx%E7%9A%84%E5%8C%BA%E5%88%AB">7 apache和nginx的区别</a></li><li><a href="#8-%E7%BD%91%E7%AB%99%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E4%BF%9D%E5%AD%98">8 网站用户密码保存</a></li><li><a href="#9-http%E5%92%8Chttps">9 HTTP和HTTPS</a></li><li><a href="#10-xsrf%E5%92%8Cxss">10 XSRF和XSS</a></li><li><a href="#11-%E5%B9%82%E7%AD%89-idempotence">11 幂等 Idempotence</a></li><li><a href="#12-restful%E6%9E%B6%E6%9E%84soaprpc">12 RESTful架构(SOAP,RPC)</a></li><li><a href="#13-soap">13 SOAP</a></li><li><a href="#14-rpc">14 RPC</a></li><li><a href="#15-cgi%E5%92%8Cwsgi">15 CGI和WSGI</a></li><li><a href="#16-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">16 中间人攻击</a></li><li><a href="#17-c10k%E9%97%AE%E9%A2%98">17 c10k问题</a></li><li><a href="#18-socket">18 socket</a></li><li><a href="#19-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98">19 浏览器缓存</a></li><li><a href="#20-http10%E5%92%8Chttp11">20 HTTP1.0和HTTP1.1</a></li><li><a href="#21-ajax">21 Ajax</a></li></ul></li><li><a href="#nix">*NIX</a><ul><li><a href="#unix%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8Fipc">unix进程间通信方式(IPC)</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a><ul><li><a href="#1-%E7%BA%A2%E9%BB%91%E6%A0%91">1 红黑树</a></li></ul></li><li><a href="#%E7%BC%96%E7%A8%8B%E9%A2%98">编程题</a><ul><li><a href="#1-%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91">1 台阶问题/斐波那契</a></li><li><a href="#2-%E5%8F%98%E6%80%81%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98">2 变态台阶问题</a></li><li><a href="#3-%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96">3 矩形覆盖</a></li><li><a href="#4-%E6%9D%A8%E6%B0%8F%E7%9F%A9%E9%98%B5%E6%9F%A5%E6%89%BE">4 杨氏矩阵查找</a></li><li><a href="#5-%E5%8E%BB%E9%99%A4%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0">5 去除列表中的重复元素</a></li><li><a href="#6-%E9%93%BE%E8%A1%A8%E6%88%90%E5%AF%B9%E8%B0%83%E6%8D%A2">6 链表成对调换</a></li><li><a href="#7-%E5%88%9B%E5%BB%BA%E5%AD%97%E5%85%B8%E7%9A%84%E6%96%B9%E6%B3%95">7 创建字典的方法</a><ul><li><a href="#1-%E7%9B%B4%E6%8E%A5%E5%88%9B%E5%BB%BA">1 直接创建</a></li><li><a href="#2-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95">2 工厂方法</a></li><li><a href="#3-fromkeys%E6%96%B9%E6%B3%95">3 fromkeys()方法</a></li></ul></li><li><a href="#8-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E5%88%97%E8%A1%A8">8 合并两个有序列表</a></li><li><a href="#9-%E4%BA%A4%E5%8F%89%E9%93%BE%E8%A1%A8%E6%B1%82%E4%BA%A4%E7%82%B9">9 交叉链表求交点</a></li><li><a href="#10-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">10 二分查找</a></li><li><a href="#11-%E5%BF%AB%E6%8E%92">11 快排</a></li><li><a href="#12-%E6%89%BE%E9%9B%B6%E9%97%AE%E9%A2%98">12 找零问题</a></li><li><a href="#13-%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86%E5%92%8C%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91">13 广度遍历和深度遍历二叉树</a></li><li><a href="#17-%E5%89%8D%E4%B8%AD%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86">17 前中后序遍历</a></li><li><a href="#18-%E6%B1%82%E6%9C%80%E5%A4%A7%E6%A0%91%E6%B7%B1">18 求最大树深</a></li><li><a href="#19-%E6%B1%82%E4%B8%A4%E6%A3%B5%E6%A0%91%E6%98%AF%E5%90%A6%E7%9B%B8%E5%90%8C">19 求两棵树是否相同</a></li><li><a href="#20-%E5%89%8D%E5%BA%8F%E4%B8%AD%E5%BA%8F%E6%B1%82%E5%90%8E%E5%BA%8F">20 前序中序求后序</a></li><li><a href="#21-%E5%8D%95%E9%93%BE%E8%A1%A8%E9%80%86%E7%BD%AE">21 单链表逆置</a></li><li><a href="#22-%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E5%8F%98%E4%BD%8D%E8%AF%8D">22 两个字符串是否是变位词</a></li><li><a href="#23-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98">23 动态规划问题</a></li></ul></li></ul><!-- markdown-toc end --><h1 id="python语言特性"><a class="markdownIt-Anchor" href="#python语言特性"></a> Python语言特性</h1><h2 id="1-python的函数参数传递"><a class="markdownIt-Anchor" href="#1-python的函数参数传递"></a> 1 Python的函数参数传递</h2><p>看两个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a</span>):</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="built_in">print</span> a  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a</span>):</span></span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line">fun(a)</span><br><span class="line"><span class="built_in">print</span> a  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><p>所有的变量都可以理解是内存中一个对象的“引用”，或者，也可以看似c中void*的感觉。</p><p>通过<code>id</code>来看引用<code>a</code>的内存地址可以比较理解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;func_in&quot;</span>,<span class="built_in">id</span>(a)   <span class="comment"># func_in 41322472</span></span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;re-point&quot;</span>,<span class="built_in">id</span>(a), <span class="built_in">id</span>(<span class="number">2</span>)   <span class="comment"># re-point 41322448 41322448</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;func_out&quot;</span>,<span class="built_in">id</span>(a), <span class="built_in">id</span>(<span class="number">1</span>)  <span class="comment"># func_out 41322472 41322472</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="built_in">print</span> a  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>注：具体的值在不同电脑上运行时可能不同。</p><p>可以看到，在执行完<code>a = 2</code>之后，<code>a</code>引用中保存的值，即内存地址发生变化，由原来<code>1</code>对象的所在的地址变成了<code>2</code>这个实体对象的内存地址。</p><p>而第2个例子<code>a</code>引用保存的内存值就不会发生变化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;func_in&quot;</span>,<span class="built_in">id</span>(a)  <span class="comment"># func_in 53629256</span></span><br><span class="line">    a.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;func_out&quot;</span>,<span class="built_in">id</span>(a)     <span class="comment"># func_out 53629256</span></span><br><span class="line">fun(a)</span><br><span class="line"><span class="built_in">print</span> a  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><p>这里记住的是类型是属于对象的，而不是变量。而对象有两种,“可更改”（mutable）与“不可更改”（immutable）对象。在python中，strings, tuples, 和numbers是不可更改的对象，而 list, dict, set 等则是可以修改的对象。(这就是这个问题的重点)</p><p>当一个引用传递给函数的时候,函数自动复制一份引用,这个函数里的引用和外边的引用没有半毛关系了.所以第一个例子里函数把引用指向了一个不可变对象,当函数返回的时候,外面的引用没半毛感觉.而第二个例子就不一样了,函数内的引用指向的是可变对象,对它的操作就和定位了指针地址一样,在内存里进行修改.</p><p>如果还不明白的话,这里有更好的解释: <a href="http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">http://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference</a></p><h2 id="2-python中的元类metaclass"><a class="markdownIt-Anchor" href="#2-python中的元类metaclass"></a> 2 Python中的元类(metaclass)</h2><p>这个非常的不常用,但是像ORM这种复杂的结构还是会需要的,详情请看:<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a></p><h2 id="3-staticmethod和classmethod"><a class="markdownIt-Anchor" href="#3-staticmethod和classmethod"></a> 3 @staticmethod和@classmethod</h2><p>Python其实有3个方法,即静态方法(staticmethod),类方法(classmethod)和实例方法,如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;executing foo(%s)&quot;</span>%(x)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;executing foo(%s,%s)&quot;</span>%(self,x)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_foo</span>(<span class="params">cls,x</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;executing class_foo(%s,%s)&quot;</span>%(cls,x)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_foo</span>(<span class="params">x</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;executing static_foo(%s)&quot;</span>%x</span><br><span class="line"></span><br><span class="line">a=A()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里先理解下函数参数里面的self和cls.这个self和cls是对类或者实例的绑定,对于一般的函数来说我们可以这么调用<code>foo(x)</code>,这个函数就是最常用的,它的工作跟任何东西(类,实例)无关.对于实例方法,我们知道在类里每次定义方法的时候都需要绑定这个实例,就是<code>foo(self, x)</code>,为什么要这么做呢?因为实例方法的调用离不开实例,我们需要把实例自己传给函数,调用的时候是这样的<code>a.foo(x)</code>(其实是<code>foo(a, x)</code>).类方法一样,只不过它传递的是类而不是实例,<code>A.class_foo(x)</code>.注意这里的self和cls可以替换别的参数,但是python的约定是这俩,还是不要改的好.</p><p>对于静态方法其实和普通的方法一样,不需要对谁进行绑定,唯一的区别是调用的时候需要使用<code>a.static_foo(x)</code>或者<code>A.static_foo(x)</code>来调用.</p><table><thead><tr><th style="text-align:left">\</th><th style="text-align:left">实例方法</th><th style="text-align:left">类方法</th><th style="text-align:left">静态方法</th></tr></thead><tbody><tr><td style="text-align:left">a = A()</td><td style="text-align:left">a.foo(x)</td><td style="text-align:left">a.class_foo(x)</td><td style="text-align:left">a.static_foo(x)</td></tr><tr><td style="text-align:left">A</td><td style="text-align:left">不可用</td><td style="text-align:left">A.class_foo(x)</td><td style="text-align:left">A.static_foo(x)</td></tr></tbody></table><p>更多关于这个问题:</p><ol><li><a href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python</a></li><li><a href="https://realpython.com/blog/python/instance-class-and-static-methods-demystified/">https://realpython.com/blog/python/instance-class-and-static-methods-demystified/</a></li></ol><h2 id="4-类变量和实例变量"><a class="markdownIt-Anchor" href="#4-类变量和实例变量"></a> 4 类变量和实例变量</h2><p><strong>类变量：</strong></p><blockquote><p>​是可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。例如下例中，num_of_instance 就是类变量，用于跟踪存在着多少个Test 的实例。</p></blockquote><p><strong>实例变量：</strong></p><blockquote><p>实例化之后，每个实例单独拥有的变量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span>  </span><br><span class="line">    num_of_instance = <span class="number">0</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span>  </span><br><span class="line">        self.name = name  </span><br><span class="line">        Test.num_of_instance += <span class="number">1</span>  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="built_in">print</span> Test.num_of_instance   <span class="comment"># 0</span></span><br><span class="line">    t1 = Test(<span class="string">&#x27;jack&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span> Test.num_of_instance   <span class="comment"># 1</span></span><br><span class="line">    t2 = Test(<span class="string">&#x27;lucy&#x27;</span>)  </span><br><span class="line">    <span class="built_in">print</span> t1.name , t1.num_of_instance  <span class="comment"># jack 2</span></span><br><span class="line">    <span class="built_in">print</span> t2.name , t2.num_of_instance  <span class="comment"># lucy 2</span></span><br></pre></td></tr></table></figure><blockquote><p>补充的例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name=<span class="string">&quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line">p1=Person()</span><br><span class="line">p2=Person()</span><br><span class="line">p1.name=<span class="string">&quot;bbb&quot;</span></span><br><span class="line"><span class="built_in">print</span> p1.name  <span class="comment"># bbb</span></span><br><span class="line"><span class="built_in">print</span> p2.name  <span class="comment"># aaa</span></span><br><span class="line"><span class="built_in">print</span> Person.name  <span class="comment"># aaa</span></span><br></pre></td></tr></table></figure><p>这里<code>p1.name=&quot;bbb&quot;</code>是实例调用了类变量,这其实和上面第一个问题一样,就是函数传参的问题,<code>p1.name</code>一开始是指向的类变量<code>name=&quot;aaa&quot;</code>,但是在实例的作用域里把类变量的引用改变了,就变成了一个实例变量,self.name不再引用Person的类变量name了.</p><p>可以看看下面的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name=[]</span><br><span class="line"></span><br><span class="line">p1=Person()</span><br><span class="line">p2=Person()</span><br><span class="line">p1.name.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> p1.name  <span class="comment"># [1]</span></span><br><span class="line"><span class="built_in">print</span> p2.name  <span class="comment"># [1]</span></span><br><span class="line"><span class="built_in">print</span> Person.name  <span class="comment"># [1]</span></span><br></pre></td></tr></table></figure><p>参考:<a href="http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block">http://stackoverflow.com/questions/6470428/catch-multiple-exceptions-in-one-line-except-block</a></p><h2 id="5-python自省"><a class="markdownIt-Anchor" href="#5-python自省"></a> 5 Python自省</h2><p>这个也是python彪悍的特性.</p><p>自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">c = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(a),<span class="built_in">type</span>(b),<span class="built_in">type</span>(c) <span class="comment"># &lt;type &#x27;list&#x27;&gt; &lt;type &#x27;dict&#x27;&gt; &lt;type &#x27;bool&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">isinstance</span>(a,<span class="built_in">list</span>)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="6-字典推导式"><a class="markdownIt-Anchor" href="#6-字典推导式"></a> 6 字典推导式</h2><p>可能你见过列表推导时,却没有见过字典推导式,在2.7中才加入的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;key: value <span class="keyword">for</span> (key, value) <span class="keyword">in</span> iterable&#125;</span><br></pre></td></tr></table></figure><h2 id="7-python中单下划线和双下划线"><a class="markdownIt-Anchor" href="#7-python中单下划线和双下划线"></a> 7 Python中单下划线和双下划线</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>            self.__superprivate = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="meta">... </span>            self._semiprivate = <span class="string">&quot;, world!&quot;</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mc = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> mc.__superprivate</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: myClass instance has no attribute <span class="string">&#x27;__superprivate&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> mc._semiprivate</span><br><span class="line">, world!</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> mc.__dict__</span><br><span class="line">&#123;<span class="string">&#x27;_MyClass__superprivate&#x27;</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;_semiprivate&#x27;</span>: <span class="string">&#x27;, world!&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><code>__foo__</code>:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如<code>__init__()</code>,<code>__del__()</code>,<code>__call__()</code>这些特殊方法</p><p><code>_foo</code>:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</p><p><code>__foo</code>:这个有真正的意义:解析器用<code>_classname__foo</code>来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问.</p><p>详情见:<a href="http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python">http://stackoverflow.com/questions/1301346/the-meaning-of-a-single-and-a-double-underscore-before-an-object-name-in-python</a></p><p>或者: <a href="http://www.zhihu.com/question/19754941">http://www.zhihu.com/question/19754941</a></p><h2 id="8-字符串格式化和format"><a class="markdownIt-Anchor" href="#8-字符串格式化和format"></a> 8 字符串格式化:%和.format</h2><p>.format在许多方面看起来更便利.对于<code>%</code>最烦人的是它无法同时传递一个变量和元组.你可能会想下面的代码不会有什么问题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;hi there %s&quot; % name</span><br></pre></td></tr></table></figure><p>但是,如果name恰好是(1,2,3),它将会抛出一个TypeError异常.为了保证它总是正确的,你必须这样做:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;hi there %s&quot; % (name,)   # 提供一个单元素的数组而不是一个参数</span><br></pre></td></tr></table></figure><p>但是有点丑…format就没有这些问题.你给的第二个问题也是这样,.format好看多了.</p><p>你为什么不用它?</p><ul><li>不知道它(在读这个之前)</li><li>为了和Python2.5兼容(譬如logging库建议使用<code>%</code>(<a href="https://github.com/taizilongxu/interview_python/issues/4">issue #4</a>))</li></ul><p><a href="http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format">http://stackoverflow.com/questions/5082452/python-string-formatting-vs-format</a></p><h2 id="9-迭代器和生成器"><a class="markdownIt-Anchor" href="#9-迭代器和生成器"></a> 9 迭代器和生成器</h2><p>这个是stackoverflow里python排名第一的问题,值得一看: <a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python">http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python</a></p><p>这是中文版: <a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/1/README.html</a></p><p>这里有个关于生成器的创建问题面试官有考：<br />问：  将列表生成式中[]改成() 之后数据结构是否改变？<br />答案：是，从列表变为生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x0000028F8B774200</span>&gt;</span><br></pre></td></tr></table></figure><p>通过列表生成式，可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含百万元素的列表，不仅是占用很大的内存空间，如：我们只需要访问前面的几个元素，后面大部分元素所占的空间都是浪费的。因此，没有必要创建完整的列表（节省大量内存空间）。在Python中，我们可以采用生成器：边循环，边计算的机制—&gt;generator</p><h2 id="10-args-and-kwargs"><a class="markdownIt-Anchor" href="#10-args-and-kwargs"></a> 10 <code>*args</code> and <code>**kwargs</code></h2><p>用<code>*args</code>和<code>**kwargs</code>只是为了方便并没有强制使用它们.</p><p>当你不确定你的函数里将要传递多少参数时你可以用<code>*args</code>.例如,它可以传递任意数量的参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_everything</span>(<span class="params">*args</span>):</span></span><br><span class="line">        <span class="keyword">for</span> count, thing <span class="keyword">in</span> <span class="built_in">enumerate</span>(args):</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span> <span class="string">&#x27;&#123;0&#125;. &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(count, thing)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_everything(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cabbage&#x27;</span>)</span><br><span class="line"><span class="number">0.</span> apple</span><br><span class="line"><span class="number">1.</span> banana</span><br><span class="line"><span class="number">2.</span> cabbage</span><br></pre></td></tr></table></figure><p>相似的,<code>**kwargs</code>允许你使用没有事先定义的参数名:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">table_things</span>(<span class="params">**kwargs</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> name, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span> <span class="string">&#x27;&#123;0&#125; = &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(name, value)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>table_things(apple = <span class="string">&#x27;fruit&#x27;</span>, cabbage = <span class="string">&#x27;vegetable&#x27;</span>)</span><br><span class="line">cabbage = vegetable</span><br><span class="line">apple = fruit</span><br></pre></td></tr></table></figure><p>你也可以混着用.命名参数首先获得参数值然后所有的其他参数都传递给<code>*args</code>和<code>**kwargs</code>.命名参数在列表的最前端.例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def table_things(titlestring, **kwargs)</span><br></pre></td></tr></table></figure><p><code>*args</code>和<code>**kwargs</code>可以同时在函数的定义中,但是<code>*args</code>必须在<code>**kwargs</code>前面.</p><p>当调用函数时你也可以用<code>*</code>和<code>**</code>语法.例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_three_things</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> <span class="string">&#x27;a = &#123;0&#125;, b = &#123;1&#125;, c = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(a,b,c)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="string">&#x27;aardvark&#x27;</span>, <span class="string">&#x27;baboon&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_three_things(*mylist)</span><br><span class="line"></span><br><span class="line">a = aardvark, b = baboon, c = cat</span><br></pre></td></tr></table></figure><p>就像你看到的一样,它可以传递列表(或者元组)的每一项并把它们解包.注意必须与它们在函数里的参数相吻合.当然,你也可以在函数定义或者函数调用时用*.</p><p><a href="http://stackoverflow.com/questions/3394835/args-and-kwargs">http://stackoverflow.com/questions/3394835/args-and-kwargs</a></p><h2 id="11-面向切面编程aop和装饰器"><a class="markdownIt-Anchor" href="#11-面向切面编程aop和装饰器"></a> 11 面向切面编程AOP和装饰器</h2><p>这个AOP一听起来有点懵,同学面阿里的时候就被问懵了…</p><p>装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，<strong>装饰器的作用就是为已经存在的对象添加额外的功能。</strong></p><p>这个问题比较大,推荐: <a href="http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python">http://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python</a></p><p>中文: <a href="http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html">http://taizilongxu.gitbooks.io/stackoverflow-about-python/content/3/README.html</a></p><h2 id="12-鸭子类型"><a class="markdownIt-Anchor" href="#12-鸭子类型"></a> 12 鸭子类型</h2><p>“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p><p>我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。</p><p>比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很多相同的方法，我们把它们当作文件使用。</p><p>又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以它的参数可以是list/tuple/dict/字符串/生成器等.</p><p>鸭子类型在动态语言中经常使用，非常灵活，使得python不像java那样专门去弄一大堆的设计模式。</p><h2 id="13-python中重载"><a class="markdownIt-Anchor" href="#13-python中重载"></a> 13 Python中重载</h2><p>引自知乎:<a href="http://www.zhihu.com/question/20053359">http://www.zhihu.com/question/20053359</a></p><p>函数重载主要是为了解决两个问题。</p><ol><li>可变参数类型。</li><li>可变参数个数。</li></ol><p>另外，一个基本的设计原则是，仅仅当两个函数除了参数类型和参数个数不同以外，其功能是完全相同的，此时才使用函数重载，如果两个函数的功能其实不同，那么不应当使用重载，而应当使用一个名字不同的函数。</p><p>好吧，那么对于情况 1 ，函数功能相同，但是参数类型不同，python 如何处理？答案是根本不需要处理，因为 python 可以接受任何类型的参数，如果函数的功能相同，那么不同的参数类型在 python 中很可能是相同的代码，没有必要做成两个不同函数。</p><p>那么对于情况 2 ，函数功能相同，但参数个数不同，python 如何处理？大家知道，答案就是缺省参数。对那些缺少的参数设定为缺省参数即可解决问题。因为你假设函数功能相同，那么那些缺少的参数终归是需要用的。</p><p>好了，鉴于情况 1 跟 情况 2 都有了解决方案，python 自然就不需要函数重载了。</p><h2 id="14-新式类和旧式类"><a class="markdownIt-Anchor" href="#14-新式类和旧式类"></a> 14 新式类和旧式类</h2><p>这个面试官问了,我说了老半天,不知道他问的真正意图是什么.</p><p><a href="http://stackoverflow.com/questions/54867/what-is-the-difference-between-old-style-and-new-style-classes-in-python">stackoverflow</a></p><p>这篇文章很好的介绍了新式类的特性: <a href="http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html">http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html</a></p><p>新式类很早在2.2就出现了,所以旧式类完全是兼容的问题,Python3里的类全部都是新式类.这里有一个MRO问题可以了解下(新式类继承是根据C3算法,旧式类是深度优先),&lt;Python核心编程&gt;里讲的也很多.</p><blockquote><p>一个旧式类的深度优先的例子</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;A&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo2</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="params">B, C</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.foo1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># A</span></span><br></pre></td></tr></table></figure><p><strong>按照经典类的查找顺序<code>从左到右深度优先</code>的规则，在访问<code>d.foo1()</code>的时候,D这个类是没有的…那么往上查找,先找到B,里面没有,深度优先,访问A,找到了foo1(),所以这时候调用的是A的foo1()，从而导致C重写的foo1()被绕过</strong></p><h2 id="15-__new__和__init__的区别"><a class="markdownIt-Anchor" href="#15-__new__和__init__的区别"></a> 15 <code>__new__</code>和<code>__init__</code>的区别</h2><p>这个<code>__new__</code>确实很少见到,先做了解吧.</p><ol><li><code>__new__</code>是一个静态方法,而<code>__init__</code>是一个实例方法.</li><li><code>__new__</code>方法会返回一个创建的实例,而<code>__init__</code>什么都不返回.</li><li>只有在<code>__new__</code>返回一个cls的实例时后面的<code>__init__</code>才能被调用.</li><li>当创建一个新实例时调用<code>__new__</code>,初始化一个实例时用<code>__init__</code>.</li></ol><p><a href="http://stackoverflow.com/questions/674304/pythons-use-of-new-and-init">stackoverflow</a></p><p>ps: <code>__metaclass__</code>是创建类时起作用.所以我们可以分别使用<code>__metaclass__</code>,<code>__new__</code>和<code>__init__</code>来分别在类创建,实例创建和实例初始化的时候做一些小手脚.</p><h2 id="16-单例模式"><a class="markdownIt-Anchor" href="#16-单例模式"></a> 16 单例模式</h2><blockquote><p>​单例模式是一种常用的软件设计模式。在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p><p><code>__new__()</code>在<code>__init__()</code>之前被调用，用于生成实例对象。利用这个方法和类的属性的特点可以实现设计模式的单例模式。单例模式是指创建唯一对象，单例模式设计的类只能实例<br /><strong>这个绝对常考啊.绝对要记住1~2个方法,当时面试官是让手写的.</strong></p></blockquote><h3 id="1-使用__new__方法"><a class="markdownIt-Anchor" href="#1-使用__new__方法"></a> 1 使用<code>__new__</code>方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kw</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            orig = <span class="built_in">super</span>(Singleton, cls)</span><br><span class="line">            cls._instance = orig.__new__(cls, *args, **kw)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(<span class="params">Singleton</span>):</span></span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-共享属性"><a class="markdownIt-Anchor" href="#2-共享属性"></a> 2 共享属性</h3><p>创建实例时把所有实例的<code>__dict__</code>指向同一个字典,这样它们具有相同的属性和方法.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Borg</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    _state = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kw</span>):</span></span><br><span class="line">        ob = <span class="built_in">super</span>(Borg, cls).__new__(cls, *args, **kw)</span><br><span class="line">        ob.__dict__ = cls._state</span><br><span class="line">        <span class="keyword">return</span> ob</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass2</span>(<span class="params">Borg</span>):</span></span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-装饰器版本"><a class="markdownIt-Anchor" href="#3-装饰器版本"></a> 3 装饰器版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span>(<span class="params">cls</span>):</span></span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getinstance</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="4-import方法"><a class="markdownIt-Anchor" href="#4-import方法"></a> 4 import方法</h3><p>作为python的模块是天然的单例模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysingleton.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Singleton</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">my_singleton = My_Singleton()</span><br><span class="line"></span><br><span class="line"><span class="comment"># to use</span></span><br><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</span><br><span class="line"></span><br><span class="line">my_singleton.foo()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><a href="http://python.jobbole.com/87294/">单例模式伯乐在线详细解释</a></strong></p><h2 id="17-python中的作用域"><a class="markdownIt-Anchor" href="#17-python中的作用域"></a> 17 Python中的作用域</h2><p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定的。</p><p>当 Python 遇到一个变量的话他会按照这样的顺序进行搜索：</p><p>本地作用域（Local）→当前作用域被嵌入的本地作用域（Enclosing locals）→全局/模块作用域（Global）→内置作用域（Built-in）</p><h2 id="18-gil线程全局锁"><a class="markdownIt-Anchor" href="#18-gil线程全局锁"></a> 18 GIL线程全局锁</h2><p>线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运行的限制,说白了就是一个核只能在同一时间运行一个线程.<strong>对于io密集型任务，python的多线程起到作用，但对于cpu密集型任务，python的多线程几乎占不到任何优势，还有可能因为争夺资源而变慢。</strong></p><p>见<a href="http://www.oschina.net/translate/pythons-hardest-problem">Python 最难的问题</a></p><p>解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能).</p><h2 id="19-协程"><a class="markdownIt-Anchor" href="#19-协程"></a> 19 协程</h2><p>知乎被问到了,呵呵哒,跪了</p><p>简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而耗费许多切换时间,而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态.</p><p>Python里最常见的yield就是协程的思想!可以查看第九个问题.</p><h2 id="20-闭包"><a class="markdownIt-Anchor" href="#20-闭包"></a> 20 闭包</h2><p>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。</p><p>当一个内嵌函数引用其外部作作用域的变量,我们就会得到一个闭包. 总结一下,创建一个闭包必须满足以下几点:</p><ol><li>必须有一个内嵌函数</li><li>内嵌函数必须引用外部函数中的变量</li><li>外部函数的返回值必须是内嵌函数</li></ol><p>感觉闭包还是有难度的,几句话是说不明白的,还是查查相关资料.</p><p>重点是函数运行后并不会被撤销,就像16题的instance字典一样,当函数运行完后,instance并不被销毁,而是继续留在内存空间里.这个功能类似类里的类变量,只不过迁移到了函数上.</p><p>闭包就像个空心球一样,你知道外面和里面,但你不知道中间是什么样.</p><h2 id="21-lambda函数"><a class="markdownIt-Anchor" href="#21-lambda函数"></a> 21 lambda函数</h2><p>其实就是一个匿名函数,为什么叫lambda?因为和后面的函数式编程有关.</p><p>推荐: <a href="http://www.zhihu.com/question/20125256">知乎</a></p><h2 id="22-python函数式编程"><a class="markdownIt-Anchor" href="#22-python函数式编程"></a> 22 Python函数式编程</h2><p>这个需要适当的了解一下吧,毕竟函数式编程在Python中也做了引用.</p><p>推荐: <a href="http://coolshell.cn/articles/10822.html">酷壳</a></p><p>python中函数式编程支持:</p><p>filter 函数的功能相当于过滤器。调用一个布尔函数<code>bool_func</code>来迭代遍历每个seq中的元素；返回一个使<code>bool_seq</code>返回值为true的元素的序列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;b = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, a)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span> b</span><br><span class="line">&gt;&gt;&gt;[<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>map函数是对一个序列的每个项依次执行函数，下面是对一个序列每个项都乘以2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">map</span>(<span class="keyword">lambda</span> x:x*<span class="number">2</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(a)</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>reduce函数是对一个序列的每个项迭代调用函数，下面是求3的阶乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(<span class="keyword">lambda</span> x,y:x*y,<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>))</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="23-python里的拷贝"><a class="markdownIt-Anchor" href="#23-python里的拷贝"></a> 23 Python里的拷贝</h2><p>引用和copy(),deepcopy()的区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]  <span class="comment">#原始对象</span></span><br><span class="line"></span><br><span class="line">b = a  <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c = copy.copy(a)  <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d = copy.deepcopy(a)  <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">5</span>)  <span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">4</span>].append(<span class="string">&#x27;c&#x27;</span>)  <span class="comment">#修改对象a中的[&#x27;a&#x27;, &#x27;b&#x27;]数组对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;a = &#x27;</span>, a</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;b = &#x27;</span>, b</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;c = &#x27;</span>, c</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;d = &#x27;</span>, d</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>]</span><br><span class="line">b =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="number">5</span>]</span><br><span class="line">c =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]]</span><br><span class="line">d =  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]]</span><br></pre></td></tr></table></figure><h2 id="24-python垃圾回收机制"><a class="markdownIt-Anchor" href="#24-python垃圾回收机制"></a> 24 Python垃圾回收机制</h2><p>Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。</p><h3 id="1-引用计数"><a class="markdownIt-Anchor" href="#1-引用计数"></a> 1 引用计数</h3><p>PyObject是每个对象必有的内容，其中<code>ob_refcnt</code>就是做为引用计数。当一个对象有新的引用时，它的<code>ob_refcnt</code>就会增加，当引用它的对象被删除，它的<code>ob_refcnt</code>就会减少.引用计数为0时，该对象生命就结束了。</p><p>优点:</p><ol><li>简单</li><li>实时性</li></ol><p>缺点:</p><ol><li>维护引用计数消耗资源</li><li>循环引用</li></ol><h3 id="2-标记-清除机制"><a class="markdownIt-Anchor" href="#2-标记-清除机制"></a> 2 标记-清除机制</h3><p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。</p><h3 id="3-分代技术"><a class="markdownIt-Anchor" href="#3-分代技术"></a> 3 分代技术</h3><p>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。</p><p>Python默认定义了三代对象集合，索引数越大，对象存活时间越长。</p><p>举例：<br />当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p><h2 id="25-python的list"><a class="markdownIt-Anchor" href="#25-python的list"></a> 25 Python的List</h2><p>推荐: <a href="http://www.jianshu.com/p/J4U6rR">http://www.jianshu.com/p/J4U6rR</a></p><h2 id="26-python的is"><a class="markdownIt-Anchor" href="#26-python的is"></a> 26 Python的is</h2><p>is是对比地址,==是对比值</p><h2 id="27-readreadline和readlines"><a class="markdownIt-Anchor" href="#27-readreadline和readlines"></a> 27 read,readline和readlines</h2><ul><li>read        读取整个文件</li><li>readline    读取下一行,使用生成器方法</li><li>readlines   读取整个文件到一个迭代器以供我们遍历</li></ul><h2 id="28-python2和3的区别"><a class="markdownIt-Anchor" href="#28-python2和3的区别"></a> 28 Python2和3的区别</h2><p>推荐：<a href="http://chenqx.github.io/2014/11/10/Key-differences-between-Python-2-7-x-and-Python-3-x/">Python 2.7.x 与 Python 3.x 的主要差异</a></p><h2 id="29-super-init"><a class="markdownIt-Anchor" href="#29-super-init"></a> 29 super init</h2><p>super() lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven’t already.</p><p>Note that the syntax changed in Python 3.0: you can just say super().<code>__init__</code>() instead of super(ChildB, self).<code>__init__</code>() which IMO is quite a bit nicer.</p><p><a href="http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods">http://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods</a></p><p><a href="http://blog.csdn.net/mrlevo520/article/details/51712440">Python2.7中的super方法浅见</a></p><h2 id="30-range-and-xrange"><a class="markdownIt-Anchor" href="#30-range-and-xrange"></a> 30 range and xrange</h2><p>都在循环时使用，xrange内存性能更好。<br />for i in range(0, 20):<br />for i in xrange(0, 20):<br />What is the difference between range and xrange functions in Python 2.X?<br />range creates a list, so if you do range(1, 10000000) it creates a list in memory with 9999999 elements.<br />xrange is a sequence object that evaluates lazily.</p><p><a href="http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x">http://stackoverflow.com/questions/94935/what-is-the-difference-between-range-and-xrange-functions-in-python-2-x</a></p><h1 id="操作系统"><a class="markdownIt-Anchor" href="#操作系统"></a> 操作系统</h1><h2 id="1-selectpoll和epoll"><a class="markdownIt-Anchor" href="#1-selectpoll和epoll"></a> 1 select,poll和epoll</h2><p>其实所有的I/O都是轮询的方法,只不过实现的层面不同罢了.</p><p>这个问题可能有点深入了,但相信能回答出这个问题是对I/O多路复用有很好的了解了.其中tornado使用的就是epoll的.</p><p><a href="http://www.cnblogs.com/Anker/p/3265058.html">selec,poll和epoll区别总结</a></p><p>基本上select有3个缺点:</p><ol><li>连接数受限</li><li>查找配对速度慢</li><li>数据由内核拷贝到用户态</li></ol><p>poll改善了第一个缺点</p><p>epoll改了三个缺点.</p><p>关于epoll的: <a href="http://www.cnblogs.com/my_life/articles/3968782.html">http://www.cnblogs.com/my_life/articles/3968782.html</a></p><h2 id="2-调度算法"><a class="markdownIt-Anchor" href="#2-调度算法"></a> 2 调度算法</h2><ol><li>先来先服务(FCFS, First Come First Serve)</li><li>短作业优先(SJF, Shortest Job First)</li><li>最高优先权调度(Priority Scheduling)</li><li>时间片轮转(RR, Round Robin)</li><li>多级反馈队列调度(multilevel feedback queue scheduling)</li></ol><p>常见的调度算法总结:<a href="http://www.jianshu.com/p/6edf8174c1eb">http://www.jianshu.com/p/6edf8174c1eb</a></p><p>实时调度算法:</p><ol><li>最早截至时间优先 EDF</li><li>最低松弛度优先 LLF</li></ol><h2 id="3-死锁"><a class="markdownIt-Anchor" href="#3-死锁"></a> 3 死锁</h2><p>原因:</p><ol><li>竞争资源</li><li>程序推进顺序不当</li></ol><p>必要条件:</p><ol><li>互斥条件</li><li>请求和保持条件</li><li>不剥夺条件</li><li>环路等待条件</li></ol><p>处理死锁基本方法:</p><ol><li>预防死锁(摒弃除1以外的条件)</li><li>避免死锁(银行家算法)</li><li>检测死锁(资源分配图)</li><li>解除死锁<ol><li>剥夺资源</li><li>撤销进程</li></ol></li></ol><p>死锁概念处理策略详细介绍:<a href="https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html">https://wizardforcel.gitbooks.io/wangdaokaoyan-os/content/10.html</a></p><h2 id="4-程序编译与链接"><a class="markdownIt-Anchor" href="#4-程序编译与链接"></a> 4 程序编译与链接</h2><p>推荐: <a href="http://www.ruanyifeng.com/blog/2014/11/compiler.html">http://www.ruanyifeng.com/blog/2014/11/compiler.html</a></p><p>Bulid过程可以分解为4个步骤:预处理(Prepressing), 编译(Compilation)、汇编(Assembly)、链接(Linking)</p><p>以c语言为例:</p><h3 id="1-预处理"><a class="markdownIt-Anchor" href="#1-预处理"></a> 1 预处理</h3><p>预编译过程主要处理那些源文件中的以“#”开始的预编译指令，主要处理规则有：</p><ol><li>将所有的“#define”删除，并展开所用的宏定义</li><li>处理所有条件预编译指令，比如“#if”、“#ifdef”、 “#elif”、“#endif”</li><li>处理“#include”预编译指令，将被包含的文件插入到该编译指令的位置，注：此过程是递归进行的</li><li>删除所有注释</li><li>添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息以及用于编译时产生编译错误或警告时可显示行号</li><li>保留所有的#pragma编译器指令。</li></ol><h3 id="2-编译"><a class="markdownIt-Anchor" href="#2-编译"></a> 2 编译</h3><p>编译过程就是把预处理完的文件进行一系列的词法分析、语法分析、语义分析及优化后生成相应的汇编代码文件。这个过程是整个程序构建的核心部分。</p><h3 id="3-汇编"><a class="markdownIt-Anchor" href="#3-汇编"></a> 3 汇编</h3><p>汇编器是将汇编代码转化成机器可以执行的指令，每一条汇编语句几乎都是一条机器指令。经过编译、链接、汇编输出的文件成为目标文件(Object File)</p><h3 id="4-链接"><a class="markdownIt-Anchor" href="#4-链接"></a> 4 链接</h3><p>链接的主要内容就是把各个模块之间相互引用的部分处理好，使各个模块可以正确的拼接。<br />链接的主要过程包块 地址和空间的分配（Address and Storage Allocation）、符号决议(Symbol Resolution)和重定位(Relocation)等步骤。</p><h2 id="5-静态链接和动态链接"><a class="markdownIt-Anchor" href="#5-静态链接和动态链接"></a> 5 静态链接和动态链接</h2><p>静态链接方法：静态链接的时候，载入代码就会把程序会用到的动态代码或动态代码的地址确定下来<br />静态库的链接可以使用静态链接，动态链接库也可以使用这种方法链接导入库</p><p>动态链接方法：使用这种方式的程序并不在一开始就完成动态链接，而是直到真正调用动态库代码时，载入程序才计算(被调用的那部分)动态代码的逻辑地址，然后等到某个时候，程序又需要调用另外某块动态代码时，载入程序又去计算这部分代码的逻辑地址，所以，这种方式使程序初始化时间较短，但运行期间的性能比不上静态链接的程序</p><h2 id="6-虚拟内存技术"><a class="markdownIt-Anchor" href="#6-虚拟内存技术"></a> 6 虚拟内存技术</h2><p>虚拟存储器是指具有请求调入功能和置换功能,能从逻辑上对内存容量加以扩充的一种存储系统.</p><h2 id="7-分页和分段"><a class="markdownIt-Anchor" href="#7-分页和分段"></a> 7 分页和分段</h2><p>分页: 用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。</p><p>分段: 将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。</p><h3 id="分页与分段的主要区别"><a class="markdownIt-Anchor" href="#分页与分段的主要区别"></a> 分页与分段的主要区别</h3><ol><li>页是信息的物理单位,分页是为了实现非连续分配,以便解决内存碎片问题,或者说分页是由于系统管理的需要.段是信息的逻辑单位,它含有一组意义相对完整的信息,分段的目的是为了更好地实现共享,满足用户的需要.</li><li>页的大小固定,由系统确定,将逻辑地址划分为页号和页内地址是由机器硬件实现的.而段的长度却不固定,决定于用户所编写的程序,通常由编译程序在对源程序进行编译时根据信息的性质来划分.</li><li>分页的作业地址空间是一维的.分段的地址空间是二维的.</li></ol><h2 id="8-页面置换算法"><a class="markdownIt-Anchor" href="#8-页面置换算法"></a> 8 页面置换算法</h2><ol><li>最佳置换算法OPT:不可能实现</li><li>先进先出FIFO</li><li>最近最久未使用算法LRU:最近一段时间里最久没有使用过的页面予以置换.</li><li>clock算法</li></ol><h2 id="9-边沿触发和水平触发"><a class="markdownIt-Anchor" href="#9-边沿触发和水平触发"></a> 9 边沿触发和水平触发</h2><p>边缘触发是指每当状态变化时发生一个 io 事件，条件触发是只要满足条件就发生一个 io 事件</p><h1 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h1><h2 id="1-事务"><a class="markdownIt-Anchor" href="#1-事务"></a> 1 事务</h2><p>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。<br />彻底理解数据库事务: <a href="http://www.hollischuang.com/archives/898">http://www.hollischuang.com/archives/898</a></p><h2 id="2-数据库索引"><a class="markdownIt-Anchor" href="#2-数据库索引"></a> 2 数据库索引</h2><p>推荐: <a href="http://tech.meituan.com/mysql-index.html">http://tech.meituan.com/mysql-index.html</a></p><p><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></p><p>聚集索引,非聚集索引,B-Tree,B+Tree,最左前缀原理</p><h2 id="3-redis原理"><a class="markdownIt-Anchor" href="#3-redis原理"></a> 3 Redis原理</h2><h3 id="redis是什么"><a class="markdownIt-Anchor" href="#redis是什么"></a> Redis是什么？</h3><ol><li>是一个完全开源免费的key-value内存数据库</li><li>通常被认为是一个数据结构服务器，主要是因为其有着丰富的数据结构 strings、map、 list、sets、 sorted sets</li></ol><h3 id="redis数据库"><a class="markdownIt-Anchor" href="#redis数据库"></a> Redis数据库</h3><blockquote><p>​通常局限点来说，Redis也以消息队列的形式存在，作为内嵌的List存在，满足实时的高并发需求。在使用缓存的时候，redis比memcached具有更多的优势，并且支持更多的数据类型，把redis当作一个中间存储系统，用来处理高并发的数据库操作</p></blockquote><ul><li>速度快：使用标准C写，所有数据都在内存中完成，读写速度分别达到10万/20万</li><li>持久化：对数据的更新采用Copy-on-write技术，可以异步地保存到磁盘上，主要有两种策略，一是根据时间，更新次数的快照（save 300 10 ）二是基于语句追加方式(Append-only file，aof)</li><li>自动操作：对不同数据类型的操作都是自动的，很安全</li><li>快速的主–从复制，官方提供了一个数据，Slave在21秒即完成了对Amazon网站10G key set的复制。</li><li>Sharding技术： 很容易将数据分布到多个Redis实例中，数据库的扩展是个永恒的话题，在关系型数据库中，主要是以添加硬件、以分区为主要技术形式的纵向扩展解决了很多的应用场景，但随着web2.0、移动互联网、云计算等应用的兴起，这种扩展模式已经不太适合了，所以近年来，像采用主从配置、数据库复制形式的，Sharding这种技术把负载分布到多个特理节点上去的横向扩展方式用处越来越多。</li></ul><h3 id="redis缺点"><a class="markdownIt-Anchor" href="#redis缺点"></a> Redis缺点</h3><ul><li>是数据库容量受到物理内存的限制,不能用作海量数据的高性能读写,因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</li><li>Redis较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li></ul><h2 id="4-乐观锁和悲观锁"><a class="markdownIt-Anchor" href="#4-乐观锁和悲观锁"></a> 4 乐观锁和悲观锁</h2><p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作</p><p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。</p><p>乐观锁与悲观锁的具体区别: <a href="http://www.cnblogs.com/Bob-FD/p/3352216.html">http://www.cnblogs.com/Bob-FD/p/3352216.html</a></p><h2 id="5-mvcc"><a class="markdownIt-Anchor" href="#5-mvcc"></a> 5 MVCC</h2><blockquote><p>​全称是Multi-Version Concurrent Control，即多版本并发控制，在MVCC协议下，每个读操作会看到一个一致性的snapshot，并且可以实现非阻塞的读。MVCC允许数据具有多个版本，这个版本可以是时间戳或者是全局递增的事务ID，在同一个时间点，不同的事务看到的数据是不同的。</p></blockquote><h3 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> <a href="http://lib.csdn.net/base/mysql">MySQL</a>的innodb引擎是如何实现MVCC的</h3><p>innodb会为每一行添加两个字段，分别表示该行<strong>创建的版本</strong>和<strong>删除的版本</strong>，填入的是事务的版本号，这个版本号随着事务的创建不断递增。在repeated read的隔离级别（<a href="http://blog.csdn.net/chosen0ne/article/details/10036775">事务的隔离级别请看这篇文章</a>）下，具体各种数据库操作的实现：</p><ul><li>select：满足以下两个条件innodb会返回该行数据：<ul><li>该行的创建版本号小于等于当前版本号，用于保证在select操作之前所有的操作已经执行落地。</li><li>该行的删除版本号大于当前版本或者为空。删除版本号大于当前版本意味着有一个并发事务将该行删除了。</li></ul></li><li>insert：将新插入的行的创建版本号设置为当前系统的版本号。</li><li>delete：将要删除的行的删除版本号设置为当前系统的版本号。</li><li>update：不执行原地update，而是转换成insert + delete。将旧行的删除版本号设置为当前版本号，并将新行insert同时设置创建版本号为当前版本号。</li></ul><p>其中，写操作（insert、delete和update）执行时，需要将系统版本号递增。</p><p>​由于旧数据并不真正的删除，所以必须对这些数据进行清理，innodb会开启一个后台线程执行清理工作，具体的规则是将删除版本号小于当前系统版本的行删除，这个过程叫做purge。</p><p>通过MVCC很好的实现了事务的隔离性，可以达到repeated read级别，要实现serializable还必须加锁。</p><blockquote><p>参考：<a href="http://blog.csdn.net/chosen0ne/article/details/18093187">MVCC浅析</a></p></blockquote><h2 id="6-myisam和innodb"><a class="markdownIt-Anchor" href="#6-myisam和innodb"></a> 6 MyISAM和InnoDB</h2><p>MyISAM 适合于一些需要大量查询的应用，但其对于有大量写操作并不是很好。甚至你只是需要update一个字段，整个表都会被锁起来，而别的进程，就算是读进程都无法操作直到读操作完成。另外，MyISAM 对于 SELECT COUNT(*) 这类的计算是超快无比的。</p><p>InnoDB 的趋势会是一个非常复杂的存储引擎，对于一些小的应用，它会比 MyISAM 还慢。他是它支持“行锁” ，于是在写操作比较多的时候，会更优秀。并且，他还支持更多的高级应用，比如：事务。</p><p>mysql 数据库引擎: <a href="http://www.cnblogs.com/0201zcr/p/5296843.html">http://www.cnblogs.com/0201zcr/p/5296843.html</a><br />MySQL存储引擎－－MyISAM与InnoDB区别: <a href="https://segmentfault.com/a/1190000008227211">https://segmentfault.com/a/1190000008227211</a></p><h1 id="网络"><a class="markdownIt-Anchor" href="#网络"></a> 网络</h1><h2 id="1-三次握手"><a class="markdownIt-Anchor" href="#1-三次握手"></a> 1 三次握手</h2><ol><li>客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数 A。</li><li>服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK 的确认码应为 A+1，SYN/ACK 包本身又有一个随机序号 B。</li><li>最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号 A+1，而响应则为 B+1。</li></ol><h2 id="2-四次挥手"><a class="markdownIt-Anchor" href="#2-四次挥手"></a> 2 四次挥手</h2><p><em>注意: 中断连接端可以是客户端，也可以是服务器端. 下面仅以客户端断开连接举例, 反之亦然.</em></p><ol><li>客户端发送一个数据分段, 其中的 FIN 标记设置为1. 客户端进入 FIN-WAIT 状态. 该状态下客户端只接收数据, 不再发送数据.</li><li>服务器接收到带有 FIN = 1 的数据分段, 发送带有 ACK = 1 的剩余数据分段, 确认收到客户端发来的 FIN 信息.</li><li>服务器等到所有数据传输结束, 向客户端发送一个带有 FIN = 1 的数据分段, 并进入 CLOSE-WAIT 状态, 等待客户端发来带有 ACK = 1 的确认报文.</li><li>客户端收到服务器发来带有 FIN = 1 的报文, 返回 ACK = 1 的报文确认, 为了防止服务器端未收到需要重发, 进入 TIME-WAIT 状态. 服务器接收到报文后关闭连接. 客户端等待 2MSL 后未收到回复, 则认为服务器成功关闭, 客户端关闭连接.</li></ol><p>图解: <a href="http://blog.csdn.net/whuslei/article/details/6667471">http://blog.csdn.net/whuslei/article/details/6667471</a></p><h2 id="3-arp协议"><a class="markdownIt-Anchor" href="#3-arp协议"></a> 3 ARP协议</h2><p>地址解析协议(Address Resolution Protocol)，其基本功能为透过目标设备的IP地址，查询目标的MAC地址，以保证通信的顺利进行。它是IPv4网络层必不可少的协议，不过在IPv6中已不再适用，并被邻居发现协议（NDP）所替代。</p><h2 id="4-urllib和urllib2的区别"><a class="markdownIt-Anchor" href="#4-urllib和urllib2的区别"></a> 4 urllib和urllib2的区别</h2><p>这个面试官确实问过,当时答的urllib2可以Post而urllib不可以.</p><ol><li>urllib提供urlencode方法用来GET查询字符串的产生，而urllib2没有。这是为何urllib常和urllib2一起使用的原因。</li><li>urllib2可以接受一个Request类的实例来设置URL请求的headers，urllib仅可以接受URL。这意味着，你不可以伪装你的User Agent字符串等。</li></ol><h2 id="5-post和get"><a class="markdownIt-Anchor" href="#5-post和get"></a> 5 Post和Get</h2><p><a href="http://www.cnblogs.com/nankezhishi/archive/2012/06/09/getandpost.html">GET和POST有什么区别？及为什么网上的多数答案都是错的</a><br /><a href="https://www.zhihu.com/question/31640769?rf=37401322">知乎回答</a></p><p>get: <a href="http://tools.ietf.org/html/rfc2616#section-9.3">RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1</a><br />post: <a href="http://tools.ietf.org/html/rfc2616#section-9.5">RFC 2616 - Hypertext Transfer Protocol – HTTP/1.1</a></p><h2 id="6-cookie和session"><a class="markdownIt-Anchor" href="#6-cookie和session"></a> 6 Cookie和Session</h2><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">Cookie</th><th style="text-align:left">Session</th></tr></thead><tbody><tr><td style="text-align:left">储存位置</td><td style="text-align:left">客户端</td><td style="text-align:left">服务器端</td></tr><tr><td style="text-align:left">目的</td><td style="text-align:left">跟踪会话，也可以保存用户偏好设置或者保存用户名密码等</td><td style="text-align:left">跟踪会话</td></tr><tr><td style="text-align:left">安全性</td><td style="text-align:left">不安全</td><td style="text-align:left">安全</td></tr></tbody></table><p>session技术是要使用到cookie的，之所以出现session技术，主要是为了安全。</p><h2 id="7-apache和nginx的区别"><a class="markdownIt-Anchor" href="#7-apache和nginx的区别"></a> 7 apache和nginx的区别</h2><p>nginx 相对 apache 的优点：</p><ul><li>轻量级，同样起web 服务，比apache 占用更少的内存及资源</li><li>抗并发，nginx 处理请求是异步非阻塞的，支持更多的并发连接，而apache 则是阻塞型的，在高并发下nginx 能保持低资源低消耗高性能</li><li>配置简洁</li><li>高度模块化的设计，编写模块相对简单</li><li>社区活跃</li></ul><p>apache 相对nginx 的优点：</p><ul><li>rewrite ，比nginx 的rewrite 强大</li><li>模块超多，基本想到的都可以找到</li><li>少bug ，nginx 的bug 相对较多</li><li>超稳定</li></ul><h2 id="8-网站用户密码保存"><a class="markdownIt-Anchor" href="#8-网站用户密码保存"></a> 8 网站用户密码保存</h2><ol><li>明文保存</li><li>明文hash后保存,如md5</li><li>MD5+Salt方式,这个salt可以随机</li><li>知乎使用了Bcrypy(好像)加密</li></ol><h2 id="9-http和https"><a class="markdownIt-Anchor" href="#9-http和https"></a> 9 HTTP和HTTPS</h2><table><thead><tr><th style="text-align:left">状态码</th><th style="text-align:left">定义</th></tr></thead><tbody><tr><td style="text-align:left">1xx 报告</td><td style="text-align:left">接收到请求，继续进程</td></tr><tr><td style="text-align:left">2xx 成功</td><td style="text-align:left">步骤成功接收，被理解，并被接受</td></tr><tr><td style="text-align:left">3xx 重定向</td><td style="text-align:left">为了完成请求,必须采取进一步措施</td></tr><tr><td style="text-align:left">4xx 客户端出错</td><td style="text-align:left">请求包括错的顺序或不能完成</td></tr><tr><td style="text-align:left">5xx 服务器出错</td><td style="text-align:left">服务器无法完成显然有效的请求</td></tr></tbody></table><p>403: Forbidden<br />404: Not Found</p><p>HTTPS握手,对称加密,非对称加密,TLS/SSL,RSA</p><h2 id="10-xsrf和xss"><a class="markdownIt-Anchor" href="#10-xsrf和xss"></a> 10 XSRF和XSS</h2><ul><li>CSRF(Cross-site request forgery)跨站请求伪造</li><li>XSS(Cross Site Scripting)跨站脚本攻击</li></ul><p>CSRF重点在请求,XSS重点在脚本</p><h2 id="11-幂等-idempotence"><a class="markdownIt-Anchor" href="#11-幂等-idempotence"></a> 11 幂等 Idempotence</h2><p>HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的<strong>副作用</strong>。(注意是副作用)</p><p><code>GET http://www.bank.com/account/123456</code>，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。<code>GET http://www.news.com/latest-news</code>这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。</p><p>DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：<code>DELETE http://www.forum.com/article/4231</code>，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。</p><p>POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：<code>POST http://www.forum.com/articles</code>的语义是在<code>http://www.forum.com/articles</code>下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。</p><p>PUT所对应的URI是要创建或更新的资源本身。比如：<code>PUT http://www.forum/articles/4231</code>的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。</p><h2 id="12-restful架构soaprpc"><a class="markdownIt-Anchor" href="#12-restful架构soaprpc"></a> 12 RESTful架构(SOAP,RPC)</h2><p>推荐: <a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p><h2 id="13-soap"><a class="markdownIt-Anchor" href="#13-soap"></a> 13 SOAP</h2><p>SOAP（原为Simple Object Access Protocol的首字母缩写，即简单对象访问协议）是交换数据的一种协议规范，使用在计算机网络Web服务（web service）中，交换带结构信息。SOAP为了简化网页服务器（Web Server）从XML数据库中提取数据时，节省去格式化页面时间，以及不同应用程序之间按照HTTP通信协议，遵从XML格式执行资料互换，使其抽象于语言实现、平台和硬件。</p><h2 id="14-rpc"><a class="markdownIt-Anchor" href="#14-rpc"></a> 14 RPC</h2><p>RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。</p><p>总结:服务提供的两大流派.传统意义以方法调用为导向通称RPC。为了企业SOA,若干厂商联合推出webservice,制定了wsdl接口定义,传输soap.当互联网时代,臃肿SOA被简化为http+xml/json.但是简化出现各种混乱。以资源为导向,任何操作无非是对资源的增删改查，于是统一的REST出现了.</p><p>进化的顺序: RPC -&gt; SOAP -&gt; RESTful</p><h2 id="15-cgi和wsgi"><a class="markdownIt-Anchor" href="#15-cgi和wsgi"></a> 15 CGI和WSGI</h2><p>CGI是通用网关接口，是连接web服务器和应用程序的接口，用户通过CGI来获取动态数据或文件等。<br />CGI程序是一个独立的程序，它可以用几乎所有语言来写，包括perl，c，lua，python等等。</p><p>WSGI, Web Server Gateway Interface，是Python应用程序或框架和Web服务器之间的一种接口，WSGI的其中一个目的就是让用户可以用统一的语言(Python)编写前后端。</p><p>官方说明：<a href="https://www.python.org/dev/peps/pep-3333/">PEP-3333</a></p><h2 id="16-中间人攻击"><a class="markdownIt-Anchor" href="#16-中间人攻击"></a> 16 中间人攻击</h2><p>在GFW里屡见不鲜的,呵呵.</p><p>中间人攻击（Man-in-the-middle attack，通常缩写为MITM）是指攻击者与通讯的两端分别创建独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。</p><h2 id="17-c10k问题"><a class="markdownIt-Anchor" href="#17-c10k问题"></a> 17 c10k问题</h2><p>所谓c10k问题，指的是服务器同时支持成千上万个客户端的问题，也就是concurrent 10 000 connection（这也是c10k这个名字的由来）。<br />推荐: <a href="https://my.oschina.net/xianggao/blog/664275">https://my.oschina.net/xianggao/blog/664275</a></p><h2 id="18-socket"><a class="markdownIt-Anchor" href="#18-socket"></a> 18 socket</h2><p>推荐: <a href="http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml">http://www.360doc.com/content/11/0609/15/5482098_122692444.shtml</a></p><p>Socket=Ip address+ TCP/UDP + port</p><h2 id="19-浏览器缓存"><a class="markdownIt-Anchor" href="#19-浏览器缓存"></a> 19 浏览器缓存</h2><p>推荐: <a href="http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html">http://www.cnblogs.com/skynet/archive/2012/11/28/2792503.html</a></p><p>304 Not Modified</p><h2 id="20-http10和http11"><a class="markdownIt-Anchor" href="#20-http10和http11"></a> 20 HTTP1.0和HTTP1.1</h2><p>推荐: <a href="http://blog.csdn.net/elifefly/article/details/3964766">http://blog.csdn.net/elifefly/article/details/3964766</a></p><ol><li>请求头Host字段,一个服务器多个网站</li><li>长链接</li><li>文件断点续传</li><li>身份认证,状态管理,Cache缓存</li></ol><p>HTTP请求8种方法介绍<br />HTTP/1.1协议中共定义了8种HTTP请求方法，HTTP请求方法也被叫做“请求动作”，不同的方法规定了不同的操作指定的资源方式。服务端也会根据不同的请求方法做不同的响应。</p><p>GET</p><p>GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。</p><p>GET会方法请求指定的页面信息，并返回响应主体，GET被认为是不安全的方法，因为GET方法会被网络蜘蛛等任意的访问。</p><p>HEAD</p><p>HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。</p><p>POST</p><p>POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或/和修改现有资源。</p><p>PUT</p><p>PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。</p><p>DELETE</p><p>DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。</p><p>CONNECT</p><p>CONNECT方法是HTTP/1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接与非加密的HTTP代理服务器的通信。</p><p>OPTIONS</p><p>OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用’*’来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。 允许</p><p>TRACE</p><p>TRACE请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。</p><p>HTTP/1.1之后增加的方法</p><p>在HTTP/1.1标准制定之后，又陆续扩展了一些方法。其中使用中较多的是 PATCH 方法：</p><p>PATCH</p><p>PATCH方法出现的较晚，它在2010年的RFC 5789标准中被定义。PATCH请求与PUT请求类似，同样用于资源的更新。二者有以下两点不同：</p><p>但PATCH一般用于资源的部分更新，而PUT一般用于资源的整体更新。<br />当资源不存在时，PATCH会创建一个新的资源，而PUT只会对已在资源进行更新。</p><h2 id="21-ajax"><a class="markdownIt-Anchor" href="#21-ajax"></a> 21 Ajax</h2><p>AJAX,Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）, 是与在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术。</p><h1 id="nix"><a class="markdownIt-Anchor" href="#nix"></a> *NIX</h1><h2 id="unix进程间通信方式ipc"><a class="markdownIt-Anchor" href="#unix进程间通信方式ipc"></a> unix进程间通信方式(IPC)</h2><ol><li>管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。</li><li>命名管道（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。</li><li>信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。</li><li>消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺</li><li>共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。</li><li>内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。</li><li>信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。</li><li>套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。</li></ol><h1 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h1><h2 id="1-红黑树"><a class="markdownIt-Anchor" href="#1-红黑树"></a> 1 红黑树</h2><p>红黑树与AVL的比较：</p><p>AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；</p><p>红黑是用非严格的平衡来换取增删节点时候旋转次数的降低；</p><p>所以简单说，如果你的应用中，搜索的次数远远大于插入和删除，那么选择AVL，如果搜索，插入删除次数几乎差不多，应该选择RB。</p><p>红黑树详解: <a href="https://xieguanglei.github.io/blog/post/red-black-tree.html">https://xieguanglei.github.io/blog/post/red-black-tree.html</a></p><p>教你透彻了解红黑树: <a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md">https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md</a></p><h1 id="编程题"><a class="markdownIt-Anchor" href="#编程题"></a> 编程题</h1><h2 id="1-台阶问题斐波那契"><a class="markdownIt-Anchor" href="#1-台阶问题斐波那契"></a> 1 台阶问题/斐波那契</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fib = <span class="keyword">lambda</span> n: n <span class="keyword">if</span> n &lt;= <span class="number">2</span> <span class="keyword">else</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第二种记忆方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">memo</span>(<span class="params">func</span>):</span></span><br><span class="line">    cache = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrap</span>(<span class="params">*args</span>):</span></span><br><span class="line">        <span class="keyword">if</span> args <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">            cache[args] = func(*args)</span><br><span class="line">        <span class="keyword">return</span> cache[args]</span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@memo</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(i-<span class="number">1</span>) + fib(i-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第三种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h2 id="2-变态台阶问题"><a class="markdownIt-Anchor" href="#2-变态台阶问题"></a> 2 变态台阶问题</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fib = <span class="keyword">lambda</span> n: n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">2</span> * fib(n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="3-矩形覆盖"><a class="markdownIt-Anchor" href="#3-矩形覆盖"></a> 3 矩形覆盖</h2><p>我们可以用<code>2*1</code>的小矩形横着或者竖着去覆盖更大的矩形。请问用n个<code>2*1</code>的小矩形无重叠地覆盖一个<code>2*n</code>的大矩形，总共有多少种方法？</p><blockquote><p>第<code>2*n</code>个矩形的覆盖方法等于第<code>2*(n-1)</code>加上第<code>2*(n-2)</code>的方法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> n: <span class="number">1</span> <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="4-杨氏矩阵查找"><a class="markdownIt-Anchor" href="#4-杨氏矩阵查找"></a> 4 杨氏矩阵查找</h2><p>在一个m行n列二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>使用Step-wise线性搜索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span>(<span class="params">l, r, c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> l[r][c]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">l, x</span>):</span></span><br><span class="line">    m = <span class="built_in">len</span>(l) - <span class="number">1</span></span><br><span class="line">    n = <span class="built_in">len</span>(l[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    c = n</span><br><span class="line">    <span class="keyword">while</span> c &gt;= <span class="number">0</span> <span class="keyword">and</span> r &lt;= m:</span><br><span class="line">        value = get_value(l, r, c)</span><br><span class="line">        <span class="keyword">if</span> value == x:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> value &gt; x:</span><br><span class="line">            c = c - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> value &lt; x:</span><br><span class="line">            r = r + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="5-去除列表中的重复元素"><a class="markdownIt-Anchor" href="#5-去除列表中的重复元素"></a> 5 去除列表中的重复元素</h2><p>用集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">set</span>(l))</span><br></pre></td></tr></table></figure><p>用字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">l2 = &#123;&#125;.fromkeys(l1).keys()</span><br><span class="line"><span class="built_in">print</span> l2</span><br></pre></td></tr></table></figure><p>用字典并保持顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">l2 = <span class="built_in">list</span>(<span class="built_in">set</span>(l1))</span><br><span class="line">l2.sort(key=l1.index)</span><br><span class="line"><span class="built_in">print</span> l2</span><br></pre></td></tr></table></figure><p>列表推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">l2 = []</span><br><span class="line">[l2.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> l1 <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> l2]</span><br></pre></td></tr></table></figure><p>sorted排序并且用列表推导式.</p><p>l = [‘b’,‘c’,‘d’,‘b’,‘c’,‘a’,‘a’]<br />[single.append(i) for i in sorted(l) if i not in single]<br />print single</p><h2 id="6-链表成对调换"><a class="markdownIt-Anchor" href="#6-链表成对调换"></a> 6 链表成对调换</h2><p><code>1-&gt;2-&gt;3-&gt;4</code>转换成<code>2-&gt;1-&gt;4-&gt;3</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param a ListNode</span></span><br><span class="line">    <span class="comment"># @return a ListNode</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span>(<span class="params">self, head</span>):</span></span><br><span class="line">        <span class="keyword">if</span> head != <span class="literal">None</span> <span class="keyword">and</span> head.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">next</span> = head.<span class="built_in">next</span></span><br><span class="line">            head.<span class="built_in">next</span> = self.swapPairs(<span class="built_in">next</span>.<span class="built_in">next</span>)</span><br><span class="line">            <span class="built_in">next</span>.<span class="built_in">next</span> = head</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h2 id="7-创建字典的方法"><a class="markdownIt-Anchor" href="#7-创建字典的方法"></a> 7 创建字典的方法</h2><h3 id="1-直接创建"><a class="markdownIt-Anchor" href="#1-直接创建"></a> 1 直接创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;earth&#x27;</span>, <span class="string">&#x27;port&#x27;</span>:<span class="string">&#x27;80&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="2-工厂方法"><a class="markdownIt-Anchor" href="#2-工厂方法"></a> 2 工厂方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">items=[(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;earth&#x27;</span>),(<span class="string">&#x27;port&#x27;</span>,<span class="string">&#x27;80&#x27;</span>)]</span><br><span class="line">dict2=<span class="built_in">dict</span>(items)</span><br><span class="line">dict1=<span class="built_in">dict</span>(([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;earth&#x27;</span>],[<span class="string">&#x27;port&#x27;</span>,<span class="string">&#x27;80&#x27;</span>]))</span><br></pre></td></tr></table></figure><h3 id="3-fromkeys方法"><a class="markdownIt-Anchor" href="#3-fromkeys方法"></a> 3 fromkeys()方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;&#125;.fromkeys((<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>),-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="string">&#x27;x&#x27;</span>:-<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:-<span class="number">1</span>&#125;</span><br><span class="line">dict2=&#123;&#125;.fromkeys((<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>))</span><br><span class="line">dict2=&#123;<span class="string">&#x27;x&#x27;</span>:<span class="literal">None</span>, <span class="string">&#x27;y&#x27;</span>:<span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="8-合并两个有序列表"><a class="markdownIt-Anchor" href="#8-合并两个有序列表"></a> 8 合并两个有序列表</h2><p>知乎远程面试要求编程</p><blockquote><p>尾递归</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_recursion_merge_sort2</span>(<span class="params">l1, l2, tmp</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l1) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(l2) == <span class="number">0</span>:</span><br><span class="line">        tmp.extend(l1)</span><br><span class="line">        tmp.extend(l2)</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> l1[<span class="number">0</span>] &lt; l2[<span class="number">0</span>]:</span><br><span class="line">            tmp.append(l1[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> l1[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(l2[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> l2[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> _recursion_merge_sort2(l1, l2, tmp)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursion_merge_sort2</span>(<span class="params">l1, l2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> _recursion_merge_sort2(l1, l2, [])</span><br></pre></td></tr></table></figure><blockquote><p>循环算法</p></blockquote><p>思路：</p><p>定义一个新的空列表</p><p>比较两个列表的首个元素</p><p>小的就插入到新列表里</p><p>把已经插入新列表的元素从旧列表删除</p><p>直到两个旧列表有一个为空</p><p>再把旧列表加到新列表后面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def loop_merge_sort(l1, l2):</span><br><span class="line">    tmp &#x3D; []</span><br><span class="line">    while len(l1) &gt; 0 and len(l2) &gt; 0:</span><br><span class="line">        if l1[0] &lt; l2[0]:</span><br><span class="line">            tmp.append(l1[0])</span><br><span class="line">            del l1[0]</span><br><span class="line">        else:</span><br><span class="line">            tmp.append(l2[0])</span><br><span class="line">            del l2[0]</span><br><span class="line">    tmp.extend(l1)</span><br><span class="line">    tmp.extend(l2)</span><br><span class="line">    return tmp</span><br></pre></td></tr></table></figure><blockquote><p>pop弹出</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">b = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sortedlist</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">while</span> a <span class="keyword">and</span> b:</span><br><span class="line">        <span class="keyword">if</span> a[<span class="number">0</span>] &gt;= b[<span class="number">0</span>]:</span><br><span class="line">            c.append(b.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c.append(a.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        c.append(a.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        c.append(b.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="built_in">print</span> merge_sortedlist(a,b)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-交叉链表求交点"><a class="markdownIt-Anchor" href="#9-交叉链表求交点"></a> 9 交叉链表求交点</h2><blockquote><p>其实思想可以按照从尾开始比较两个链表，如果相交，则从尾开始必然一致，只要从尾开始比较，直至不一致的地方即为交叉点，如图所示</p></blockquote><p><img src="http://hi.csdn.net/attachment/201106/28/0_1309244136MWLP.gif" alt="" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用a,b两个list来模拟链表，可以看出交叉点是 7这个节点</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">min</span>(<span class="built_in">len</span>(a),<span class="built_in">len</span>(b))):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">1</span> <span class="keyword">and</span> (a[-<span class="number">1</span>] != b[-<span class="number">1</span>]):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;No&quot;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a[-i] != b[-i]:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;交叉节点：&quot;</span>,a[-i+<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>另外一种比较正规的方法，构造链表类</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">node</span>(<span class="params">l1, l2</span>):</span></span><br><span class="line">    length1, lenth2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 求两个链表长度</span></span><br><span class="line">    <span class="keyword">while</span> l1.<span class="built_in">next</span>:</span><br><span class="line">        l1 = l1.<span class="built_in">next</span></span><br><span class="line">        length1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l2.<span class="built_in">next</span>:</span><br><span class="line">        l2 = l2.<span class="built_in">next</span></span><br><span class="line">        length2 += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 长的链表先走</span></span><br><span class="line">    <span class="keyword">if</span> length1 &gt; lenth2:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length1 - length2):</span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length2 - length1):</span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">        <span class="keyword">if</span> l1.<span class="built_in">next</span> == l2.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> l1.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l1 = l1.<span class="built_in">next</span></span><br><span class="line">            l2 = l2.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>修改了一下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">node</span>(<span class="params">l1, l2</span>):</span></span><br><span class="line">    length1, length2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 求两个链表长度</span></span><br><span class="line">    <span class="keyword">while</span> l1.<span class="built_in">next</span>:</span><br><span class="line">        l1 = l1.<span class="built_in">next</span><span class="comment">#尾节点</span></span><br><span class="line">        length1 += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l2.<span class="built_in">next</span>:</span><br><span class="line">        l2 = l2.<span class="built_in">next</span><span class="comment">#尾节点</span></span><br><span class="line">        length2 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果相交</span></span><br><span class="line">    <span class="keyword">if</span> l1.<span class="built_in">next</span> == l2.<span class="built_in">next</span>:</span><br><span class="line">        <span class="comment"># 长的链表先走</span></span><br><span class="line">        <span class="keyword">if</span> length1 &gt; length2:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length1 - length2):</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> l1<span class="comment">#返回交点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length2 - length1):</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span> l2<span class="comment">#返回交点</span></span><br><span class="line">    <span class="comment"># 如果不相交</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>思路: <a href="http://humaoli.blog.163.com/blog/static/13346651820141125102125995/">http://humaoli.blog.163.com/blog/static/13346651820141125102125995/</a></p><h2 id="10-二分查找"><a class="markdownIt-Anchor" href="#10-二分查找"></a> 10 二分查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params"><span class="built_in">list</span>, item</span>):</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="built_in">len</span>(<span class="built_in">list</span>) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (high - low) / <span class="number">2</span> + low    <span class="comment"># 避免(high + low) / 2溢出</span></span><br><span class="line">        guess = <span class="built_in">list</span>[mid]</span><br><span class="line">        <span class="keyword">if</span> guess &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> guess &lt; item:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">mylist = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span> binary_search(mylist, <span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考: <a href="http://blog.csdn.net/u013205877/article/details/76411718">http://blog.csdn.net/u013205877/article/details/76411718</a></p><h2 id="11-快排"><a class="markdownIt-Anchor" href="#11-快排"></a> 11 快排</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span>(<span class="params"><span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">list</span>)&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        midpivot = <span class="built_in">list</span>[<span class="number">0</span>]</span><br><span class="line">        lessbeforemidpivot = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>[<span class="number">1</span>:] <span class="keyword">if</span> i&lt;=midpivot]</span><br><span class="line">        biggerafterpivot = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>[<span class="number">1</span>:] <span class="keyword">if</span> i &gt; midpivot]</span><br><span class="line">        finallylist = quicksort(lessbeforemidpivot)+[midpivot]+quicksort(biggerafterpivot)</span><br><span class="line">        <span class="keyword">return</span> finallylist</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> quicksort([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><blockquote><p>更多排序问题可见：<a href="http://blog.csdn.net/mrlevo520/article/details/77829204">数据结构与算法-排序篇-Python描述</a></p></blockquote><h2 id="12-找零问题"><a class="markdownIt-Anchor" href="#12-找零问题"></a> 12 找零问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#values是硬币的面值values = [ 25, 21, 10, 5, 1]</span></span><br><span class="line"><span class="comment">#valuesCounts   钱币对应的种类数</span></span><br><span class="line"><span class="comment">#money  找出来的总钱数</span></span><br><span class="line"><span class="comment">#coinsUsed   对应于目前钱币总数i所使用的硬币数目</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coinChange</span>(<span class="params">values,valuesCounts,money,coinsUsed</span>):</span></span><br><span class="line">    <span class="comment">#遍历出从1到money所有的钱数可能</span></span><br><span class="line">    <span class="keyword">for</span> cents <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,money+<span class="number">1</span>):</span><br><span class="line">        minCoins = cents</span><br><span class="line">        <span class="comment">#把所有的硬币面值遍历出来和钱数做对比</span></span><br><span class="line">        <span class="keyword">for</span> kind <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,valuesCounts):</span><br><span class="line">            <span class="keyword">if</span> (values[kind] &lt;= cents):</span><br><span class="line">                temp = coinsUsed[cents - values[kind]] +<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> (temp &lt; minCoins):</span><br><span class="line">                    minCoins = temp</span><br><span class="line">        coinsUsed[cents] = minCoins</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;面值:&#123;0&#125;的最少硬币使用数为:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(cents, coinsUsed[cents]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思路: <a href="http://blog.csdn.net/wdxin1322/article/details/9501163">http://blog.csdn.net/wdxin1322/article/details/9501163</a></p><p>方法: <a href="http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html">http://www.cnblogs.com/ChenxofHit/archive/2011/03/18/1988431.html</a></p><h2 id="13-广度遍历和深度遍历二叉树"><a class="markdownIt-Anchor" href="#13-广度遍历和深度遍历二叉树"></a> 13 广度遍历和深度遍历二叉树</h2><p>给定一个数组，构建二叉树，并且按层次打印这个二叉树</p><h2 id="14-二叉树节点"><a class="markdownIt-Anchor" href="#14-二叉树节点"></a> 14 二叉树节点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data, left=<span class="literal">None</span>, right=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line">tree = Node(<span class="number">1</span>, Node(<span class="number">3</span>, Node(<span class="number">7</span>, Node(<span class="number">0</span>)), Node(<span class="number">6</span>)), Node(<span class="number">2</span>, Node(<span class="number">5</span>), Node(<span class="number">4</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="15-层次遍历"><a class="markdownIt-Anchor" href="#15-层次遍历"></a> 15 层次遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookup</span>(<span class="params">root</span>):</span></span><br><span class="line">    row = [root]</span><br><span class="line">    <span class="keyword">while</span> row:</span><br><span class="line">        print(row)</span><br><span class="line">        row = [kid <span class="keyword">for</span> item <span class="keyword">in</span> row <span class="keyword">for</span> kid <span class="keyword">in</span> (item.left, item.right) <span class="keyword">if</span> kid]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="16-深度遍历"><a class="markdownIt-Anchor" href="#16-深度遍历"></a> 16 深度遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deep</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span> root.data</span><br><span class="line">    deep(root.left)</span><br><span class="line">    deep(root.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lookup(tree)</span><br><span class="line">    deep(tree)</span><br></pre></td></tr></table></figure><h2 id="17-前中后序遍历"><a class="markdownIt-Anchor" href="#17-前中后序遍历"></a> 17 前中后序遍历</h2><p>深度遍历改变顺序就OK了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#二叉树的遍历</span></span><br><span class="line"><span class="comment">#简单的二叉树节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,value,left,right</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line"></span><br><span class="line"><span class="comment">#中序遍历:遍历左子树,访问当前节点,遍历右子树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mid_travelsal</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        mid_travelsal(root.left)</span><br><span class="line">    <span class="comment">#访问当前节点</span></span><br><span class="line">    print(root.value)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        mid_travelsal(root.right)</span><br><span class="line"></span><br><span class="line"><span class="comment">#前序遍历:访问当前节点,遍历左子树,遍历右子树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_travelsal</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="built_in">print</span> (root.value)</span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        pre_travelsal(root.left)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        pre_travelsal(root.right)</span><br><span class="line"></span><br><span class="line"><span class="comment">#后续遍历:遍历左子树,遍历右子树,访问当前节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_trvelsal</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        post_trvelsal(root.left)</span><br><span class="line">    <span class="keyword">if</span> root.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        post_trvelsal(root.right)</span><br><span class="line">    <span class="built_in">print</span> (root.value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="18-求最大树深"><a class="markdownIt-Anchor" href="#18-求最大树深"></a> 18 求最大树深</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span>(<span class="params">root</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="19-求两棵树是否相同"><a class="markdownIt-Anchor" href="#19-求两棵树是否相同"></a> 19 求两棵树是否相同</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span>(<span class="params">p, q</span>):</span></span><br><span class="line">    <span class="keyword">if</span> p == <span class="literal">None</span> <span class="keyword">and</span> q == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> p <span class="keyword">and</span> q :</span><br><span class="line">        <span class="keyword">return</span> p.val == q.val <span class="keyword">and</span> isSameTree(p.left,q.left) <span class="keyword">and</span> isSameTree(p.right,q.right)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="20-前序中序求后序"><a class="markdownIt-Anchor" href="#20-前序中序求后序"></a> 20 前序中序求后序</h2><p>推荐: <a href="http://blog.csdn.net/hinyunsin/article/details/6315502">http://blog.csdn.net/hinyunsin/article/details/6315502</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rebuild</span>(<span class="params">pre, center</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    cur = Node(pre[<span class="number">0</span>])</span><br><span class="line">    index = center.index(pre[<span class="number">0</span>])</span><br><span class="line">    cur.left = rebuild(pre[<span class="number">1</span>:index + <span class="number">1</span>], center[:index])</span><br><span class="line">    cur.right = rebuild(pre[index + <span class="number">1</span>:], center[index + <span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deep</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    deep(root.left)</span><br><span class="line">    deep(root.right)</span><br><span class="line">    <span class="built_in">print</span> root.data</span><br></pre></td></tr></table></figure><h2 id="21-单链表逆置"><a class="markdownIt-Anchor" href="#21-单链表逆置"></a> 21 单链表逆置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">link = Node(<span class="number">1</span>, Node(<span class="number">2</span>, Node(<span class="number">3</span>, Node(<span class="number">4</span>, Node(<span class="number">5</span>, Node(<span class="number">6</span>, Node(<span class="number">7</span>, Node(<span class="number">8</span>, Node(<span class="number">9</span>)))))))))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rev</span>(<span class="params">link</span>):</span></span><br><span class="line">    pre = link</span><br><span class="line">    cur = link.<span class="built_in">next</span></span><br><span class="line">    pre.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        tmp = cur.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span> = pre</span><br><span class="line">        pre = cur</span><br><span class="line">        cur = tmp</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line"></span><br><span class="line">root = rev(link)</span><br><span class="line"><span class="keyword">while</span> root:</span><br><span class="line">    <span class="built_in">print</span> root.data</span><br><span class="line">    root = root.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>思路: <a href="http://blog.csdn.net/feliciafay/article/details/6841115">http://blog.csdn.net/feliciafay/article/details/6841115</a></p><p>方法: <a href="http://www.xuebuyuan.com/2066385.html?mobile=1">http://www.xuebuyuan.com/2066385.html?mobile=1</a></p><h2 id="22-两个字符串是否是变位词"><a class="markdownIt-Anchor" href="#22-两个字符串是否是变位词"></a> 22 两个字符串是否是变位词</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Anagram</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    @:param s1: The first string</span></span><br><span class="line"><span class="string">    @:param s2: The second string</span></span><br><span class="line"><span class="string">    @:return true or false</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Solution1</span>(<span class="params">s1,s2</span>):</span></span><br><span class="line">        alist = <span class="built_in">list</span>(s2)</span><br><span class="line"></span><br><span class="line">        pos1 = <span class="number">0</span></span><br><span class="line">        stillOK = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pos1 &lt; <span class="built_in">len</span>(s1) <span class="keyword">and</span> stillOK:</span><br><span class="line">            pos2 = <span class="number">0</span></span><br><span class="line">            found = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">while</span> pos2 &lt; <span class="built_in">len</span>(alist) <span class="keyword">and</span> <span class="keyword">not</span> found:</span><br><span class="line">                <span class="keyword">if</span> s1[pos1] == alist[pos2]:</span><br><span class="line">                    found = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pos2 = pos2 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> found:</span><br><span class="line">                alist[pos2] = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stillOK = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            pos1 = pos1 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stillOK</span><br><span class="line"></span><br><span class="line">    print(Solution1(<span class="string">&#x27;abcd&#x27;</span>,<span class="string">&#x27;dcba&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Solution2</span>(<span class="params">s1,s2</span>):</span></span><br><span class="line">        alist1 = <span class="built_in">list</span>(s1)</span><br><span class="line">        alist2 = <span class="built_in">list</span>(s2)</span><br><span class="line"></span><br><span class="line">        alist1.sort()</span><br><span class="line">        alist2.sort()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        matches = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pos &lt; <span class="built_in">len</span>(s1) <span class="keyword">and</span> matches:</span><br><span class="line">            <span class="keyword">if</span> alist1[pos] == alist2[pos]:</span><br><span class="line">                pos = pos + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                matches = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matches</span><br><span class="line"></span><br><span class="line">    print(Solution2(<span class="string">&#x27;abcde&#x27;</span>,<span class="string">&#x27;edcbg&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Solution3</span>(<span class="params">s1,s2</span>):</span></span><br><span class="line">        c1 = [<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line">        c2 = [<span class="number">0</span>]*<span class="number">26</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s1)):</span><br><span class="line">            pos = <span class="built_in">ord</span>(s1[i])-<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            c1[pos] = c1[pos] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">            pos = <span class="built_in">ord</span>(s2[i])-<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            c2[pos] = c2[pos] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        stillOK = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">while</span> j&lt;<span class="number">26</span> <span class="keyword">and</span> stillOK:</span><br><span class="line">            <span class="keyword">if</span> c1[j] == c2[j]:</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stillOK = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stillOK</span><br><span class="line"></span><br><span class="line">    print(Solution3(<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;pleap&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="23-动态规划问题"><a class="markdownIt-Anchor" href="#23-动态规划问题"></a> 23 动态规划问题</h2><blockquote><p>可参考：<a href="http://blog.csdn.net/mrlevo520/article/details/75676160">动态规划(DP)的整理-Python描述</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转自：&lt;a href=&quot;https://github.com/taizilongxu/interview_python&quot;&gt;https://github.com/taizilongxu/interview_python&lt;/a&gt;&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用其他命令</title>
    <link href="http://example.com/2021/01/18/linux%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/[Linux]%20%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E6%B1%87%E6%80%BB%EF%BC%89/"/>
    <id>http://example.com/2021/01/18/linux%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/[Linux]%20%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E6%B1%87%E6%80%BB%EF%BC%89/</id>
    <published>2021-01-18T15:09:16.994Z</published>
    <updated>2021-01-18T15:10:17.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看系统信息"><a class="markdownIt-Anchor" href="#查看系统信息"></a> 查看系统信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看系统版本信息</span></span><br><span class="line">    cat /etc/redhat-release </span><br><span class="line">    CentOS Linux release 7.4.1708 (Core) </span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">查看内核版本号</span></span><br><span class="line">    uname -r</span><br><span class="line">    3.10.0-693.el7.x86_64</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统多少位</span></span><br><span class="line">    uname -m</span><br><span class="line">    x86_64</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash">查看内核所有信息</span></span><br><span class="line">    uname -a</span><br></pre></td></tr></table></figure><h2 id="网卡配置文件详解"><a class="markdownIt-Anchor" href="#网卡配置文件详解"></a> 网卡配置文件详解</h2><p>如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">网络配置文件：</span><br><span class="line">/etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">网络接口配置文件：</span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-INTERFACE_NAME</span><br><span class="line">DEVICE=: 关联的设备名称，要与文件名的后半部“INTERFACE_NAME”保持一致; </span><br><span class="line">BOOTPROTO=&#123;static|none|dhcp|bootp&#125;: 引导协议；要使用静态地址，使用static或none；dhcp表示使用DHCP服务器获取地址；</span><br><span class="line">IPADDR=: IP地址</span><br><span class="line">NETMASK=：子网掩码</span><br><span class="line">GATEWAY=：设定默认网关；</span><br><span class="line">ONBOOT=：开机时是否自动激活此网络接口；</span><br><span class="line">HWADDR=： 硬件地址，要与硬件中的地址保持一致；可省；</span><br><span class="line">USERCTL=&#123;yes|no&#125;: 是否允许普通用户控制此接口；</span><br><span class="line">PEERDNS=&#123;yes|no&#125;: 是否在BOOTPROTO为dhcp时接受由DHCP服务器指定的DNS地址；</span><br></pre></td></tr></table></figure><h3 id="ifconfig命令"><a class="markdownIt-Anchor" href="#ifconfig命令"></a> ifconfig命令</h3><p>ifconfig 查看网卡的ip地址</p><p><img src="https://images2018.cnblogs.com/blog/1132884/201807/1132884-20180723170115394-866303539.png" alt="img" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接输入ifconfig会列出已经启动的网卡，也可以输入ifconfig eth0单独显示eth0的信息</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 各选项解释是：</span></span><br><span class="line">eth0        网卡的代号 </span><br><span class="line">lo          回环地址loopback</span><br><span class="line">inet        IPv4的Ip地址</span><br><span class="line">netmask     子网掩码</span><br><span class="line">broadcast   广播地址</span><br><span class="line">RX/TX       流量发/收情况   tx是发送（transport），rx是接收(receive)</span><br><span class="line">packets     数据包数</span><br><span class="line">errors      数据包错误数</span><br><span class="line">dropped     数据包有问题被丢弃的数量</span><br><span class="line">collisions    数据包碰撞情况，数值太多代表网络状况差</span><br></pre></td></tr></table></figure><h3 id="ip命令"><a class="markdownIt-Anchor" href="#ip命令"></a> ip命令</h3><p>ip是一个命令，不是TCP/IP那个ip，这个ip命令是结合了ifconfig和route两个命令的功能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr show #查看ip信息</span><br></pre></td></tr></table></figure><h2 id="用户管理与文件权限篇"><a class="markdownIt-Anchor" href="#用户管理与文件权限篇"></a> 用户管理与文件权限篇</h2><p><strong>用户等级划分</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在Linux系统中，用户也有自己的UID身份账号且唯一</span><br><span class="line">系统管理员 UID为0 </span><br><span class="line">root：默认在Unix/linux操作系统中拥有最高的管理权限。</span><br><span class="line"></span><br><span class="line">系统用户 UID为1~999    Linux安装的服务程序都会创建独有的用户负责运行。</span><br><span class="line"></span><br><span class="line">普通用户 UID从1000开始：由管理员创建</span><br><span class="line">权限：只读，不能增、删、改、查</span><br></pre></td></tr></table></figure><p><strong>用户组GID</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">为了方便管理属于同一组的用户，Linux 系统中还引入了用户组的概念。</span><br><span class="line">通过使用用 户组号码(GID，Group IDentification)，我们可以把多个用户加入到同一个组中，从而方 便为组中的用户统一规划权限或指定任务。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：Linux管理员在创建用户时，将自动创建一个与其同名的用户组，这个用户组只有该用户一个人</span></span><br></pre></td></tr></table></figure><h3 id="创建普通用户"><a class="markdownIt-Anchor" href="#创建普通用户"></a> 创建普通用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加用户</span></span><br><span class="line">useradd oldboy </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置密码</span>       </span><br><span class="line">passwd redhat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：root用户可以修改其他所有人的密码，且不需要验证</span></span><br></pre></td></tr></table></figure><h3 id="切换用户"><a class="markdownIt-Anchor" href="#切换用户"></a> 切换用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> su命令可以切换用户身份的需求，</span></span><br><span class="line">su - username</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注：su命令中间的-号很重要，意味着完全切换到新的用户，即环境变量信息也变更为新用户的信息</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">先看下当前用户（我是谁）</span></span><br><span class="line">whoami</span><br><span class="line"><span class="meta">#</span><span class="bash">切换用户</span></span><br><span class="line">su - oldboy</span><br><span class="line"><span class="meta">#</span><span class="bash">退出用户登录</span></span><br><span class="line">logout</span><br><span class="line">ctrl + d</span><br></pre></td></tr></table></figure><ul><li>一般情况下，<strong>在生产环境避免直接用root用户，除非有特殊系统维护需求，使用完立刻退回普通用户</strong></li><li>非交互式设置密码(<code>echo &quot;redhat&quot;|passwd --stdin oldboy &amp;&amp; history -c</code>)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Tip:</span><br><span class="line">1.超级用户root切换普通用户无需密码,例如“群主”想踢谁就踢谁</span><br><span class="line">2.普通用户切换root，需要输入密码</span><br><span class="line">3.普通用户权限较小，只能基本查看信息</span><br><span class="line">4.$符号是普通用户命令提示符，#是超级管理员的提示符</span><br><span class="line"></span><br><span class="line">root是当前用户，oldboyedu是主机名，~代表当前路径，也是家目录</span><br></pre></td></tr></table></figure><p><strong><code>groupadd</code>命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group命令用于创建用户组，为了更加高效的指派系统中各个用户的权限，在工作中常常添加几个用户到一个组里面，这样可以针对一类用户安排权限。例如超哥以前在公司里，就负责添加openLDAP用户管理，偶尔台湾，美国的同事去上海协作，我就得给他们添加到it部门组里面，以至于他们有对服务器操作的权限。groupadd it_dep</span><br></pre></td></tr></table></figure><h3 id="userdel删除用户"><a class="markdownIt-Anchor" href="#userdel删除用户"></a> <code>userdel</code>删除用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f     强制删除用户</span><br><span class="line">-r    同事删除用户以及家目录</span><br><span class="line">userdel -r pyyu </span><br></pre></td></tr></table></figure><h3 id="sudo命令"><a class="markdownIt-Anchor" href="#sudo命令"></a> sudo命令</h3><p><strong>sudo命令</strong>用来以其他身份来执行命令，预设的身份为root。在<code>/etc/sudoers</code>中设置了可执行sudo指令的用户。若其未经授权的用户企图使用sudo，则会发出警告的邮件给管理员。用户使用sudo时，必须先输入密码，之后有5分钟的有效期限，超过期限则必须重新输入密码。</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo 【选项】【参数】</span><br><span class="line">-b：在后台执行指令；</span><br><span class="line">-h：显示帮助；</span><br><span class="line">-H：将HOME环境变量设为新身份的HOME环境变量；</span><br><span class="line">-k：结束密码的有效期限，也就是下次再执行sudo时便需要输入密码；。</span><br><span class="line">-l：列出目前用户可执行与无法执行的指令；</span><br><span class="line">-p：改变询问密码的提示符号；</span><br><span class="line">-s&lt;shell&gt;：执行指定的shell；</span><br><span class="line">-u&lt;用户&gt;：以指定的用户作为新的身份。若不加上此参数，则预设以root作为新的身份；</span><br><span class="line">-v：延长密码有效期限5分钟；</span><br><span class="line">-V ：显示版本信息。</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong>：权限不够<img src="https://images2018.cnblogs.com/blog/1132884/201807/1132884-20180727104201611-1737188153.png" alt="img" /></p><p>sudo ls /root 以root身份去运行 <img src="https://images2018.cnblogs.com/blog/1132884/201807/1132884-20180727104354250-942493622.png" alt="img" /></p><p>这是由于配置sudo必须编辑<code>/etc/sudoers</code>文件，并且只有root才能修改，咱们可以通过<code>visudo</code>命令直接编辑<code>sudoers</code>文件，使用这个命令还可以检查语法，比直接编辑 <code>vim /etc/sudoers</code>更安全</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">visudo 编辑sudoers文件</span><br><span class="line"></span><br><span class="line">写入</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">chaoge  ALL=(ALL)       ALL   #允许chaoge在任何地方，执行任何命令</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">此时切换chaoge用户</span><br><span class="line"><span class="meta">#</span><span class="bash"> su命令用于切换当前用户身份到其他用户身份，变更时须输入所要变更的用户帐号与密码。</span></span><br><span class="line">su - chaoge</span><br><span class="line"></span><br><span class="line">已经可以使用sudo ls /root 命令</span><br></pre></td></tr></table></figure><h2 id="软连接"><a class="markdownIt-Anchor" href="#软连接"></a> 软连接</h2><p>软连接也叫做符号链接，类似于<code>windows</code>的快捷方式。</p><p>常用于安装软件的快捷方式配置，如<code>python</code>，<code>nginx</code>等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ln -s 目标文件  软连接名</span><br><span class="line"></span><br><span class="line">1.存在文件/tmp/test.txt</span><br><span class="line">    [root@master tmp]# ls -l</span><br><span class="line">    -rw-r--r-- 1 root root     10 10月 15 21:23 test.txt</span><br><span class="line"></span><br><span class="line">2.在/home目录中建立软连接，指向/tmp/test.txt文件</span><br><span class="line">ln -s /tmp/test.txt my_test</span><br><span class="line"></span><br><span class="line">3.查看软连接信息</span><br><span class="line">    lrwxrwxrwx 1 root root 13 10月 15 21:35 my_test -&gt; /tmp/test.txt</span><br><span class="line"></span><br><span class="line">4.通过软连接查看文件</span><br><span class="line">    cat my_test</span><br><span class="line"></span><br><span class="line">my_test只是/tmp/test.txt的一个别名，因此删除my_test不会影响/tmp/test.txt，但是删除了本尊，快捷方式就无意义不存在了</span><br></pre></td></tr></table></figure><p>PS1变量</p><p>Linux命令提示符由PS1环境变量控制</p><p><img src="https://images2018.cnblogs.com/blog/1132884/201807/1132884-20180723175136183-187264256.png" alt="img" /></p><h2 id="-code16-"><a class="markdownIt-Anchor" href="#-code16-"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy_python ~]# echo $PS1</span><br><span class="line">[\u@\h \W]\$可以自行调整全局变量/etc/profile文件用于永久生效 PS1=&#x27;[\u@\h \W\t]\$&#x27;</span><br><span class="line">\d　　日期</span><br><span class="line">\H　　完整主机名</span><br><span class="line">\h　　主机名第一个名字</span><br><span class="line">\t　　时间24小时制HHMMSS</span><br><span class="line">\T　　时间12小时制</span><br><span class="line">\A　　时间24小时制HHMM</span><br><span class="line">\u　　当前用户账号名</span><br><span class="line">\v　　BASH的版本</span><br><span class="line">\w　　完整工作目录</span><br><span class="line">\W　　利用basename取得工作目录名</span><br><span class="line">\#　　下达的第几个命令</span><br><span class="line">\$　　提示字符，root为 #，普通用户为$</span><br><span class="line">PS1 &gt; 变量名</span><br><span class="line"><span class="meta">$</span><span class="bash">PS1 &gt; 查看变量内容</span></span><br><span class="line">PS1=新内容 重新赋值</span><br><span class="line"></span><br><span class="line">变量赋值，查看</span><br><span class="line">name=&#x27;chaoge&#x27;</span><br><span class="line">echo $name</span><br><span class="line"></span><br><span class="line">PS1显示ip地址</span><br><span class="line">export PS1=&quot;[\u@\h `/sbin/ifconfig ens33 | sed -nr &#x27;s/.*inet (addr:)?(([0-9]*\.)&#123;3&#125;[0-9]*).*/\2/p&#x27;` \w]\$&quot;</span><br></pre></td></tr></table></figure></h2><h3 id="tar解压命令"><a class="markdownIt-Anchor" href="#tar解压命令"></a> tar解压命令</h3><p>人们发明了各种各样的包，无论是双肩包，或者是装在口袋，都是为了让“文件”更方便携带。linux 的文件打包工具最出名的是tar。</p><p><img src="https://img2018.cnblogs.com/blog/1132884/201903/1132884-20190322192003432-1512149003.png" alt="img" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar 命令：用来压缩和解压文件。tar本身不具有压缩功能。他是调用压缩功能实现的</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">tar(选项)(参数)</span><br><span class="line">-A或--catenate：新增文件到以存在的备份文件；</span><br><span class="line">-B：设置区块大小；</span><br><span class="line">-c或--create：建立新的备份文件；</span><br><span class="line">-C &lt;目录&gt;：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。</span><br><span class="line">-d：记录文件的差别；</span><br><span class="line">-x或--extract或--get：从备份文件中还原文件；</span><br><span class="line">-t或--list：列出备份文件的内容；</span><br><span class="line">-z或--gzip或--ungzip：通过gzip指令处理备份文件；</span><br><span class="line">-Z或--compress或--uncompress：通过compress指令处理备份文件；</span><br><span class="line">-f&lt;备份文件&gt;或--file=&lt;备份文件&gt;：指定备份文件；</span><br><span class="line">-v或--verbose：显示指令执行过程；</span><br><span class="line">-r：添加文件到已经压缩的文件；</span><br><span class="line">-u：添加改变了和现有的文件到已经存在的压缩文件；</span><br><span class="line">-j：支持bzip2解压文件；</span><br><span class="line">-v：显示操作过程；</span><br><span class="line">-l：文件系统边界设置；</span><br><span class="line">-k：保留原有文件不覆盖；</span><br><span class="line">-m：保留文件不被覆盖；</span><br><span class="line">-w：确认压缩文件的正确性；</span><br><span class="line">-p或--same-permissions：用原来的文件权限还原文件；</span><br><span class="line">-P或--absolute-names：文件名使用绝对名称，不移除文件名称前的“/”号；</span><br><span class="line">-N &lt;日期格式&gt; 或 --newer=&lt;日期时间&gt;：只将较指定日期更新的文件保存到备份文件里；</span><br><span class="line">--exclude=&lt;范本样式&gt;：排除符合范本样式的文件。</span><br></pre></td></tr></table></figure><p>实例</p><p><img src="https://img2018.cnblogs.com/blog/1132884/201903/1132884-20190322193241069-23651309.png" alt="img" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Python-3.7.0b3.tgz #解压</span><br><span class="line"></span><br><span class="line">tar -czvf oldboy.txt.tar.gz oldboy.txt #压缩oldboy.txt  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上述命令等于 以下两条命令</span></span><br><span class="line">tar -cvf oldboy.tar oldboy.txt</span><br><span class="line">gzip oldboy.tar</span><br><span class="line"></span><br><span class="line">tar -cf all_pic.tar *.jpg #压缩当前目录所有jpg结尾的文件</span><br><span class="line"></span><br><span class="line">tar -xjf xx.tar.bz2　　#解压缩bz2结尾的文件</span><br></pre></td></tr></table></figure><h3 id="gzip命令"><a class="markdownIt-Anchor" href="#gzip命令"></a> gzip命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip用来压缩文件，是个使用广泛的压缩程序，被压缩的以&quot;.gz&quot;扩展名</span><br><span class="line">gzip可以压缩较大的文件，以60%~70%压缩率来节省磁盘空间</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-d或--decompress或----uncompress：解开压缩文件；</span><br><span class="line">-f或——force：强行压缩文件。</span><br><span class="line">-h或——help：在线帮助；</span><br><span class="line">-l或——list：列出压缩文件的相关信息；</span><br><span class="line">-L或——license：显示版本与版权信息；</span><br><span class="line">-r或——recursive：递归处理，将指定目录下的所有文件及子目录一并处理；</span><br><span class="line">-v或——verbose：显示指令执行过程；</span><br></pre></td></tr></table></figure><p>实例</p><h2 id="-code22-"><a class="markdownIt-Anchor" href="#-code22-"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">压缩当前目录所有文件为.gz文件</span><br><span class="line">gzip * </span><br><span class="line">把上例中每个压缩的文件解压，并列出详细的信息</span><br><span class="line">gzip -dv *</span><br><span class="line">显示压缩文件的信息，并不解压</span><br><span class="line">gzip -l *</span><br><span class="line">压缩一个tar备份文件，扩展名是tar.gztar -cf my.tar my_first.pygzip -r my.tar</span><br></pre></td></tr></table></figure></h2><h3 id="netstat命令"><a class="markdownIt-Anchor" href="#netstat命令"></a> netstat命令</h3><p>netstat命令用来<strong>打印 Linux中 网络系统的状态信息</strong>，可让你得知整个Linux系统的网络情况。</p><p>语法【选项】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">netstat [选项]</span><br><span class="line">-t或--tcp：显示TCP传输协议的连线状况；</span><br><span class="line">-u或--udp：显示UDP传输协议的连线状况；</span><br><span class="line">-n或--numeric：直接使用ip地址，而不通过域名服务器；</span><br><span class="line">-l或--listening：显示监控中的服务器的Socket；</span><br><span class="line">-p或--programs：显示正在使用Socket的程序识别码和程序名称；-a或--all：显示所有连线中的Socket；</span><br></pre></td></tr></table></figure><p>实例</p><h2 id="-code24-"><a class="markdownIt-Anchor" href="#-code24-"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@oldboy_python ~ 10:21:59]#netstat -tunlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd           </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      814/sshd            </span><br><span class="line">tcp6       0      0 :::111                  :::*                    LISTEN      2703/rpcbind        </span><br><span class="line">tcp6       0      0 :::3306                 :::*                    LISTEN      29269/mysqld        </span><br><span class="line">udp        0      0 0.0.0.0:758             0.0.0.0:*                           2703/rpcbind        </span><br><span class="line">udp        0      0 0.0.0.0:111             0.0.0.0:*                           2703/rpcbind        </span><br><span class="line">udp        0      0 10.141.32.137:123       0.0.0.0:*                           484/ntpd            </span><br><span class="line">udp        0      0 127.0.0.1:123           0.0.0.0:*                           484/ntpd            </span><br><span class="line">udp        0      0 0.0.0.0:123             0.0.0.0:*                           484/ntpd            </span><br><span class="line">udp6       0      0 :::758                  :::*                                2703/rpcbind        </span><br><span class="line">udp6       0      0 :::111                  :::*                                2703/rpcbind        </span><br><span class="line">udp6       0      0 :::123                  :::*                                484/ntpd  </span><br></pre></td></tr></table></figure></h2><h3 id="ps命令"><a class="markdownIt-Anchor" href="#ps命令"></a> ps命令</h3><p>ps 命令用于查看系统中的进程状态，格式为“ps [参数]”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps　　 命令常用参数</span><br><span class="line">    -a     显示所有进程</span><br><span class="line">    -u     用户以及其他详细信息</span><br><span class="line">    -x     显示没有控制终端的进程</span><br></pre></td></tr></table></figure><h3 id="kill命令"><a class="markdownIt-Anchor" href="#kill命令"></a> Kill命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill命令用来删除执行中的程序或工作。kill可将指定的信息送至程序。</span><br></pre></td></tr></table></figure><p>选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-a：当处理当前进程时，不限制命令名和进程号的对应关系；</span><br><span class="line">-l &lt;信息编号&gt;：若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称；</span><br><span class="line">-p：指定kill 命令只打印相关进程的进程号，而不发送任何信号；</span><br><span class="line">-s &lt;信息名称或编号&gt;：指定要送出的信息；</span><br><span class="line">-u：指定用户。</span><br></pre></td></tr></table></figure><p>只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略，<strong>下面是常用的信号：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HUP     1    终端断线</span><br><span class="line">INT     2    中断（同 Ctrl + C）</span><br><span class="line">QUIT    3    退出（同 Ctrl + \）</span><br><span class="line">TERM   15    终止</span><br><span class="line">KILL    9    强制终止</span><br><span class="line">CONT   18    继续（与STOP相反， fg/bg命令）</span><br><span class="line">STOP   19    暂停（同 Ctrl + Z）</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">先用ps查找进程，然后用kill杀掉：</span><br><span class="line">ps -ef | grep vim</span><br><span class="line">root      3268  2884  0 16:21 pts/1    00:00:00 vim install.log</span><br><span class="line">root      3370  2822  0 16:21 pts/0    00:00:00 grep vim</span><br><span class="line"></span><br><span class="line">kill 3268</span><br></pre></td></tr></table></figure><h3 id="killall命令"><a class="markdownIt-Anchor" href="#killall命令"></a> killall命令</h3><p>通常来讲，复杂软件的服务程序会有多个进程协同为用户提供服务，如果逐个去结束这 些进程会比较麻烦，此时可以使用 <code>killall</code> 命令来批量结束某个服务程序带有的全部进程。</p><h2 id="-code30-"><a class="markdownIt-Anchor" href="#-code30-"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如nginx启动后有2个进程</span><br><span class="line">killall nginx </span><br></pre></td></tr></table></figure></h2><h3 id="selinux功能"><a class="markdownIt-Anchor" href="#selinux功能"></a> SELinux功能</h3><p>SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，这个功能管理员又爱又恨，大多数生产环境也是关闭的做法，安全手段使用其他方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">大多数ssh连接不上虚拟机，都是因为防火墙和selinux阻挡了</span><br></pre></td></tr></table></figure><p>永久关闭方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.修改配置文件，永久生效关闭selinux</span><br><span class="line">cp &#x2F;etc&#x2F;selinux&#x2F;config &#x2F;etc&#x2F;selinux&#x2F;config.bak #修改前备份</span><br><span class="line">2.修改方式可以vim编辑,找到</span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX&#x3D; can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX&#x3D;disabled</span><br><span class="line">3.用sed替换</span><br><span class="line">sed -i &#39;s&#x2F;SELINUX&#x3D;enforcing&#x2F;SELINUX&#x3D;disabled&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line">4.检查状态</span><br><span class="line">grep &quot;SELINUX&#x3D;disabled&quot; &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line">#出现结果即表示修改成功</span><br></pre></td></tr></table></figure><p>临时关闭selinux(命令行修改，重启失效)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getenforce #获取selinux状态</span><br><span class="line">#修改selinux状态</span><br><span class="line">setenforce </span><br><span class="line">usage:  setenforce [ Enforcing | Permissive | 1 | 0 ]</span><br><span class="line">数字0 表示permissive，给出警告，不会阻止，等同disabled</span><br><span class="line">数字1表示enforcing，表示开启</span><br></pre></td></tr></table></figure><p>Tip:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改selinux配置后，想要生效还得重启系统，技巧就是（修改配置文件+命令行修改，达到立即生效）</span><br><span class="line"></span><br><span class="line">生产环境的服务器是禁止随意重启的！！！！</span><br></pre></td></tr></table></figure><h3 id="iptables防火墙"><a class="markdownIt-Anchor" href="#iptables防火墙"></a> iptables防火墙</h3><p>在学习阶段，关闭防火墙可以更方便的学习，在企业环境中，一般只有配置外网ip的linux服务器才会开启防火墙，但是对于高并发流量的业务服务器仍然是不能开启的，会有很大性能损失，因此需要更nb的硬件防火墙。</p><p>关闭防火墙具体操作如下：</p><p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" />](javascript:void(0)😉</p><h2 id="-code35-"><a class="markdownIt-Anchor" href="#-code35-"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">centos7默认已经使用firewall作为防火墙了</span><br><span class="line">1.关闭防火墙</span><br><span class="line">systemctl status firewalld #查看防火墙状态</span><br><span class="line">systemctl stop firewalld    #关闭防火墙</span><br><span class="line">systemctl disable firewalld#关闭防火墙开机启动systemctl is-enabled firewalld.service#检查防火墙是否启动</span><br></pre></td></tr></table></figure></h2><h3 id="linux中文显示设置防止中文乱码"><a class="markdownIt-Anchor" href="#linux中文显示设置防止中文乱码"></a> Linux中文显示设置（防止中文乱码）</h3><p>此项优化为可选项，根据个人情况选择是否调整Linux系统的字符集，字符集就是一套文字符号以及编码。</p><p>Linux下常用字符集有：</p><ul><li>GBK　　实际企业应用较少</li><li>UTF-8　　广泛支持，MYSQL也使用UTF-8，企业广泛使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看系统当前字符集<span class="built_in">echo</span> <span class="variable">$LANGlocale</span><span class="comment">#检查xshell crt的字符集#命令修改字符集</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/profile.d/locale.sh</span></span><br><span class="line">export LC_CTYPE=zh_CN.UTF-8</span><br><span class="line">export LC_ALL=zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/locale.conf</span></span><br><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/sysconfig/i18n</span></span><br><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/environment</span></span><br><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>英文版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/profile.d/locale.sh</span></span><br><span class="line">export LC_CTYPE=en_US.UTF-8</span><br><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/locale.conf</span></span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/sysconfig/i18n</span></span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/environment</span></span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">LC_ALL=en_US.UTF-8</span><br><span class="line"> </span><br><span class="line">2.更改后查看系统语言变量locale</span><br></pre></td></tr></table></figure><p>乱码核心解决办法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.系统字符集utf8</span><br><span class="line">2.xshell字符集utf8</span><br><span class="line">3.文件字符集一致zh_CN.UTF-8</span><br></pre></td></tr></table></figure><h3 id="df命令"><a class="markdownIt-Anchor" href="#df命令"></a> df命令</h3><p><strong>df命令</strong>用于显示磁盘分区上的可使用的磁盘空间。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法</span><br><span class="line">df(选项)(参数)</span><br><span class="line">-h或--human-readable：以可读性较高的方式来显示信息；</span><br><span class="line">-k或--kilobytes：指定区块大小为1024字节；</span><br><span class="line">-T或--print-type：显示文件系统的类型；</span><br><span class="line">--help：显示帮助；</span><br><span class="line">--version：显示版本信息。</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看系统磁盘设备，默认是KB为单位：</span><br><span class="line">df</span><br><span class="line">使用-h选项以KB以上的单位来显示，可读性高：</span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="tree命令"><a class="markdownIt-Anchor" href="#tree命令"></a> tree命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">tree命令以树状图列出目录的内容。</span><br><span class="line"></span><br><span class="line">-a：显示所有文件和目录；</span><br><span class="line">-A：使用ASNI绘图字符显示树状图而非以ASCII字符组合；</span><br><span class="line">-C：在文件和目录清单加上色彩，便于区分各种类型；</span><br><span class="line">-d：先是目录名称而非内容；</span><br><span class="line">-D：列出文件或目录的更改时间；</span><br><span class="line">-f：在每个文件或目录之前，显示完整的相对路径名称；</span><br><span class="line">-F：在执行文件，目录，Socket，符号连接，管道名称名称，各自加上&quot;*&quot;，&quot;/&quot;，&quot;@&quot;，&quot;|&quot;号；</span><br><span class="line">-g：列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码；</span><br><span class="line">-i：不以阶梯状列出文件和目录名称；</span><br><span class="line">-l：&lt;范本样式&gt; 不显示符号范本样式的文件或目录名称；</span><br><span class="line">-l：如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录；</span><br><span class="line">-n：不在文件和目录清单加上色彩；</span><br><span class="line">-N：直接列出文件和目录名称，包括控制字符；</span><br><span class="line">-p：列出权限标示；</span><br><span class="line">-P：&lt;范本样式&gt; 只显示符合范本样式的文件和目录名称；</span><br><span class="line">-q：用“？”号取代控制字符，列出文件和目录名称；</span><br><span class="line">-s：列出文件和目录大小；</span><br><span class="line">-t：用文件和目录的更改时间排序；</span><br><span class="line">-u：列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码；</span><br><span class="line">-x：将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该目录予以排除在寻找范围外。</span><br></pre></td></tr></table></figure><h3 id="设置主机名"><a class="markdownIt-Anchor" href="#设置主机名"></a> 设置主机名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@yugo /tmp 11:04:42]#hostnamectl set-hostname pyyuc</span><br><span class="line">[root@pyyuc ~ 11:05:12]#hostname</span><br><span class="line">pyyuc</span><br></pre></td></tr></table></figure><h3 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DNS（Domain Name System，域名系统），万维网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过域名，最终得到该域名对应的IP地址的过程叫做域名解析（或主机名解析）。</span><br></pre></td></tr></table></figure><h4 id="查看linux的dns唯一配置文件"><a class="markdownIt-Anchor" href="#查看linux的dns唯一配置文件"></a> 查看Linux的<code>dns</code>，唯一配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置文件</span><br><span class="line">cat &#x2F;etc&#x2F;resolv.conf#dns服务器地址</span><br><span class="line">nameserver 119.29.29.29</span><br><span class="line">nameserver 223.5.5.5</span><br></pre></td></tr></table></figure><h4 id="本地强制dns解析文件-etchosts"><a class="markdownIt-Anchor" href="#本地强制dns解析文件-etchosts"></a> 本地强制<code>dns</code>解析文件 <code>/etc/hosts</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">指定本地解析：</span><br><span class="line">&#x2F;etc&#x2F;hosts</span><br><span class="line">主机IP    主机名    主机别名</span><br><span class="line">127.0.0.1        www.pyyuc.cn        </span><br></pre></td></tr></table></figure><h4 id="nslookup命令"><a class="markdownIt-Anchor" href="#nslookup命令"></a> nslookup命令</h4><p><strong>nslookup命令</strong>是常用域名查询工具，就是查DNS信息用的命令。</p><p>nslookup4有两种工作模式，即“交互模式”和“非交互模式”。在“交互模式”下，用户可以向域名服务器查询各类主机、域名的信息，或者输出域名中的主机列表。而在“非交互模式”下，用户可以针对一个主机或域名仅仅获取特定的名称或所需信息。</p><p>进入交互模式，直接输入nslookup命令，不加任何参数，则直接进入交互模式，此时nslookup会连接到默认的域名服务器（即<code>/etc/resolv.conf</code>的第一个dns地址）。或者输入<code>nslookup -nameserver/ip</code>。进入非交互模式，就直接输入<code>nslookup 域名</code>就可以了。</p><h2 id="-code46-"><a class="markdownIt-Anchor" href="#-code46-"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#解析</span><br><span class="line">nslookup www.oldboyedu.com</span><br></pre></td></tr></table></figure></h2><h3 id="计划任务crond服务"><a class="markdownIt-Anchor" href="#计划任务crond服务"></a> 计划任务crond服务</h3><p><strong>什么是计划任务：</strong><br />后台运行，到了预定的时间就会自动执行的任务，前提是：事先手动将计划任务设定好。这就用到了crond服务</p><p><strong>crond服务相关的软件包</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@MiWiFi-R3-srv ~]# rpm -qa |grep cron</span><br><span class="line">cronie-anacron-1.4.11-14.el7.x86_64</span><br><span class="line">crontabs-1.11-6.20121102git.el7.noarch</span><br><span class="line">cronie-1.4.11-14.el7.x86_64</span><br></pre></td></tr></table></figure><p>这些包在最小化安装系统时就已经安装了，并且会开机自启动crond服务，并为我们提供好编写计划任务的crontab命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab命令被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crontab （选项）（参数）</span><br><span class="line">-e：编辑该用户的计时器设置；</span><br><span class="line">-l：列出该用户的计时器设置；</span><br><span class="line">-r：删除该用户的计时器设置；</span><br><span class="line">-u&lt;用户名称&gt;：指定要设定计时器的用户名称。存放定时任务的文件/var/spool/cron</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>查看计划任务的执行：tail -f /var/log/cron</p></li><li><p>写计划任务时，命令必须加上绝对路径，否则会出现这种情况：从日志中看，确实触发了计划任务的执行，但是命令却没有执行成功，比如* * * * * reboot就会出现这种情况，需要将reboot写成/usr/sbin/reboot</p></li><li><p>计划任务执行的命令 是否存在，软件是否安装</p></li><li><p>确保crontab服务运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status cron</span><br><span class="line"></span><br><span class="line">ps -ef|grep crond</span><br></pre></td></tr></table></figure></li><li><p><strong>检测crontab是否开机启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl is-enabled crond</span><br></pre></td></tr></table></figure></li></ol><p>crontab配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在/etc目录下有一个crontab文件，这个就是系统任务调度的配置文件</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Example of job definition:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  |</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> *  *  *  *  * user-name  <span class="built_in">command</span> to be executed　分 时  日 月  周</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">crontab任务配置基本格式：</span><br><span class="line">*  *　 *　 *　 *　　command</span><br><span class="line">分钟(0-59)　小时(0-23)　日期(1-31)　月份(1-12)　星期(0-6,0代表星期天)　 命令</span><br><span class="line"></span><br><span class="line">第1列表示分钟1～59 每分钟用*或者 */1表示</span><br><span class="line">第2列表示小时1～23（0表示0点）</span><br><span class="line">第3列表示日期1～31</span><br><span class="line">第4列表示月份1～12</span><br><span class="line">第5列标识号星期0～6（0表示星期天）</span><br><span class="line">第6列要运行的命令</span><br><span class="line"></span><br><span class="line">星号（*）：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。</span><br><span class="line">30 08 * * *  每天8.30去上班  </span><br><span class="line">逗号（,）：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</span><br><span class="line">中杠（-）：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</span><br><span class="line">正斜线（/）：可以用正斜线指定时间的间隔频率，例如“0-23/2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*/10，如果用在minute字段，表示每十分钟执行一次。</span><br><span class="line">*/3 * * * * /usr/sbin/ntpdate ntp1.aliyun.com  每隔三分钟执行下时间同步</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1132884/201811/1132884-20181122101207846-1843670285.png" alt="img" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每天8.30上班</span><br><span class="line">30 08 * * *  去上班</span><br><span class="line">每天12下班回家睡觉</span><br><span class="line">00 00 * * *   回家睡觉</span><br></pre></td></tr></table></figure><p>实例</p><h2 id="-code55-"><a class="markdownIt-Anchor" href="#-code55-"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">所有命令一定要用绝对路径来写！</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">每分钟执行一次命令</span></span><br><span class="line">* * * * * 命令</span><br><span class="line"><span class="meta">#</span><span class="bash">每小时的3,15分组执行命令</span></span><br><span class="line">3,15 * * * * 命令</span><br><span class="line"><span class="meta">#</span><span class="bash">在上午8-11点的第3和第15分钟执行</span></span><br><span class="line">3,15 8-11 * * * 命令</span><br><span class="line"><span class="meta">#</span><span class="bash">每晚21:30执行命令</span></span><br><span class="line">30 21 * * * 命令</span><br><span class="line"><span class="meta">#</span><span class="bash">没周六、日的1：30执行命令</span></span><br><span class="line">30 1 * * 6,0 命令</span><br><span class="line"><span class="meta">#</span><span class="bash">每周一到周五的凌晨1点，清空/tmp目录的所有文件</span></span><br><span class="line">0 1 * * 1-5 /usr/bin/rm -rf /tmp/*</span><br><span class="line"><span class="meta">#</span><span class="bash">每晚的21:30重启nginx</span></span><br><span class="line">30 21 * * * /opt/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash">每月的1,10,22日的4:45重启nginx</span></span><br><span class="line">45 4 1,1,10,22 * * /opt/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash">每个星期一的上午8点到11点的第3和15分钟执行命令</span></span><br><span class="line">3,15 8-11 * * 1 command</span><br></pre></td></tr></table></figure></h2><h3 id="软件包管理"><a class="markdownIt-Anchor" href="#软件包管理"></a> 软件包管理</h3><p><strong>软件包是什么</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">程序(软件)组成部分：</span><br><span class="line">    二进制程序  可执行命令</span><br><span class="line">    库     .so文件</span><br><span class="line">    配置文件    .conf</span><br><span class="line">    帮助文件    readme    &#x2F;usr&#x2F;share&#x2F;man</span><br></pre></td></tr></table></figure><p><strong>windows程序</strong></p><p>如图</p><p><img src="https://img2018.cnblogs.com/blog/1132884/201811/1132884-20181102105433001-1622121729.png" alt="img" /></p><p><strong>macos程序</strong></p><p><img src="https://img2018.cnblogs.com/blog/1132884/201811/1132884-20181102105505280-615660405.png" alt="img" /></p><p>软件包顾名思义就是将应用程序、配置文件和数据打包的产物，所有的linux发行版都采用了某种形式的软件包系统，这使得linux软件管理和在windows下一样方便，suse、red hat、fedora等发行版都是用rpm包，Debian和Ubuntu则使用.deb格式的软件包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql-5-3-4.rpm</span><br><span class="line">redis-3-4-3.rpm</span><br><span class="line">nginx2-3-2.rpm</span><br></pre></td></tr></table></figure><p>在早期系统运维中，安装软件是一件非常费事费力的事情。系统管理员不得不下载软件源代码编译软件，并且为了系统做各种调整。</p><p>尽管源代码编译形式的软件增强了用户定制的自由度，但是在小软件上耗费精力是缺乏效率的，于是软件包应运而生。</p><p>软件包管理可以将管理员从无休止的兼容问题中释放。yum工具就可以自动搜索依赖关系，并执行安装。</p><h3 id="rpm软件包管理器"><a class="markdownIt-Anchor" href="#rpm软件包管理器"></a> RPM软件包管理器</h3><p><strong>软件包管理器核心功能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.制作软件包  .rpm</span><br><span class="line">2.安装、卸载、升级、查询、校验</span><br></pre></td></tr></table></figure><p>在 RPM(红帽软件包管理器)公布之前，要想在 Linux 系统中安装软件只能采取源码包 的方式安装。早期在 Linux 系统中安装程序是一件非常困难、耗费耐心的事情，而且大多数 的服务程序仅仅提供源代码，需要运维人员自行编译代码并解决许多的软件依赖关系，因此 要安装好一个服务程序，运维人员需要具备丰富知识、高超的技能，甚至良好的耐心。而且在 安装、升级、卸载服务程序时还要考虑到其他程序、库的依赖关系，所以在进行校验、安装、 卸载、查询、升级等管理软件操作时难度都非常大。</p><p>RPM 机制则为解决这些问题而设计的。RPM 有点像 Windows 系统中的控制面板，会建 立统一的数据库文件，详细记录软件信息并能够自动分析依赖关系。</p><h3 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h3><p><img src="https://img2018.cnblogs.com/blog/1132884/201810/1132884-20181015220353445-718827471.png" alt="img" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#现在要安装mysql</span><br><span class="line">#下载地址</span><br><span class="line">https:&#x2F;&#x2F;dev.mysql.com&#x2F;downloads&#x2F;mysql&#x2F;</span><br><span class="line">安装软件的命令格式                rpm -ivh filename.rpm     # i表示安装   v显示详细过程  h以进度条显示</span><br><span class="line">升级软件的命令格式                rpm -Uvh filename.rpm</span><br><span class="line">卸载软件的命令格式                rpm -e filename.rpm</span><br><span class="line">查询软件描述信息的命令格式         rpm -qpi filename.rpm</span><br><span class="line">列出软件文件信息的命令格式         rpm -qpl filename.rpm</span><br><span class="line">查询文件属于哪个 RPM 的命令格式 　 rpm -qf filename</span><br></pre></td></tr></table></figure><h3 id="rpm安装软件"><a class="markdownIt-Anchor" href="#rpm安装软件"></a> rpm安装软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载软件包wget https://rpmfind.net/linux/centos/7.5.1804/os/x86_64/Packages/lrzsz-0.12.20-36.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装软件包</span></span><br><span class="line">[root@yugo /tmp 11:03:42]#rpm -ivh lrzsz-0.12.20-36.el7.x86_64.rpm</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:lrzsz-0.12.20-36.el7             ################################# [100%]</span><br></pre></td></tr></table></figure><h3 id="rpm查询软件"><a class="markdownIt-Anchor" href="#rpm查询软件"></a> rpm查询软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -q lrzsz  #查询lrzsz是否安装</span><br><span class="line">rpm -qi lrzsz #查询lrzsz包的说明信息</span><br><span class="line">rpm -ql lrzsz #查询lrzsz包生成的文件列表</span><br><span class="line">rpm -qc nginx  #查询nginx安装生成后的配置文件路径</span><br><span class="line">rpm -qf /etc/nginx/fastcgi.conf  #查看这个文件由哪个rpm包安装</span><br></pre></td></tr></table></figure><h3 id="rpm升级软件"><a class="markdownIt-Anchor" href="#rpm升级软件"></a> rpm升级软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh /PATH/TO/NEW_PACKAGE_FILE: 如果装有老版本的，则升级；否则，则安装；</span><br><span class="line">rpm -Fvh /PATH/TO/NEW_PACKAGE_FILE：如果装有老版本的，则升级；否则，退出；</span><br></pre></td></tr></table></figure><h3 id="rpm卸载软件"><a class="markdownIt-Anchor" href="#rpm卸载软件"></a> rpm卸载软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -e PACKAGE_NAME</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要手动解决依赖不如</span> </span><br><span class="line">yum remove</span><br></pre></td></tr></table></figure><h3 id="rpm的依赖问题因此不太好用"><a class="markdownIt-Anchor" href="#rpm的依赖问题因此不太好用"></a> rpm的依赖问题，因此不太好用</h3><p>其一，难以删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@pyyuc /tmp 11:42:01]#rpm -e nginx</span><br><span class="line">error: Failed dependencies:</span><br><span class="line">    nginx is needed by (installed) nginx-mod-mail-1:1.12.2-2.el7.x86_64</span><br><span class="line">    nginx is needed by (installed) nginx-mod-http-perl-1:1.12.2-2.el7.x86_64</span><br><span class="line">    nginx is needed by (installed) nginx-mod-http-xslt-filter-1:1.12.2-2.el7.x86_64</span><br><span class="line">    nginx is needed by (installed) nginx-mod-http-image-filter-1:1.12.2-2.el7.x86_64</span><br><span class="line">    nginx is needed by (installed) nginx-mod-stream-1:1.12.2-2.el7.x86_64</span><br><span class="line">    nginx is needed by (installed) nginx-mod-http-geoip-1:1.12.2-2.el7x86_64</span><br></pre></td></tr></table></figure><p>其二，难以安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@pyyuc /tmp 11:45:07]#rpm -ivh zsh-5.6.2-9.6.2.aarch64.rpm</span><br><span class="line">warning: zsh-5.6.2-9.6.2.aarch64.rpm: Header V3 RSA/SHA256 Signature, key ID 3dbdc284: NOKEY</span><br><span class="line">error: Failed dependencies:</span><br><span class="line">    ld-linux-aarch64.so.1()(64bit) is needed by zsh-5.6.2-9.6.2.aarch64</span><br><span class="line">    ld-linux-aarch64.so.1(GLIBC_2.17)(64bit) is needed by zsh-5.6.2-9.6.2.aarch64</span><br><span class="line">    libdl.so.2(GLIBC_2.17)(64bit) is needed by zsh-5.6.2-9.6.2.aarch64</span><br><span class="line">    libm.so.6(GLIBC_2.17)(64bit) is needed by zsh-5.6.2-9.6.2.aarch64</span><br><span class="line">    libncursesw.so.6()(64bit) is needed by zsh-5.6.2-9.6.2.aarch64</span><br><span class="line">    libtinfo.so.6()(64bit) is needed by zsh-5.6.2-9.6.2.aarch64</span><br></pre></td></tr></table></figure><p>yum命令</p><p><strong>yum命令</strong>是在Fedora和RedHat以及SUSE中基于rpm的软件包管理器，它可以使系统管理人员交互和自动化地更细与管理RPM软件包，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载、安装。</p><p>尽管 RPM 能够帮助用户查询软件相关的依赖关系，但问题还是要运维人员自己来解决， 而有些大型软件可能与数十个程序都有依赖关系，在这种情况下安装软件会是非常痛苦的。 Yum 软件仓库便是为了进一步降低软件安装难度和复杂度而设计的技术。Yum 软件仓库可以 根据用户的要求分析出所需软件包及其相关的依赖关系，然后自动从服务器下载软件包并安 装到系统。</p><p>Yum 软件仓库中的 RPM 软件包可以是由红帽官方发布的，也可以是第三方发布的，当 然也可以是自己编写的。</p><p><img src="https://images2018.cnblogs.com/blog/1132884/201808/1132884-20180822201405295-83195507.png" alt="img" /></p><p>yum提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum(选项)(参数)</span><br><span class="line">-h：显示帮助信息；</span><br><span class="line">-y：对所有的提问都回答“yes”；</span><br><span class="line">-c：指定配置文件；</span><br><span class="line">-q：安静模式；</span><br><span class="line">-v：详细模式；</span><br><span class="line">-d：设置调试等级（0-10）；</span><br><span class="line">-e：设置错误等级（0-10）；</span><br><span class="line">-R：设置yum处理一个命令的最大等待时间；</span><br><span class="line">-C：完全从缓存中运行，而不去下载或者更新任何头文件。</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">部分常用的命令包括：</span><br><span class="line"></span><br><span class="line">自动搜索最快镜像插件　   yum install yum-fastestmirror</span><br></pre></td></tr></table></figure><h3 id="yum源配置"><a class="markdownIt-Anchor" href="#yum源配置"></a> yum源配置</h3><p>什么是yum源？</p><ul><li><ul><li>Yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</li><li>说到yum源就必须说到linux系统中特有的依赖关系问题，yum就是为了解决依赖关系而存在的。yum源就相当是一个目录项，当我们使用yum机制安装软件时，若需要安装依赖软件，则yum机制就会根据在yum源中定义好的路径查找依赖软件，并将依赖软件安装好。</li><li>YUM是“Yellow dog Updater, Modified”的缩写，是一个软件包管理器，YUM从指定的地方（相关网站的rpm包地址或本地的rpm路径）自动下载RPM包并且安装，能够很好的解决依赖关系问题。</li><li>YUM的基本工作机制如下：<br />服务器端：在服务器上面存放了所有的RPM软件包，然后以相关的功能去分析每个RPM文件的依赖性关系，将这些数据记录成文件存放在服务器的某特定目录内。<br />客户端：如果需要安装某个软件时，先下载服务器上面记录的依赖性关系文件(可通过WWW或FTP方式)，通过对服务器端下载的纪录数据进行分析，然后取得所有相关的软件，一次全部下载下来进行安装。</li></ul></li></ul><p>yum源的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入yum源目录</span></span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看yum源文件</span></span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1132884/201807/1132884-20180724121645358-251863304.png" alt="img" /></p><p><strong>配置阿里云yum源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.好习惯，备份yum源</span><br><span class="line">mkdir repo_bak</span><br><span class="line">mv *.repo repo_bak/</span><br><span class="line">2.下载阿里云repo文件</span><br><span class="line">wget http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">3.清空yum缓存并且生成新的yum缓存</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br><span class="line">4.安装软件扩展源</span><br><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum repolist all        列出所有仓库</span><br><span class="line">yum list all            列出仓库所有软件包</span><br><span class="line">yum info 软件包名            查看软件包信息</span><br><span class="line">yum install 软件包名        安装软件包</span><br><span class="line">yum reinstall 软件包名    重新安装软件包</span><br><span class="line">yum update    软件包名        升级软件包</span><br><span class="line">yum remove    软件包名        移除软件包</span><br><span class="line">yum clean all            清楚所有仓库缓存</span><br><span class="line">yum check-update        检查可以更新的软件包</span><br><span class="line">yum grouplist            查看系统中已安装的软件包</span><br><span class="line">yum groupinstall 软件包组    安装软件包组</span><br></pre></td></tr></table></figure><h2 id="系统服务管理命令"><a class="markdownIt-Anchor" href="#系统服务管理命令"></a> 系统服务管理命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果大家之前学习或者使用过RHEL6系统，应该已经习惯了service、chkconfig等命令来管理系统服务，但是在RHEL7系统中改变了systemctl来管理系统服务。</span><br></pre></td></tr></table></figure><p><img src="https://images2018.cnblogs.com/blog/1132884/201808/1132884-20180822203754689-685906448.png" alt="img" /></p><p>设置开机启动相关</p><p><img src="https://images2018.cnblogs.com/blog/1132884/201808/1132884-20180822203941017-626760489.png" alt="img" /></p><h2 id="必须掌握的etc下的linux目录知识"><a class="markdownIt-Anchor" href="#必须掌握的etc下的linux目录知识"></a> 必须掌握的/etc下的linux目录知识</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc：</span><br><span class="line">这个目录用来存放所有的系统管理所需要的配置文件和子目录。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">网卡配置文件</span></span><br><span class="line">/etc/sysconfig/network-script/ifcfg-eth0</span><br><span class="line"><span class="meta">#</span><span class="bash">修改机器名以及网卡，网管等配置</span></span><br><span class="line">/etc/sysconfig/network</span><br><span class="line"><span class="meta">#</span><span class="bash">linux的dns客户端配置文件，实现域名和ip的互相解析</span></span><br><span class="line">/etc/resolv.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">本地dns解析文件,设定ip和域名的对应解析,开发测试最常用的临时域名解析</span></span><br><span class="line">/etc/hosts/</span><br><span class="line"><span class="meta">#</span><span class="bash">系统全局环境变量永久生效的配置文件,如PATH等</span></span><br><span class="line">/etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">用户的环境变量</span></span><br><span class="line">~/.bash_profile </span><br><span class="line">~/.bashrc</span><br><span class="line"><span class="meta">#</span><span class="bash">存放可执行程序的目录，大多是系统管理命令</span></span><br><span class="line">/usr/sbin</span><br><span class="line"><span class="meta">#</span><span class="bash">存放用户自编译安装软件的目录  &gt; 等同于C:\Program files （windows）</span></span><br><span class="line">/usr/local</span><br><span class="line"><span class="meta">#</span><span class="bash">关于处理器的信息,还可以top指令查看</span></span><br><span class="line">/proc/cpuinfo</span><br><span class="line"><span class="meta">#</span><span class="bash">查看内存信息，还可以free -m</span></span><br><span class="line">/proc/meminfo </span><br></pre></td></tr></table></figure><h2 id="linux下安装程序的方法"><a class="markdownIt-Anchor" href="#linux下安装程序的方法"></a> Linux下安装程序的方法</h2><ul><li>rpm -ivh 包名.rpm　　需要手动解决依赖关系</li><li>yum install 包名     yum自动处理依赖关系</li><li>编译安装（源码安装）</li></ul><h3 id="安装lrzsz"><a class="markdownIt-Anchor" href="#安装lrzsz"></a> 安装Lrzsz</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装此软件，即可拖拽上传下载linux代码到windows</span></span><br><span class="line">yum install lrzsz</span><br></pre></td></tr></table></figure><h2 id="服务器无法上网错误"><a class="markdownIt-Anchor" href="#服务器无法上网错误"></a> 服务器无法上网错误</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.yum报错</span><br><span class="line">    Error couldn&#39;t resolve host &#39;mirrorlist.centos.org&#39;</span><br><span class="line">2.ping www.baidu.com 看是否能上网</span><br><span class="line">3.如果百度不通，ping ip通了</span><br><span class="line">ping 119.29.29.29  ，说明dns有问题</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;查看系统信息&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#查看系统信息&quot;&gt;&lt;/a&gt; 查看系统信息&lt;/h3&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="bash" scheme="http://example.com/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>linux 虚拟机 ip配置</title>
    <link href="http://example.com/2021/01/18/linux%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/[Linux]%20%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20ip%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2021/01/18/linux%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/[Linux]%20%20%E8%99%9A%E6%8B%9F%E6%9C%BA%20ip%E9%85%8D%E7%BD%AE/</id>
    <published>2021-01-18T15:08:49.876Z</published>
    <updated>2021-01-18T15:10:24.895Z</updated>
    
    <content type="html"><![CDATA[<p>VMware创建linux虚拟机后，未设置网络不能上网</p><ul><li><p>选用NAT模式</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608194042756.png" alt="1608194042756" /></p></li><li><p>主界面中点击 编辑&gt;虚拟网路编辑器</p><ul><li>设置网段：192.168.178.0</li><li>子网掩码：255.255.255.0</li><li>设置子网IP： 192.168.178.0</li><li>关闭DHCP</li></ul><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608194127139.png" alt="1608194127139" /></p></li><li><p>配置 “NAT设置”</p><ul><li>设置网关：192.168.178.254</li></ul><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608194310765.png" alt="1608194310765" /></p></li><li><p>设置完，即可重启虚拟机进行安装</p></li><li><p>在Centos7 设置IP</p><ul><li><p>方法一： 自动分配IP</p><ul><li>设置界面：Network&amp;Hostname点击 “ON”（开启DCHP才能自动分配ip）</li></ul></li><li><p>方法二：手动分配IP</p><ul><li><p>ip addr show</p><ul><li><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608196838177.png" alt="1608196838177" /></li></ul></li><li><p>vi /etc/sysconfig/network-scripts/ifcfg-ens33</p><ul><li><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608198200935.png" alt="1608198200935" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改以下</span></span><br><span class="line">BOOTPROTO=static  <span class="comment"># 修改为静态ip</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.178</span><span class="number">.110</span>  <span class="comment"># 静态ip地址</span></span><br><span class="line">NETMASK=<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>   <span class="comment"># 子网掩码</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.178</span><span class="number">.254</span> <span class="comment"># 网关</span></span><br><span class="line">DNS1=<span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span>       <span class="comment"># 腾讯dns服务器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>重启网络服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop NetworkManager</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h2 id="ssh远程连接"><a class="markdownIt-Anchor" href="#ssh远程连接"></a> SSH远程连接</h2><p>SSH默认端口 22</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;VMware创建linux虚拟机后，未设置网络不能上网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选用NAT模式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-image</summary>
      
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="虚拟机" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Centos 下安装 MYSQL(mariadb) + 主从复制</title>
    <link href="http://example.com/2021/01/18/linux%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/[Linux]%20Centos%20%E4%B8%8B%E4%BD%BF%E7%94%A8%20MYSQL(mariadb)%20+%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://example.com/2021/01/18/linux%20%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/[Linux]%20Centos%20%E4%B8%8B%E4%BD%BF%E7%94%A8%20MYSQL(mariadb)%20+%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2021-01-18T15:05:12.247Z</published>
    <updated>2021-01-18T15:06:45.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-mysqlmariadb"><a class="markdownIt-Anchor" href="#1-mysqlmariadb"></a> 1 MYSQL(mariadb)</h2><p>MariaDB数据库管理系统是MySQL的一个分支**，主要由开源社区在维护，采用GPL授权许可。</p><p>开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将<strong>MySQL闭源</strong>的潜在风险，因此社区<strong>采用分支的方式来避开这个风险</strong>。</p><p>MariaDB的目的是<strong>完全兼容MySQL</strong>，包括API和命令行，使之能轻松成为MySQL的代替品。</p><h3 id="11-yum-安装-mariadb"><a class="markdownIt-Anchor" href="#11-yum-安装-mariadb"></a> 1.1 yum 安装 mariadb</h3><h4 id="1-添加-mariadb-yum-仓库"><a class="markdownIt-Anchor" href="#1-添加-mariadb-yum-仓库"></a> 1. 添加 MariaDB yum 仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.首先在 RHEL/CentOS 和 Fedora 操作系统中添加 MariaDB 的 YUM 配置文件 MariaDB.repo 文件。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑创建mariadb.repo仓库文件</span></span><br><span class="line">vim /etc/yum.repos.d/MariaDB.repo</span><br></pre></td></tr></table></figure><h2 id="-code1-"><a class="markdownIt-Anchor" href="#-code1-"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2.添加repo仓库配置</span><br><span class="line"></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.1/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure></h2><h4 id="2-在centos-7-中安装-mariadb"><a class="markdownIt-Anchor" href="#2-在centos-7-中安装-mariadb"></a> 2. 在CentOS 7 中安装 MariaDB</h4><h2 id="-code2-"><a class="markdownIt-Anchor" href="#-code2-"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当 MariaDB 仓库地址添加好后，通过下面一行命令 MariaDB。</span></span><br><span class="line"></span><br><span class="line">yum install MariaDB-server MariaDB-client -y</span><br></pre></td></tr></table></figure></h2><h4 id="3-启动mariadb相关命令"><a class="markdownIt-Anchor" href="#3-启动mariadb相关命令"></a> 3. 启动mariadb相关命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mariadb数据库的相关命令是：</span></span><br><span class="line"></span><br><span class="line">systemctl start mariadb  #启动MariaDB</span><br><span class="line"></span><br><span class="line">systemctl stop mariadb  #停止MariaDB</span><br><span class="line"></span><br><span class="line">systemctl restart mariadb  #重启MariaDB</span><br><span class="line"></span><br><span class="line">systemctl enable mariadb  #设置开机启动</span><br></pre></td></tr></table></figure><p>启动后正常使用mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure><h3 id="12-初始化mysql"><a class="markdownIt-Anchor" href="#12-初始化mysql"></a> 1.2 初始化mysql</h3><p>MariaDB 安装完毕并成功启动后请不要立即使用。为了确保数据 库的安全性和正常运转，需要先对数据库程序进行初始化操作。这个初始化操作涉及下面 5 个 步骤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 设置 root 管理员在数据库中的密码值(注意，该密码并非 root 管理员在系统中的密 码，这里的密码值默认应该为空，可直接按回车键)。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 设置 root 管理员在数据库中的专有密码。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 随后删除匿名账户，并使用 root 管理员从远程登录数据库，以确保数据库上运行的业</span><br><span class="line">务的安全性。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 删除默认的测试数据库，取消测试数据库的一系列访问权限。</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 刷新授权列表，让初始化的设定立即生效。</span><br></pre></td></tr></table></figure><p>确保mariadb服务器启动后，执行命令初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p><strong>初始化mysql</strong></p><p><img src="https://img2018.cnblogs.com/blog/1132884/201810/1132884-20181013001649899-2112300228.png" alt="img" /></p><p><img src="https://img2018.cnblogs.com/blog/1132884/201810/1132884-20181013001659057-1064615866.png" alt="img" /></p><p><img src="https://img2018.cnblogs.com/blog/1132884/201810/1132884-20181013001716166-629537215.png" alt="img" /></p><p><img src="https://img2018.cnblogs.com/blog/1132884/201810/1132884-20181013001716166-629537215.png" alt="img" /></p><p><img src="https://img2018.cnblogs.com/blog/1132884/201810/1132884-20181013001732459-124817082.png" alt="img" /></p><p><img src="https://img2018.cnblogs.com/blog/1132884/201810/1132884-20181013001741065-1446311536.png" alt="img" /></p><h3 id="13-mysql基本命令"><a class="markdownIt-Anchor" href="#13-mysql基本命令"></a> 1.3 mysql基本命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改mysql密码</span></span><br><span class="line">MariaDB [(none)]&gt; set password = PASSWORD(&#x27;redhat123&#x27;);</span><br></pre></td></tr></table></figure><p>生产环境里不会死磕root用户，<strong>为了数据库的安全</strong>以及和其他用户<strong>协同管理数据库</strong>，就需要<strong>创建其他数据库账户，然后分配权限</strong>，满足工作需求。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; create user yuchao@&#x27;127.0.0.1&#x27; identified by &#x27;redhat123&#x27;;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use mysql;</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; select host,user,password from user where user=&#x27;yuchao&#x27;;</span><br></pre></td></tr></table></figure><p>切换普通用户yuchao，查看数据库信息，发现无法看到完整的数据库列表</p><h2 id="-code9-"><a class="markdownIt-Anchor" href="#-code9-"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mysql -uyuchao -p -h 127.0.0.1</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br></pre></td></tr></table></figure></h2><h4 id="数据库权限设置"><a class="markdownIt-Anchor" href="#数据库权限设置"></a> 数据库权限设置</h4><p>mysql使用grant命令对账户进行授权，grant命令常见格式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grant 权限 on 数据库.表名 to 账户@主机名         # 对特定数据库中的特定表授权</span><br><span class="line">grant 权限 on 数据库.* to 账户@主机名           #　对特定数据库中的所有表给与授权</span><br><span class="line">grant 权限1,权限2,权限3 on *.* to 账户@主机名    # 对所有库中的所有表给与多个授权</span><br><span class="line">grant all privileges on *.* to 账户@主机名   　# 对所有库和所有表授权所有权限</span><br></pre></td></tr></table></figure><p>退出数据库，使用root登录，开始权限设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mysql -uroot -p</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use mysql;</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; grant all privileges on *.* to yuchao@127.0.0.1;</span><br><span class="line"></span><br><span class="line">MariaDB [mysql]&gt; show grants for yuchao@127.0.0.1;</span><br></pre></td></tr></table></figure><p>移除权限</p><h2 id="-code12-"><a class="markdownIt-Anchor" href="#-code12-"></a> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; revoke all privileges on *.* from yuchao@127.0.0.1;</span><br></pre></td></tr></table></figure></h2><h4 id="配置mysql"><a class="markdownIt-Anchor" href="#配置mysql"></a> 配置mysql</h4><p>1.中文编码设置，编辑mysql配置文件/etc/my.cnf，下入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>2.授权配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">远程连接设置哦设置所有库，所有表的所有权限，赋值权限给所有ip地址的root用户</span><br><span class="line">mysql &gt; grant all privileges on *.* to root@&#x27;%&#x27; identified by &#x27;password&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建用户</span></span><br><span class="line">mysql &gt; create user &#x27;username&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">刷新权限</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="2-数据库备份与恢复"><a class="markdownIt-Anchor" href="#2-数据库备份与恢复"></a> 2 数据库备份与恢复</h2><p>mysqldump命令用于备份数据库数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mysqldump -u root -p --all-databases &gt; /tmp/db.dump</span><br></pre></td></tr></table></figure><p>2.导出db1、db2两个数据库的所有数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -proot --databases db1 db2 &gt;/tmp/user.sql</span><br></pre></td></tr></table></figure><p>进入mariadb数据库，删除一个db</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mysql -uroot -p</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; drop database s11;</span><br></pre></td></tr></table></figure><p>进行数据恢复，吧刚才重定向备份的数据库文件导入到mysql中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# mysql -uroot -p &lt; /tmp/db.dump</span><br></pre></td></tr></table></figure><h3 id="21-mysql主从复制"><a class="markdownIt-Anchor" href="#21-mysql主从复制"></a> 2.1 MYSQL主从复制</h3><p>MySQL数据库的主从复制方案，是其自带的功能，并且主从复制并不是复制磁盘上的数据库文件，而是通过binlog日志复制到需要同步的从服务器上。</p><p>MySQL数据库支持单向、双向、链式级联，等不同业务场景的复制。在复制的过程中，一台服务器充当主服务器（Master），接收来自用户的内容更新，而一个或多个其他的服务器充当从服务器（slave），接收来自Master上binlog文件的日志内容，解析出SQL，重新更新到Slave，使得主从服务器数据达到一致。</p><p>主从复制的逻辑有以下几种</p><p>一主一从，单向主从同步模式，只能在Master端写入数据</p><p>一主多从</p><p><img src="https://images2018.cnblogs.com/blog/1132884/201808/1132884-20180827185441654-685236737.png" alt="img" /></p><p>双主主复制逻辑架构，此架构可以在Master1或Master2进行数据写入，或者两端同事写入（特殊设置）</p><p><img src="https://images2018.cnblogs.com/blog/1132884/201808/1132884-20180827185658793-1430580007.png" alt="img" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在生产环境中，MySQL主从复制都是异步的复制方式，即不是严格的实时复制，但是给用户的体验都是实时的。MySQL主从复制集群功能使得MySQL数据库支持大规模高并发读写成为可能，且有效的保护了服务器宕机的数据备份。</span><br></pre></td></tr></table></figure><p>应用场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用复制功能当Master服务器出现问题时，我们可以人工的切换到从服务器继续提供服务，此时服务器的数据和宕机时的数据几乎完全一致。复制功能也可用作数据备份，但是如果人为的执行drop,delete等语句删除，那么从库的备份功能也就失效了.</span><br></pre></td></tr></table></figure><p><strong>主从机制实现原理</strong></p><p><img src="https://images2018.cnblogs.com/blog/1132884/201807/1132884-20180725134009278-1247444646.png" alt="img" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) master将改变记录到二进制日志(binary log)中（这些记录叫做二进制日志事件，binary log events）； </span><br><span class="line">(2) slave将master的binary log events拷贝到它的中继日志(relay log)； </span><br><span class="line">(3) slave重做中继日志中的事件，将改变反映它自己的数据。</span><br></pre></td></tr></table></figure><h3 id="22-master主库配置"><a class="markdownIt-Anchor" href="#22-master主库配置"></a> 2.2 master主库配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看数据库状态</span></span><br><span class="line">systemctl status mariadb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止mariadb</span></span><br><span class="line">systemctl stop mariadb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释：server-id服务的唯一标识（主从之间都必须不同）；log-bin启动二进制日志名称为mysql-bin</span> </span><br><span class="line">[mysqld]</span><br><span class="line">server-id=1</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启mariadb</span></span><br><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure><p></p><h3 id="23-master主库添加从库账号"><a class="markdownIt-Anchor" href="#23-master主库添加从库账号"></a> 2.3 master主库添加从库账号</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">1.新建用于主从同步的用户chaoge,允许登录的从库是&#x27;192.168.178.130&#x27;</span><br><span class="line">create user &#x27;chaoge&#x27;@&#x27;192.168.178.130&#x27; identified by &#x27;redhat&#x27;;</span><br><span class="line"></span><br><span class="line">2.# 题外话：如果提示密码太简单不复合策略加在前面加这句</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">set</span> global validate_password_policy=0;</span></span><br><span class="line"></span><br><span class="line">3.给从库账号授权,说明给chaoge从库复制的权限，在192.168.178.130机器上复制grant replication slave on *.* to &#x27;chaoge&#x27;@&#x27;192.168.178.130&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash">检查 主库创建的复制账号</span></span><br><span class="line">select user,host from mysql.user;</span><br><span class="line"><span class="meta">#</span><span class="bash">检查授权账号的权限</span></span><br><span class="line">show grants for chaoge@&#x27;192.168.178.130&#x27;;</span><br><span class="line"></span><br><span class="line">实现对主数据库锁表只读，防止数据写入，数据复制失败</span><br><span class="line">    flush table with read lock;</span><br><span class="line"></span><br><span class="line">4.检查主库的状态</span><br><span class="line">    MariaDB [(none)]&gt; show master status</span><br><span class="line">    -&gt; ;</span><br><span class="line">    +------------------+----------+--------------+------------------+</span><br><span class="line">    | File | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">    +------------------+----------+--------------+------------------+</span><br><span class="line">    | mysql-bin.000001 | 575 | | |</span><br><span class="line">    +------------------+----------+--------------+------------------+</span><br><span class="line">    1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> File是二进制日志文件名，Position 是日志开始的位置。后面从库会用到 后面从库会用到 后面从库会用到！！！！！！</span></span><br><span class="line"></span><br><span class="line">5.锁表后，一定要单独再打开一个SSH窗口，导出数据库的所有数据，</span><br><span class="line">[root@oldboy_python ~ 19:32:45]# mysqldump -uroot -p --all-databases &gt; /data/all.sql </span><br><span class="line"></span><br><span class="line">6.确保数据导出后，没有数据插入，完毕再查看主库状态</span><br><span class="line">show master status;</span><br><span class="line"></span><br><span class="line">7.导出数据完毕后，解锁主库，恢复可写；</span><br><span class="line">unlock tables;</span><br><span class="line"></span><br><span class="line">8.将备份导出的数据scp至Slave数据库</span><br><span class="line">scp /data/all.sql root@192.168.178.130:/data/</span><br></pre></td></tr></table></figure><h3 id="24-slave从库配置"><a class="markdownIt-Anchor" href="#24-slave从库配置"></a> 2.4 slave从库配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1.设置server-id值并关闭binlog功能参数</span><br><span class="line">数据库的server-id在主从复制体系内是唯一的，Slave的server-id要与主库和其他从库不同，并且注释掉Slave的binlog参数。</span><br><span class="line"></span><br><span class="line">2.因此修改Slave的/etc/my.cnf，写入</span><br><span class="line">    [mysqld]</span><br><span class="line">    server-id=3</span><br><span class="line"></span><br><span class="line">3.重启数据库</span><br><span class="line">systemctl restart mariadb</span><br><span class="line"></span><br><span class="line">4.检查Slava从数据库的各项参数</span><br><span class="line">show variables like &#x27;log_bin&#x27;;</span><br><span class="line">show variables like &#x27;server_id&#x27;;</span><br><span class="line"></span><br><span class="line">5.恢复主库Master的数据导入到Slave库导入数据（注意sql文件的路径）</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"><span class="built_in">source</span> /data/all.sql;</span></span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">    # mysql -uroot -p  &lt; abc.sql </span><br><span class="line"></span><br><span class="line">6.配置复制的参数，Slave从库连接Master主库的配置</span><br><span class="line">    mysql &gt; change master to master_host=&#x27;192.168.178.129&#x27;,</span><br><span class="line">    master_user=&#x27;chaoge&#x27;,</span><br><span class="line">    master_password=&#x27;redhat&#x27;,</span><br><span class="line">    master_log_file=&#x27;mysql-bin.000001&#x27;,</span><br><span class="line">    master_log_pos=575;</span><br><span class="line"></span><br><span class="line">7.启动从库的同步开关，测试主从复制的情况</span><br><span class="line">    start slave;</span><br><span class="line"></span><br><span class="line">8.查看复制状态</span><br><span class="line">    show slave status\G;</span><br></pre></td></tr></table></figure><p>检查主从复制是否成功的关键在于</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show slave status\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.119.10</span><br><span class="line">                  Master_User: chaoge</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 1039</span><br><span class="line">               Relay_Log_File: slave-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 537</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>tip：</p><p>注意此处还未配置从库的只读模式，只需在<strong>slave</strong>服务器上配置**/etc/my.cnf**，加上以下配置，并且在slave上创建普通用户，使用普通用户主从同步即可达到只读的效果</p><p>如果用<strong>root</strong>用户，无法达到<strong>readonly</strong>，这是一个坑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">server-id=3</span><br><span class="line">read-only=true</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-mysqlmariadb&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-mysqlmariadb&quot;&gt;&lt;/a&gt; 1 MYSQL(mariadb)&lt;/h2&gt;
&lt;p&gt;MariaDB数据库管理系统是MySQL的一个分支**，主要由开源社</summary>
      
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="Mysql" scheme="http://example.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>2 数据结构</title>
    <link href="http://example.com/2021/01/18/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2021/01/18/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-01-18T14:44:52.897Z</published>
    <updated>2021-01-18T15:17:49.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据结构介绍"><a class="markdownIt-Anchor" href="#数据结构介绍"></a> 数据结构介绍</h2><p><strong>定义</strong>：数据结构是指 相互之间存在着一种或多种关系 的 数据元素的集合 和 该集合中数据元素之间的关系组成。</p><p>简单说：<strong>数据结构就是设计数据以何什么方式组织并存储在计算机中</strong></p><p>如：列表、集合、字典</p><p>N.Wirth: “程序 = 数据结构 + 算法”</p><h3 id="数据结构的分类"><a class="markdownIt-Anchor" href="#数据结构的分类"></a> 数据结构的分类</h3><p>数据结构按照其逻辑结构可分为：线性结构、树结构、图结构</p><ul><li><p><strong>线性结构</strong>：数据结构中的元素存在<strong>一对一</strong>的相互关系</p></li><li><p><strong>树结构</strong>：数据结构中的元素存在<strong>一对多</strong>的相互关系</p></li><li><p><strong>图结构</strong>：数据结构中的元素存在着<strong>多对多</strong>的相互关系</p></li></ul><h2 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h2><p>最简单的线性结构</p><p>存储：顺序表，一块连续的内存</p><p>操作的时间复杂度：</p><ul><li>查找：O(1)<ul><li>由于python列表中可以存不同类型的数据，</li><li>所以实质：先为存入的元素分配内存，在将<strong>内存地址</strong>存入列表</li></ul></li><li>插入(insert)：O(n)</li><li>删除(remove)：O(n)</li></ul><h2 id="1-栈"><a class="markdownIt-Anchor" href="#1-栈"></a> 1. 栈</h2><h3 id="栈的介绍"><a class="markdownIt-Anchor" href="#栈的介绍"></a> 栈的介绍</h3><p>栈(Stack)是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。</p><ul><li>特点：后进先出 （如堆叠的书本、进出电梯）</li><li>概念：栈顶、栈底<ul><li>栈底：列表(list)最后一位</li></ul></li><li>栈的基本操作：<ul><li>进栈（压栈）：push</li><li>出栈：pop</li><li>取栈顶：gettop</li></ul></li></ul><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608538723475.png" alt="1608538723475" /></p><h3 id="栈的实现"><a class="markdownIt-Anchor" href="#栈的实现"></a> 栈的实现</h3><p>使用一般的列表结构即可实现栈</p><pre><code>* 进栈：`li.append`* 出栈：`li.pop`* 取栈顶：`li[-1]`</code></pre><h3 id="栈的应用-括号匹配"><a class="markdownIt-Anchor" href="#栈的应用-括号匹配"></a> 栈的应用 - 括号匹配</h3><p><strong>示例</strong></p><p>括号匹配问题：给一个字符串，其中包含小括号、中括号、大括号，求该字符串中的括号是否匹配。</p><p><strong>例如</strong>：</p><h2 id="-code0-"><a class="markdownIt-Anchor" href="#-code0-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">()()[]&#123;&#125;   匹配</span><br><span class="line">([&#123;()&#125;])   匹配</span><br><span class="line">[](        不匹配</span><br><span class="line">[(])       不匹配</span><br></pre></td></tr></table></figure></h2><p>解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">栈 - 括号匹配</span></span><br><span class="line"><span class="string">    ( 入栈</span></span><br><span class="line"><span class="string">    ) 出栈</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stack = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, element</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;压栈&quot;&quot;&quot;</span></span><br><span class="line">        self.stack.append(element)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;出栈&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            name = self.stack.pop()</span><br><span class="line">            <span class="keyword">return</span> name</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_top</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;栈顶&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brace_mathc</span>(<span class="params">s</span>):</span></span><br><span class="line">    match = &#123;<span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;]&#x27;</span>:<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>&#125;</span><br><span class="line">    stack = Stack()</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> ch <span class="keyword">in</span> [<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>]:            </span><br><span class="line">            stack.push(ch)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># ),],&#125;</span></span><br><span class="line">            <span class="keyword">if</span> stack.is_empty():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> stack.get_top() == match[ch]:                </span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> stack.is_empty():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>          </span><br></pre></td></tr></table></figure><h2 id="2-队列"><a class="markdownIt-Anchor" href="#2-队列"></a> 2. 队列</h2><h3 id="队列的介绍"><a class="markdownIt-Anchor" href="#队列的介绍"></a> 队列的介绍</h3><p>定义：队列(Queue)是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除</p><p><strong>特点</strong>：先进先出</p><p><strong>概念</strong>：队尾、队头</p><ul><li>进行插入的一端称为<strong>队尾</strong>(rear)，插入的侗族称为进队或入队</li><li>进行删除的一端称为<strong>对头</strong>(front)，删除动作称为出队</li></ul><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608567970517.png" alt="1608567970517" /></p><h3 id="队列的实现"><a class="markdownIt-Anchor" href="#队列的实现"></a> 队列的实现</h3><p>由于简单队列，元素会自动补位，复杂度高，故不采用</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608568034654.png" alt="1608568034654" /></p><p>采用<strong>环形队列</strong>实现</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608617105287.png" alt="1608617105287" /></p><p><strong>实现方式</strong></p><ul><li>环形队列：当队尾指针<code>front == Maxsize -1</code>时 ，再前进一个位置自动到0位<ul><li>队首指针前进1：<code>front = (front + 1) % Maxsize</code></li><li>队尾指针前进1：<code>rear = (rear + 1) % Maxsize</code></li><li>队空条件：<code>rear == front</code></li><li>队满条件：<code>(rear + 1) % Maxsize == front</code></li></ul></li></ul><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">实现队列</span></span><br><span class="line"><span class="string">复杂度为1：不自动补位</span></span><br><span class="line"><span class="string">    环形队列</span></span><br><span class="line"><span class="string">    front (front + 1) / size  从队 -1位 前进到 0位  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">队列性质：先进先出</span></span><br><span class="line"><span class="string">    进出队列，为指针指向位置</span></span><br><span class="line"><span class="string">    队尾(rear) 进</span></span><br><span class="line"><span class="string">    队首(front) 出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rear == front 队列为空</span></span><br><span class="line"><span class="string">rear +1 = front 队列满了（留一空位不填充，做标识）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size=<span class="number">100</span></span>):</span></span><br><span class="line">        self.queue = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size+<span class="number">1</span>)] <span class="comment"># 初始化固定长度 列表（0填充）</span></span><br><span class="line">        self.size = size</span><br><span class="line">        self.rear = -<span class="number">1</span>  <span class="comment"># 队尾指针</span></span><br><span class="line">        self.front = -<span class="number">1</span> <span class="comment"># 队首指针</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, element</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_full():</span><br><span class="line">            self.rear = (self.rear + <span class="number">1</span>) % self.size</span><br><span class="line">            self.queue[self.rear] = element</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;Queue is full&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty():</span><br><span class="line">            self.front = (self.front + <span class="number">1</span>) % self.size</span><br><span class="line">            <span class="keyword">return</span> self.queue[self.front]  <span class="comment"># 移动指针，覆盖数值？</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.rear == self.front</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_full</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> (self.rear + <span class="number">1</span>) % self.size == self.front</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    q = Queue(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        q.push(i)</span><br><span class="line">        print(q.queue)</span><br><span class="line">    print(<span class="built_in">len</span>(q.queue))</span><br></pre></td></tr></table></figure><h3 id="队列的内置模块"><a class="markdownIt-Anchor" href="#队列的内置模块"></a> 队列的内置模块</h3><h4 id="双向队列"><a class="markdownIt-Anchor" href="#双向队列"></a> 双向队列</h4><ul><li>性质：双向队列的两端都支持进队和出队</li><li>双向队列的基本操作：<ul><li>队首进队</li><li>队首出队</li><li>队尾进队</li><li>队尾出队</li></ul></li><li>注：<ul><li><code>queue</code>模块用于保证线程安全</li><li>算法中，我们常使用 <strong><code>collections.deque</code></strong></li></ul></li></ul><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608618073618.png" alt="1608618073618" /></p><p><strong>使用方法</strong>：<code>from collections import deque</code></p><ul><li>创建队列：<code>queue = deque()</code></li><li>进队：<code>append()</code></li><li>出队：<code>popleft()</code></li><li>双向队列队首进队：<code>appendleft()</code></li><li>双向队列队尾出队：<code>pop()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">queue模块用于保证 线程安全</span></span><br><span class="line"><span class="string">collections.deque：</span></span><br><span class="line"><span class="string">算法的队列一般用它</span></span><br><span class="line"><span class="string">是双向队列</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-链表"><a class="markdownIt-Anchor" href="#3-链表"></a> 3. 链表</h2><p><strong>定义</strong>： 链表是一种在存储单元上非连续、非顺序的存储结构。</p><p>链表由一系列节点组成的元素集合。</p><p>​每个节点包含两部分：</p><p>​数据域或item 和 指向下一个节点的指针next。</p><p>​通过节点之间的相互连接，最终串联成一个链表</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608627996382.png" alt="1608627996382" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 连接节点</span></span><br><span class="line">a = Node(<span class="number">1</span>)</span><br><span class="line">b = Node(<span class="number">2</span>)</span><br><span class="line">c = Node(<span class="number">3</span>)</span><br><span class="line">a.<span class="built_in">next</span> = b</span><br><span class="line">b.<span class="built_in">next</span> = c</span><br></pre></td></tr></table></figure><h4 id="创建链表方法"><a class="markdownIt-Anchor" href="#创建链表方法"></a> <strong>创建链表</strong>（方法）</h4><ol><li><p>头插法</p><ul><li>需知道头节点位置</li></ul><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608818886301.png" alt="1608818886301" /></p></li><li><p>尾插法</p><ul><li>需知道头节点、尾节点位置</li></ul><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608819036458.png" alt="1608819036458" /></p></li></ol><h4 id="创建链表-代码的实现"><a class="markdownIt-Anchor" href="#创建链表-代码的实现"></a> 创建链表 代码的实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><ul><li>头插法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_linklist_head</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    头插法（只需维护头节点）</span></span><br><span class="line"><span class="string">    :param li:</span></span><br><span class="line"><span class="string">    :return: head</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        node.<span class="built_in">next</span> = head</span><br><span class="line">        head = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><ul><li>尾插法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_linklist_tail</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    尾插法（需维护头、尾节点）</span></span><br><span class="line"><span class="string">    :param li:</span></span><br><span class="line"><span class="string">    :return: head</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    head = Node(li[<span class="number">0</span>])</span><br><span class="line">    tail = head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> li[<span class="number">1</span>:]:</span><br><span class="line">        node = Node(element)</span><br><span class="line">        tail.<span class="built_in">next</span> = node</span><br><span class="line">        tail = node</span><br><span class="line">    <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h4 id="链表的遍历"><a class="markdownIt-Anchor" href="#链表的遍历"></a> 链表的遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_linklist</span>(<span class="params">lk</span>):</span></span><br><span class="line">    <span class="keyword">while</span> lk:</span><br><span class="line">        print(lk.item, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">        lk = lk.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h3><h4 id="链表节点的插入"><a class="markdownIt-Anchor" href="#链表节点的插入"></a> 链表节点的插入</h4><ul><li><p>插入4节点</p><p>​<img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608820256066.png" alt="1608820256066" style="zoom:50%;" /></p></li></ul><ol><li><p>关联 插队时并列节点的指向</p><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608820355406.png" alt="1608820355406" style="zoom:50%;" /></li><li><p>让被插队的节点指向自己</p></li></ol><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608820375086.png" alt="1608820375086" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="built_in">next</span> = curNode.<span class="built_in">next</span></span><br><span class="line">curNode.<span class="built_in">next</span> = p</span><br></pre></td></tr></table></figure><h4 id="链表节点的删除"><a class="markdownIt-Anchor" href="#链表节点的删除"></a> 链表节点的删除</h4><ul><li><p>删除4节点</p><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608820823435.png" alt="1608820823435" style="zoom:50%;" /></li></ul><ol><li><p>定义 p指向要删除的节点</p><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608821122628.png" alt="1608821122628" style="zoom:50%;" /></li><li><p>让自己的下一节点，指向自己的上一节点</p></li></ol><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608820982239.png" alt="1608820982239" style="zoom:50%;" /><ol start="3"><li>删除p</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = curNode.<span class="built_in">next</span></span><br><span class="line">curNode.<span class="built_in">next</span> = curNode.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">del</span> p</span><br></pre></td></tr></table></figure><h3 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h3><p>双链表的每个节点有两个指针：</p><p>​一个指向后一个节点</p><p>​另一个指向前一个节点</p><h4 id="建立双链表"><a class="markdownIt-Anchor" href="#建立双链表"></a> 建立双链表</h4><p>​<img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608822078563.png" alt="1608822078563" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.item = item</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.prior = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="双链表节点的插入"><a class="markdownIt-Anchor" href="#双链表节点的插入"></a> 双链表节点的插入</h4><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608880133960.png" alt="1608880133960" /></p><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608880204461.png" alt="1608880204461" style="zoom:50%;" /><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608880252238.png" alt="1608880252238" style="zoom:50%;" /><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608880279154.png" alt="1608880279154" style="zoom:50%;" /><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608880298883.png" alt="1608880298883" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.<span class="built_in">next</span> = curNode.<span class="built_in">next</span></span><br><span class="line">curNode.<span class="built_in">next</span>.piror = p</span><br><span class="line">p.prior = curNode</span><br><span class="line">curNode.<span class="built_in">next</span> = p</span><br></pre></td></tr></table></figure><h4 id="双链表节点的删除"><a class="markdownIt-Anchor" href="#双链表节点的删除"></a> 双链表节点的删除</h4><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608880392429.png" alt="1608880392429" style="zoom:50%;" /><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608880555243.png" alt="1608880555243" style="zoom:50%;" /><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608880440395.png" alt="1608880440395" style="zoom:50%;" /><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608880477738.png" alt="1608880477738" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p =  curNode.<span class="built_in">next</span></span><br><span class="line">curNode.<span class="built_in">next</span> = p.<span class="built_in">next</span></span><br><span class="line">p.<span class="built_in">next</span>.piror = curNode</span><br><span class="line"><span class="keyword">del</span> p</span><br></pre></td></tr></table></figure><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><h3 id="链表复杂度分析"><a class="markdownIt-Anchor" href="#链表复杂度分析"></a> 链表复杂度分析</h3><p>顺序表（列表/数组）与 链表</p><table><thead><tr><th>操作</th><th>顺序表</th><th>链表</th></tr></thead><tbody><tr><td>按元素值查找</td><td>O(n)</td><td>O(n)</td></tr><tr><td>按下标查找</td><td>O(1)</td><td>O(n)</td></tr><tr><td>在某元素后插入</td><td>O(n)</td><td>O(1)</td></tr><tr><td>删除某元素</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><p><strong>总结</strong>：</p><ol><li>链表在插入和删除的操作上明显快于顺序表</li><li>链表的内存可以更灵活的分配</li><li>链表这种链式存储的数据结构对树和图的结构有很大的启发性</li></ol><h2 id="4-哈希表"><a class="markdownIt-Anchor" href="#4-哈希表"></a> 4. 哈希表</h2><h3 id="哈希表的介绍"><a class="markdownIt-Anchor" href="#哈希表的介绍"></a> 哈希表的介绍</h3><p>哈希表 = 直接寻址表 + 哈希</p><p><strong>定义</strong>：又称为散列表(Hash Table)，是一种线性表的存储结构。哈希表由一个<strong>直接寻址表</strong>和一个<strong>哈希函数</strong>组成。哈希函数h(k)将元素关键字k作为自变量，返回元素的存储下标。</p><p><strong>特点</strong>：哈希表通过一个哈希函数来计算数据存储的位置的数据结构。通常支持如下操作：</p><ul><li>insert(key, value)：插入键值对 (key, value)</li><li>get(key)：如果存在键为key的键值对则返回其value，否则返回空值</li><li>delete(key)：删除键为key的键值对</li></ul><h4 id="哈希表-直接寻址表-哈希"><a class="markdownIt-Anchor" href="#哈希表-直接寻址表-哈希"></a> 哈希表 = 直接寻址表 + 哈希</h4><h5 id="直接寻址表"><a class="markdownIt-Anchor" href="#直接寻址表"></a> 直接寻址表</h5><p>当关键字的全域U比较小时，直接寻址时一种更简单而有效的方法</p><ul><li>缺点：<ul><li>当域U很大时，需要消耗大量内存，很不实际</li><li>如果域U很大而实际出现的key很少，则有大量空间被浪费</li><li>无法处理关键字不是数字的情况</li></ul></li></ul><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1608882204198.png" alt="1608882204198" style="zoom:50%;" /><h5 id="哈希"><a class="markdownIt-Anchor" href="#哈希"></a> 哈希</h5><p>直接寻址表：key为k的元素放到k位置上</p><p>改进直接寻址表：哈希</p><ul><li>构建大小为m的寻址表T</li><li>key为 k 的元素放到 h(k) 位置上</li><li>h(k) 是一个函数，其将域U映射到表[0,1,…,m-1]</li></ul><h4 id="哈希冲突"><a class="markdownIt-Anchor" href="#哈希冲突"></a> 哈希冲突</h4><p>哈希函数对不对的key，映射出了相同的结果</p><h5 id="解决冲突-开放寻址法"><a class="markdownIt-Anchor" href="#解决冲突-开放寻址法"></a> 解决冲突 —— 开放寻址法</h5><p>如果哈希函数返回的位置已经有值，则可以向后探查新的位置来存储这个值。</p><ul><li>线性查找：如果位置i被占用，则探查 i+1, i+2, …</li><li>二次查找：如果位置i被占用，则探查 i+1^2, i-1^2, i+2^2, …</li><li>二度哈希：有n个哈希函数，当使用 第1个哈希函数h1 发生冲突时，则尝试使用 h2, h3, …</li></ul><h5 id="解决冲突-拉链法"><a class="markdownIt-Anchor" href="#解决冲突-拉链法"></a> 解决冲突 —— 拉链法</h5><p>哈希表的每个位置都链接一个链表，当发生冲突时，冲突的元素将被加到该位置<strong>链表的最后</strong>。</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608883544925.png" alt="拉链法" /></p><h4 id="哈希表-常见函数"><a class="markdownIt-Anchor" href="#哈希表-常见函数"></a> 哈希表 —— 常见函数</h4><ul><li>除法哈希法：<ul><li>h(k) = k % m</li></ul></li><li>乘法哈希法：<ul><li>h(k) = floor(m*(A*key%1))</li></ul></li><li>全域哈希法：<ul><li><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1609047881922.png" alt="1609047881922" style="zoom: 67%;" /></li></ul></li></ul><h3 id="哈希表的实现"><a class="markdownIt-Anchor" href="#哈希表的实现"></a> 哈希表的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 哈希表 基于链表进行插入</span></span><br><span class="line"><span class="comment"># 哈希冲突——拉链法；重复的数放在以链表节点的形式添加在后面</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkList</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;链表类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, item=<span class="literal">None</span></span>):</span></span><br><span class="line">            self.item = item</span><br><span class="line">            self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LinkListIterator</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;迭代器类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, node</span>):</span></span><br><span class="line">            self.node = node</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">if</span> self.node:</span><br><span class="line">                cur_node = self.node</span><br><span class="line">                self.node = cur_node.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> cur_node.item</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> StopIteration</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, iterable=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.tail = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> iterable:</span><br><span class="line">            self.extend(iterable)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加链表节点&quot;&quot;&quot;</span></span><br><span class="line">        s = LinkList.Node(obj)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            self.head = s</span><br><span class="line">            self.tail = s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.tail.<span class="built_in">next</span> = s</span><br><span class="line">            self.tail = s</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extend</span>(<span class="params">self, iterable</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;自动进行添加&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> iterable:</span><br><span class="line">            self.append(obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;查找&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">if</span> n == obj:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.LinkListIterator(self.head)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;&lt;&quot;</span> + <span class="string">&quot;, &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, self)) + <span class="string">&quot;&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size=<span class="number">101</span></span>):</span></span><br><span class="line">        self.size = size</span><br><span class="line">        <span class="comment"># self.T = [None for i in range(self.size)]</span></span><br><span class="line">        self.T = [LinkList() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.size)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">h</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k % self.size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        i = self.h(k)</span><br><span class="line">        <span class="comment"># 去重</span></span><br><span class="line">        <span class="keyword">if</span> self.find(k):</span><br><span class="line">            print(<span class="string">&quot;Duplicated Insert.&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.T[i].append(k)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        i = self.h(k)</span><br><span class="line">        <span class="keyword">return</span> self.T[i].find(k)</span><br></pre></td></tr></table></figure><h3 id="哈希表的应用"><a class="markdownIt-Anchor" href="#哈希表的应用"></a> 哈希表的应用</h3><ul><li>集合 字典</li><li>md5算法<ul><li>曾经密码学中常用的哈希函数，将任意长度的数据映射为128为的哈希值</li><li>文件的哈希值（两个文件哈希值相同）<ul><li>帮用户验证下载的文件是否完整</li><li>云存储商判断上传的文件是否存在于服务器上，从而实现妙传功能，避免存储过多相同的文件副本</li></ul></li></ul></li><li>SHA2算法<ul><li>较安全性受到挑战的MD5合SHA-1，安全性较高</li><li>SHA-2包含一系列的哈希函数：SHA-224，SHA-256，SHA-384 。。。（数字对应哈希值长度）</li><li>挖矿（比特币）</li></ul></li></ul><h2 id="5-树"><a class="markdownIt-Anchor" href="#5-树"></a> 5. 树</h2><h3 id="数的介绍"><a class="markdownIt-Anchor" href="#数的介绍"></a> 数的介绍</h3><h4 id="树与二叉树"><a class="markdownIt-Anchor" href="#树与二叉树"></a> 树与二叉树</h4><ul><li><p>树是一种数据结构。比如目录结构</p></li><li><p>树是一种可以递归定义的数据结构</p></li><li><p>树是由n个节点组成的集合：</p><ul><li>如果n=0，拿这是一颗空树；</li><li>如果n&gt;0，那存在1个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一棵树</li></ul><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609052341605.png" alt="1609052341605" /></p></li></ul><p>树的一些概念：</p><ul><li>根节点、叶子节点</li><li>树的深度</li><li>树的度：所有节点最大的度（节点的度：几个分叉）</li><li>孩子节点/父节点</li><li>子树</li></ul><h4 id="树的实例模拟文件系统"><a class="markdownIt-Anchor" href="#树的实例模拟文件系统"></a> 树的实例：模拟文件系统</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点属性</span></span><br><span class="line"><span class="comment"># 类型：文件夹/文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储方式：链式存储</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, <span class="built_in">type</span>=<span class="string">&quot;dir&quot;</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.<span class="built_in">type</span> = <span class="built_in">type</span>  <span class="comment"># &quot;dir&quot; or &quot;file&quot;</span></span><br><span class="line">        self.children = []</span><br><span class="line">        self.parent = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">      </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystemTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.root = Node(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        self.now = self.root</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mkdir</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="comment"># name 以/结尾</span></span><br><span class="line">        <span class="keyword">if</span> name[-<span class="number">1</span>] != <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            name += <span class="string">&quot;/&quot;</span></span><br><span class="line">        node = Node(name)</span><br><span class="line">        self.now.children.append(node)</span><br><span class="line">        node.parent = self.now</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ls</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.now.children</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cd</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="keyword">if</span> name[-<span class="number">1</span>] != <span class="string">&quot;/&quot;</span>:</span><br><span class="line">            name += <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&quot;../&quot;</span>:</span><br><span class="line">            self.now = self.now.parent</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> self.now.children:</span><br><span class="line">            <span class="keyword">if</span> child.name == name:</span><br><span class="line">                self.now == child</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">       <span class="keyword">raise</span> ValueError(<span class="string">&quot;invalid dir&quot;</span>)</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;main&quot;</span>:</span><br><span class="line">    tree = FileSystemTree()</span><br><span class="line">    tree.mkdir(<span class="string">&quot;var/&quot;</span>)</span><br><span class="line">    print(tree.root.children)</span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure><h3 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h3><p>定义：树的度为2（两个节点）的树</p><img src="C:\Users\yango\AppData\Roaming\Typora\typora-user-images\1609055873038.png" alt="1609055873038" style="zoom:50%;" /><p><strong>二叉树的链式存储</strong>：将二叉树的节点定义为一个对象，节点之间通过类似链表的连接方式来连接。</p><p><strong>节点定义</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BiTreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.lchild = <span class="literal">None</span></span><br><span class="line">        self.rchild = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">a = BiTreeNode(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">b = BiTreeNode(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">c = BiTreeNode(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">d = BiTreeNode(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">e = BiTreeNode(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">f = BiTreeNode(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">g = BiTreeNode(<span class="string">&quot;G&quot;</span>)</span><br><span class="line"></span><br><span class="line">e.lchild = a</span><br><span class="line">e.rchild = g</span><br><span class="line">a.lchild = c</span><br><span class="line">c.lchild = b</span><br><span class="line">c.rchild = d</span><br><span class="line">g.rchild = f</span><br><span class="line"></span><br><span class="line">root = e</span><br></pre></td></tr></table></figure><h4 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> </h4><h4 id="二叉树的遍历"><a class="markdownIt-Anchor" href="#二叉树的遍历"></a> 二叉树的遍历</h4><p>4种遍历方式：</p><ul><li><p>前序遍历：EACBDGF</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 自己</span></span><br><span class="line"><span class="comment"># 2 左子树</span></span><br><span class="line"><span class="comment"># 3 右子树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_order</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        print(root.data, end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        pre_order(root.lchild)</span><br><span class="line">        pre_order(root.rchild)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;main&quot;</span>:</span><br><span class="line">pre_order(root) <span class="comment"># E,A,C,B,D,G,F,</span></span><br></pre></td></tr></table></figure></li><li><p>中序遍历：ABCDEGF</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 左子树</span></span><br><span class="line"><span class="comment"># 2 自己</span></span><br><span class="line"><span class="comment"># 3 右子树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">in_order</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        pre_order(root.lchild)</span><br><span class="line">        print(root.data, end=<span class="string">&quot;,&quot;</span>)        </span><br><span class="line">        pre_order(root.rchild)</span><br></pre></td></tr></table></figure></li><li><p>后序遍历：BDCAFGE</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 左</span></span><br><span class="line"><span class="comment"># 2 右</span></span><br><span class="line"><span class="comment"># 3 自己</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_order</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;中序遍历&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        post_order(root.lchild)</span><br><span class="line">        post_order(root.rchild)</span><br><span class="line">        print(root.data, end=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>层次遍历 ：EAGCFBD</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用队列</span></span><br><span class="line"><span class="comment"># 进主节点</span></span><br><span class="line"><span class="comment"># 出主</span></span><br><span class="line">    <span class="comment"># 有子节点 —— 进子</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">level_order</span>(<span class="params">root</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;层级遍历&quot;&quot;&quot;</span></span><br><span class="line">    q = deque()</span><br><span class="line">    q.append(root)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(q) &gt; <span class="number">0</span>:</span><br><span class="line">        node = q.popleft()</span><br><span class="line">        print(node.data, end=<span class="string">&quot;, &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> node.lchild:</span><br><span class="line">            q.append(node.lchild)</span><br><span class="line">        <span class="keyword">if</span> node.rchild:</span><br><span class="line">            q.append(node.rchild)</span><br></pre></td></tr></table></figure></li></ul><h4 id="二叉搜索树"><a class="markdownIt-Anchor" href="#二叉搜索树"></a> 二叉搜索树</h4><p><strong>定义</strong>：二叉搜索树是一棵二叉树，且满足性质：</p><p>​设x是二叉树的一个节点。</p><p>​如果y是x左子树的一个节点，那么 <code>y.key &lt;= x.key</code>；</p><p>​如果y是x右子树的一个节点：那么<code>y.key &gt;= x.key</code></p><p><strong>二叉搜索树的操作</strong>：查询、插入、删除</p><h3 id="avl树"><a class="markdownIt-Anchor" href="#avl树"></a> AVL树</h3><p>windows对进程地址空间的管理用到了AVL树。</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609344914649.png" alt="1609344914649" /></p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609344929808.png" alt="1609344929808" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据结构介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据结构介绍&quot;&gt;&lt;/a&gt; 数据结构介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：数据结构是指 相互之间存在着一种或多种关系 的 数据元素的集合 和 该集合中数据</summary>
      
    
    
    
    <category term="算法和数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>3 算法进阶</title>
    <link href="http://example.com/2021/01/18/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2021/01/18/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.%E7%AE%97%E6%B3%95%E8%BF%9B%E9%98%B6/</id>
    <published>2021-01-18T14:44:52.892Z</published>
    <updated>2021-01-18T15:17:35.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-贪心算法"><a class="markdownIt-Anchor" href="#1-贪心算法"></a> 1. 贪心算法</h2><p><strong>定义</strong>：贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最有上加以考虑，他所做出的是在某种意义上的最优解。</p><p><strong>注</strong>：贪心不保证最优解，但在特定的问题上可以有最优解（该问题能用贪心算法计算）</p><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3><h4 id="1-找零问题"><a class="markdownIt-Anchor" href="#1-找零问题"></a> 1. 找零问题</h4><p>假设商店老板需要找零n元钱，钱币的面额有：100元、50元、20元、5元、1元，如何找零使得所需钱币的数量最少？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优先找大面额的</span></span><br><span class="line"></span><br><span class="line">t = [<span class="number">100</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param n: 需找零钱数</span></span><br><span class="line"><span class="string">    :return: m：找零面额对应数值；n：未找开的</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    m = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t))]</span><br><span class="line">    <span class="keyword">for</span> i, money <span class="keyword">in</span> <span class="built_in">enumerate</span>(t):</span><br><span class="line">        m[i] = n // money</span><br><span class="line">        n = n % money</span><br><span class="line">    <span class="keyword">return</span> m, n</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(change(<span class="number">599</span>))</span><br></pre></td></tr></table></figure><h4 id="2-分数背包"><a class="markdownIt-Anchor" href="#2-分数背包"></a> 2. 分数背包</h4><p>一个小偷在某商店发现有n个商品，第i个商品价值v_i元，重w_i千克。他希望拿走的价值尽量高，但他的背包最多只能容纳W千克的东西。他应该拿走那些商品</p><p><strong>两种情况</strong>：</p><ul><li><strong>0-1背包</strong>：对于一个商品，小偷要么把她完整拿走，要么留下。不敢只拿走一部分，或把一个商品拿走多次。（商品为金条）</li><li><strong>分数背包</strong>：对于一个商品，小偷可以拿走其中任意一部分。（商品为金砂）</li></ul><p>若：</p><ul><li>商品1：v1=60  w1=10</li><li>商品2：v2=100  w2=20</li><li>商品3：v3=120  w3=30</li><li>背包容量：W=50</li></ul><p>问：对于0-1背包和分数背包，贪心算法是否都能得到最优解？为什么？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分数背包：单位重量</span></span><br><span class="line"><span class="comment"># 0-1背包，数量级小，难以取整，有剩余容量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优先 价格高</span></span><br><span class="line"><span class="comment"># 满足 总重量=W</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">goods = [(<span class="number">60</span>, <span class="number">10</span>), (<span class="number">100</span>, <span class="number">20</span>), (<span class="number">120</span>, <span class="number">30</span>)]  <span class="comment"># 每个商品元组表示（价格，重量）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fractional_backpack</span>(<span class="params">goods, w</span>):</span></span><br><span class="line">    goods.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]/x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    m = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(goods))]</span><br><span class="line">    totoal_v = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i, (price, weight) <span class="keyword">in</span> <span class="built_in">enumerate</span>(goods):</span><br><span class="line">        <span class="keyword">if</span> w &gt;= weight:</span><br><span class="line">            m[i] = <span class="number">1</span></span><br><span class="line">            w -= weight</span><br><span class="line">            totoal_v += price</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            m[i] = w / weight</span><br><span class="line">            totoal_v += m[i] * price</span><br><span class="line">            w = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> m, totoal_v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ret = fractional_backpack(goods, <span class="number">50</span>)</span><br><span class="line">    print(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-数字拼接问题"><a class="markdownIt-Anchor" href="#3-数字拼接问题"></a> 3. 数字拼接问题</h4><p>有n个非负整数，将其按照字符串拼接的方式拼接成一个整数。如何拼接可以使得得到的整数最大？</p><ul><li>例：32, 94, 128, 1286, 6, 71可以拼接出的最大整数为94716321286128</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 94 71 6 32 1286 128</span></span><br><span class="line"><span class="comment"># 94 71 6 32 128 1286</span></span><br><span class="line"><span class="comment"># 第一位：首位最大</span></span><br><span class="line"><span class="comment"># 其他位：</span></span><br><span class="line"><span class="number">128</span>为<span class="number">1286</span>的子串: <span class="number">1286128</span> &gt; <span class="number">1281286</span></span><br><span class="line">    <span class="number">728</span>为<span class="number">1786</span>的字串: <span class="number">7287286</span> &gt; <span class="number">7286728</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字符串拼接比较</span></span><br><span class="line">x+y <span class="keyword">if</span> x+y &gt; y+x <span class="keyword">else</span> y+x</span><br></pre></td></tr></table></figure><ul><li>my_version</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">普通排序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">number_join</span>(<span class="params">li</span>):</span></span><br><span class="line">    li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, li))</span><br><span class="line">    <span class="comment"># 交换</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(x + <span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[x] + li[y] &lt; li[y] + li[x]:</span><br><span class="line">                li[x], li[y] = li[y], li[x]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure><ul><li>my_优化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优化排序：快排</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    归位</span></span><br><span class="line"><span class="string">    :param li:</span></span><br><span class="line"><span class="string">    :param left: 左指针</span></span><br><span class="line"><span class="string">    :param right: 右指针</span></span><br><span class="line"><span class="string">    :return: 归位后p的下标</span></span><br><span class="line"><span class="string">    循环退出条件：left = right</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tmp = li[left]</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] + tmp &lt;= tmp + li[right]:  <span class="comment"># 从右找比tmp小的数</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        li[left] = li[right]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] + tmp &gt;= tmp + li[left]:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        li[right] = li[left]</span><br><span class="line"></span><br><span class="line">    li[left] = tmp  <span class="comment"># 循环终止，left=right</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_quick_sort</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        mid = partition(li, left, right)  <span class="comment"># 归位</span></span><br><span class="line">        _quick_sort(li, left, mid - <span class="number">1</span>)</span><br><span class="line">        _quick_sort(li, mid + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cal_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">number_join3</span>(<span class="params">li</span>):</span></span><br><span class="line">    li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, li))</span><br><span class="line">    _quick_sort(li, <span class="number">0</span>, <span class="built_in">len</span>(li) - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(li)</span><br></pre></td></tr></table></figure><ul><li>luffy_优解</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n = [<span class="number">32</span>, <span class="number">94</span>, <span class="number">128</span>, <span class="number">1286</span>, <span class="number">6</span>, <span class="number">71</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xy_cmp</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x + y &lt; y + x:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> x + y &gt; y + x:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">number_join2</span>(<span class="params">li</span>):</span></span><br><span class="line">    li = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, li))</span><br><span class="line">    li.sort(key=cmp_to_key(xy_cmp))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(li)</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>速度：python内置sort(归并)  &lt;  快排 &lt; 普通排序（sort与快排较接近）</p><h4 id="4-活动选择问题"><a class="markdownIt-Anchor" href="#4-活动选择问题"></a> 4. 活动选择问题</h4><p>假设有n个活动，这些活动要占用同一片场地，而场地在某时刻只能供一个活动使用。</p><p>每个活动都有一个开始时间s_i和结束时间f_i（题目中时间以整数表示），表示活动在 [s_i, f_i) 区间占用场地。</p><p><strong>问</strong>：安排那些活动能够使该场地举办的活动的个数最多 ？</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609139339069.png" alt="1609139339069" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 贪心结论：最先结束的活动 为最优解的一部分</span></span><br><span class="line"></span><br><span class="line">activities = [(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">6</span>), (<span class="number">5</span>, <span class="number">7</span>), (<span class="number">3</span>, <span class="number">9</span>), (<span class="number">5</span>, <span class="number">9</span>), (<span class="number">6</span>, <span class="number">10</span>), (<span class="number">8</span>, <span class="number">11</span>), (<span class="number">8</span>, <span class="number">12</span>), (<span class="number">2</span>, <span class="number">14</span>), (<span class="number">12</span>, <span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按先结束的场次排序</span></span><br><span class="line">activities.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">activity_selection</span>(<span class="params">li</span>):</span></span><br><span class="line">    res = [li[<span class="number">0</span>]]  <span class="comment"># 第一个时间一定在里面</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">        <span class="keyword">if</span> li[i][<span class="number">0</span>] &gt;= res[-<span class="number">1</span>][<span class="number">1</span>]:  <span class="comment"># 当前活动的开始时间 &lt;= 最后一个入选的结束时间</span></span><br><span class="line">            res.append(li[i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;main&quot;</span>:</span><br><span class="line">    ret = activity_selection(activities)</span><br><span class="line">    print(ret, <span class="built_in">len</span>(ret))  <span class="comment"># [(1, 4), (5, 7), (8, 11), (12, 16)] 4</span></span><br></pre></td></tr></table></figure><h2 id="2-动态规划"><a class="markdownIt-Anchor" href="#2-动态规划"></a> 2. 动态规划</h2><h3 id="从斐波那契看动态规划"><a class="markdownIt-Anchor" href="#从斐波那契看动态规划"></a> 从斐波那契看动态规划</h3><p>斐波那契数列：F_n = F_n-1 + F_n-2</p><p>使用<strong>递归</strong>和<strong>非递归</strong>的方法来求解斐波那契数列的第n项</p><ul><li>递归</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fibnacci(n - <span class="number">1</span>) + fibnacci(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>非递归</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci_no_recurision</span>(<span class="params">n</span>):</span></span><br><span class="line">    f = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>):</span><br><span class="line">            num = f[-<span class="number">1</span>] + f[-<span class="number">2</span>]</span><br><span class="line">            f.append(num)</span><br><span class="line">    <span class="keyword">return</span> f[n]</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：</p><p>求斐波那契(时间)：非递归 &lt; 递归</p><p>​递归算法出现大量重复计算，大大降低了运行的效率</p><p><strong>动态规划（DP）的思想 = 递归式 + 重复子问题</strong></p><h3 id="动态规划问题关健特征"><a class="markdownIt-Anchor" href="#动态规划问题关健特征"></a> 动态规划问题关健特征</h3><p>可用动态规划方法解决的问题</p><ul><li>最有子结构<ul><li>原问题的最优解种设计多少个问问题</li><li>在确定最优解使用哪些问题时，需要考虑多少种选择</li></ul></li><li>重叠子问题</li></ul><h3 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例：</h3><h4 id="1-钢条切割问题"><a class="markdownIt-Anchor" href="#1-钢条切割问题"></a> 1. 钢条切割问题</h4><p>某公司出售钢条，出售价格与钢条长度之间的关系如下表：</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609156722303.png" alt="1609156722303" /></p><p><strong>问题</strong>：现有一段长度为n的钢条和上面的价格表，求切分钢条方案，使得总收益最大。</p><ul><li><strong>递推式 1</strong>: 递归（自上而下）</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>n</mi></msub><mo>=</mo><mi>m</mi><mi>a</mi><msubsup><mi>x</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><msub><mi>p</mi><mi>n</mi></msub><mo separator="true">,</mo><msub><mi>r</mi><mn>1</mn></msub><mo>+</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>r</mi><mi>i</mi></msub><mo>+</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mi>i</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r_n = max_{i=1}^{n}(p_n, r_1 + r_{n-1} + ... + r_i + r_{n-i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod_recursion_1</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = p[n]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            res = <span class="built_in">max</span>(res, cut_rod_recursion_1(p, i) + cut_rod_recursion_1(p, n-i))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><ul><li><strong>递推式 2</strong>: 递归（自上而下）</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>r</mi><mi>n</mi></msub><mo>=</mo><mi>m</mi><mi>a</mi><msubsup><mi>x</mi><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r_n = max_{i=1}^{n}(p_i, r_{n-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod_recursion_2</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            res = <span class="built_in">max</span>(res, p[i] + cut_rod_recursion_1(p, n-i))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><ul><li><strong>动态规划 - 自下而上</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod_dp</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    r = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            res = <span class="built_in">max</span>(res, p[j] + r[i - j])</span><br><span class="line">        r.append(res)</span><br><span class="line">    <span class="keyword">return</span> r[n]</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归-自上而下</span></span><br><span class="line"><span class="comment"># 时间复杂度：O(2^n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态规划-自下而上</span></span><br><span class="line"><span class="comment"># 时间复杂度：O(n^2)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>最优解基础上 — 输出切分方案</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod_extend</span>(<span class="params">p, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :return: 最优切割价格，左段（!=0）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    r = [<span class="number">0</span>]</span><br><span class="line">    s = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">        res_r = <span class="number">0</span> <span class="comment"># 价格的最大值</span></span><br><span class="line">        res_s = <span class="number">0</span> <span class="comment"># 价格最大值对应方案的左边（不切分部分的长度）</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[j] + r[i-j] &gt; res_r:</span><br><span class="line">                res_r = p[j] + r[i-j]</span><br><span class="line">                res_s = j</span><br><span class="line">        r.append(res_r)</span><br><span class="line">        s.append(res_s)</span><br><span class="line">    <span class="keyword">return</span> r[n], s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut_rod_solution</span>(<span class="params">p,n</span>):</span></span><br><span class="line">    r,s = cut_rod_extend(p, n)</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        ans.append(s[n])</span><br><span class="line">        n -= s[n]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ret = cut_rod_solution(p, <span class="number">5</span>)</span><br><span class="line">    print(ret) <span class="comment"># [2, 3]</span></span><br></pre></td></tr></table></figure><h4 id=""><a class="markdownIt-Anchor" href="#"></a> </h4><h4 id="2-最长公共子序列"><a class="markdownIt-Anchor" href="#2-最长公共子序列"></a> 2. 最长公共子序列</h4><p><strong>子序列</strong>：一个序列的子序列是在该序列<strong>不改变原序列顺序</strong> 的情况下 从序列中 <strong>删去若干元素</strong>后得到的序列（<strong>不连续</strong>）</p><p>​例：“ABCD”和“BDF”都是“ABCDEFG”的子序列</p><p><strong>子串</strong>： 指一个字符串删掉其部分前缀和后缀（也可以不删）后形成的字符串。（<strong>连续性</strong>）</p><p><strong>应用场景</strong>：字符串相似度比对，基因工程比对</p><p>最长公共子序列问题（LCS）问题：给定两个序列X和Y，求X和Y长度最大的公共子序列</p><p>​例：X = “ABBCBDE”  Y=“DBBCDB”  LCS(X,Y) = “BBCD”</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609298075819.png" alt="1609298075819" /></p><p><strong>递推式</strong>：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mspace width="1em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mi>i</mi><mo>=</mo><mn>0</mn><mtext>  </mtext><mi mathvariant="normal">或</mi><mtext>  </mtext><mi>j</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mspace width="2em"/><mspace width="2em"/><mspace width="2em"/><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>&gt;</mo><mn>0</mn><mtext>  </mtext><mi mathvariant="normal">且</mi><mtext>  </mtext><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">≠</mi><msub><mi>y</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mtext>  </mtext><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mspace width="2em"/><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>&gt;</mo><mn>0</mn><mtext>  </mtext><mi mathvariant="normal">且</mi><mtext>  </mtext><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">≠</mi><msub><mi>y</mi><mi>i</mi></msub></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">c[i,j] = \begin{cases} 0   \quad\qquad\qquad\qquad\qquad\qquad\qquad i=0\;或\;j=0\\ c[i-1,j-1] + 1             \qquad\qquad\qquad i,j&gt;0 \; 且 \; x_i\neq y_i\\max(c[i,j-1],\;c[i-1,j])   \qquad i,j&gt;0 \;且 \; x_i\neq y_i\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">或</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">且</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord cjk_fallback">且</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>代码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求X和Y长度最大的公共子序列的 长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs_length</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 序列1</span></span><br><span class="line"><span class="string">    :param y: 序列2</span></span><br><span class="line"><span class="string">    :return: 最大公共子序列长度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i-<span class="number">1</span>] == y[j-<span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c[i][j] = <span class="built_in">max</span>(c[i-<span class="number">1</span>][j], c[i][j-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> c[m][n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求序列 - 回溯</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 序列1</span></span><br><span class="line"><span class="string">    :param y: 序列2</span></span><br><span class="line"><span class="string">    :return: 最大公共子序列长度; 箭头匹配</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    m = <span class="built_in">len</span>(x)</span><br><span class="line">    n = <span class="built_in">len</span>(y)</span><br><span class="line">    c = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    b = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]  <span class="comment"># 指箭头 1左上方 2上方 3左方</span></span><br><span class="line">    <span class="comment"># b = [[&quot;&quot; for _ in range(n + 1)] for _ in range(m + 1)]  # 指箭头 1左上方 2上方 3左方</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i - <span class="number">1</span>] == y[j - <span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                b[i][j] = <span class="number">1</span></span><br><span class="line">                <span class="comment"># b[i][j] = &quot;↖&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> c[i - <span class="number">1</span>][j] &gt; c[i][j - <span class="number">1</span>]:</span><br><span class="line">                c[i][j] = c[i - <span class="number">1</span>][j]</span><br><span class="line">                b[i][j] = <span class="number">2</span></span><br><span class="line">                <span class="comment"># b[i][j] = &quot;↑&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c[i][j] = c[i][j - <span class="number">1</span>]</span><br><span class="line">                b[i][j] = <span class="number">3</span></span><br><span class="line">                <span class="comment"># b[i][j] = &quot;←&quot;</span></span><br><span class="line">    <span class="keyword">return</span> c[m][n], b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs_trackback</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param x: 序列1</span></span><br><span class="line"><span class="string">    :param y: 序列2</span></span><br><span class="line"><span class="string">    :return: 最大公共子序列（其中一种，最长可能有多个）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    c, b = lcs(x, y)</span><br><span class="line">    i = <span class="built_in">len</span>(x)</span><br><span class="line">    j = <span class="built_in">len</span>(y)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> i&gt;<span class="number">0</span> <span class="keyword">and</span> j&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b[i][j] == <span class="number">1</span>: <span class="comment"># # 来自左上方—— 匹配</span></span><br><span class="line">            res.append(x[i-<span class="number">1</span>])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> b[i][j] == <span class="number">2</span>: <span class="comment"># 来自上方——不匹配</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 来自左方——不匹配</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="built_in">reversed</span>(res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    x = <span class="string">&quot;ABBCBDE&quot;</span></span><br><span class="line">    y = <span class="string">&quot;DBBCDB&quot;</span></span><br><span class="line">    <span class="comment"># ret = lcs_length(x, y) # 4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># c, b = lcs(x, y)</span></span><br><span class="line">    <span class="comment"># for _ in b:</span></span><br><span class="line">    <span class="comment">#     print(_) </span></span><br><span class="line"></span><br><span class="line">    ret = lcs_trackback(x,y)</span><br><span class="line">    print(ret) <span class="comment"># BBCD</span></span><br></pre></td></tr></table></figure><h2 id="3-欧几里得算法"><a class="markdownIt-Anchor" href="#3-欧几里得算法"></a> 3. 欧几里得算法</h2><h3 id="最大公约数"><a class="markdownIt-Anchor" href="#最大公约数"></a> 最大公约数</h3><p>约数：如果整数a能被整数b整除，那么a叫做b的倍数，b叫做a的约数</p><p>最大公约数：给定两个整数a,b，两个数的所有公共公约数中的最大值即为最大公约数</p><p><strong>计算两个数的最大公约数</strong>：</p><ul><li><p>欧几里得：辗转相除法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gcd(a,b) = gcd(b, a mod b)</span><br><span class="line"></span><br><span class="line">gcd(<span class="number">60</span>, <span class="number">21</span>) = gcd(<span class="number">21</span>, <span class="number">18</span>) = gcb(<span class="number">3</span>, <span class="number">0</span>) = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd2</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">while</span> b&gt;<span class="number">0</span>:</span><br><span class="line">        r = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = r</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure></li><li><p>《九章算术》：更相减损术</p></li></ul><h2 id="4-rsa算法"><a class="markdownIt-Anchor" href="#4-rsa算法"></a> 4. RSA算法</h2><h3 id="密码与加密"><a class="markdownIt-Anchor" href="#密码与加密"></a> 密码与加密</h3><ul><li>传统密码：加密算法是秘密的</li><li>现代密码系统：加密算法是公开的，密钥是秘密的<ul><li>对称加密</li><li>非对称加密</li></ul></li></ul><h3 id="rsa加密算法非对称加密系统"><a class="markdownIt-Anchor" href="#rsa加密算法非对称加密系统"></a> RSA加密算法（非对称加密系统）：</h3><ul><li>公钥：用来加密，是公开的</li><li>私钥：用来解密，是私有的</li></ul><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609343082421.png" alt="1609343082421" /></p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609343320418.png" alt="1609343320418" /></p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609343689732.png" alt="1609343689732" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-贪心算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-贪心算法&quot;&gt;&lt;/a&gt; 1. 贪心算法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。</summary>
      
    
    
    
    <category term="算法和数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>1 查找和排序</title>
    <link href="http://example.com/2021/01/18/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F/"/>
    <id>http://example.com/2021/01/18/%E7%AE%97%E6%B3%95_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E6%9F%A5%E6%89%BE%E5%92%8C%E6%8E%92%E5%BA%8F/</id>
    <published>2021-01-18T14:40:46.308Z</published>
    <updated>2021-01-18T15:17:23.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h2><h3 id="汉诺塔问题"><a class="markdownIt-Anchor" href="#汉诺塔问题"></a> 汉诺塔问题</h3><h2 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h2><h3 id="顺序查找线性查找"><a class="markdownIt-Anchor" href="#顺序查找线性查找"></a> 顺序查找（线性查找）</h3><p><strong>定义</strong>：从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索道列表最后一个元素为止</p><p><strong>时间复杂度</strong>：O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_search</span>(<span class="params">li, val</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> li[i] == val:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="二分查找"><a class="markdownIt-Anchor" href="#二分查找"></a> 二分查找</h3><p>条件：有序列表</p><p><strong>时间复杂度</strong>：O(logn)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># li为有序列表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">li, val</span>):</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li) - <span class="number">1</span>    </span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &lt; val: <span class="comment"># 右侧查找</span></span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3><h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2><p><strong>常见排序算法</strong></p><table><thead><tr><th>简单排序</th><th>高效排序</th><th>其他</th></tr></thead><tbody><tr><td>冒泡排序</td><td>快速排序</td><td>希尔排序</td></tr><tr><td>选择排序</td><td>堆排序</td><td>计数排序</td></tr><tr><td>插入排序</td><td>归并排序</td><td>基数排序</td></tr></tbody></table><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608792169628.png" alt="1608792169628" /></p><p><strong>注</strong>：</p><p>​稳定的排序：冒泡排序、插入排序(摸牌)、归并排序</p><p>​稳定性：挨个移动位置的都是稳定，不挨个换的不稳定</p><p><strong>高效排序</strong></p><p>三种算法的时间复杂度都是 O(n*logn)</p><ul><li>一般情况下，就运行时间而言：<ul><li>快速排序 &lt; 归并排序 &lt; 堆排序</li></ul></li><li>三种算法缺点：<ul><li>快速排序：极端情况下排序效率低</li><li>归并排序：需要额外的内存开销</li><li>堆排序：在快的排序算法中相对较慢</li></ul></li></ul><h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h3><p><strong>定义</strong>：列表每2个相邻的数，如果前面比后面大，则两数交换位置</p><p><strong>特点</strong>：一趟排序，无序区减少1个数，有序区增加一个数</p><ul><li>递增列表：一趟向队尾冒一个大值（趟数↑ 值↓）</li></ul><p><strong>时间复杂度</strong>：O(n^2)</p><p><strong>注</strong>：可优化</p><ol><li>因每趟比较好，末尾有序数+1，所以下一次可少比较一位：<code>j =&gt; range(len(li)-i-1)</code></li><li>设立 <code>flag=False</code> 若该趟比较后，列表排序位置不变，可直接进入下一次</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li) - <span class="number">1</span>): <span class="comment"># 第i趟</span></span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>): <span class="comment"># 下标j做比较(指针)</span></span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h3><ol><li>循环遍历一次，取得最小数放第一位（有序区）</li><li>再从无序区取得最小数，放第2位。。。以此类推</li></ol><p><strong>时间复杂度</strong>：O(n^2)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)): <span class="comment"># 下标0~8i</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(li)): <span class="comment"># 无序区</span></span><br><span class="line">            tmp = li[j]</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[i]:</span><br><span class="line">                li[j] = li[i]</span><br><span class="line">                li[i] = tmp</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优化<ul><li>由于第7次比较时，已完成最后一次交换（可省去一轮）</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>): <span class="comment"># 下标0~8i</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(li)): <span class="comment"># 无序区</span></span><br><span class="line">            <span class="comment"># tmp = li[j]</span></span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[i]:</span><br><span class="line">                li[j], li[i] = li[i],li[j]</span><br><span class="line">             </span><br></pre></td></tr></table></figure><h3 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h3><p>扑克插牌，每摸一张牌，和手里的牌作比较：小的往前放，大的向后放</p><ul><li>空间复杂度：O(n^2)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   手牌初始：0</span></span><br><span class="line"><span class="string">   摸牌 1~8 次</span></span><br><span class="line"><span class="string">   比较手牌：</span></span><br><span class="line"><span class="string">       比手牌小，左移</span></span><br><span class="line"><span class="string">       和次牌比-小 左移</span></span><br><span class="line"><span class="string">       比手牌大，放右</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   关系：</span></span><br><span class="line"><span class="string">       无序区：len(li) -i</span></span><br><span class="line"><span class="string">       有序区(0~8)：i - 1 </span></span><br><span class="line"><span class="string">       指针j = i - 1</span></span><br><span class="line"><span class="string">   &quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">       j = i - <span class="number">1</span></span><br><span class="line">       my_turn = li[i]</span><br><span class="line">       <span class="keyword">while</span> my_turn &lt; li[j] <span class="keyword">and</span> j&gt;=<span class="number">0</span> :</span><br><span class="line">           li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">           li[j] = my_turn <span class="comment"># 优化：可以和else合并</span></span><br><span class="line">           j -= <span class="number">1</span>            </span><br><span class="line">       <span class="keyword">else</span>: <span class="comment"># my_turn &gt; li[j]</span></span><br><span class="line">           li[j+<span class="number">1</span>] = my_turn</span><br></pre></td></tr></table></figure><ul><li>优化版</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)): <span class="comment"># 摸牌次数 共8次</span></span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - <span class="number">1</span> <span class="comment"># 已有的手牌（有序）</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp &lt; li[j]: <span class="comment"># 摸的牌比手中的小，(朝左)交换位置</span></span><br><span class="line">            li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">            j = j - <span class="number">1</span> <span class="comment"># 摸牌 和 此位的牌比</span></span><br><span class="line">        li[j+<span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h3><ol><li><p>取第一个元素p，循环遍历比较，使p归位置</p></li><li><p>取p两端 各和p比较 ，排序：左边都比p小，右边都比p大</p></li><li><p>递归</p></li></ol><p><strong>时间复杂度</strong>：O(n*logn)  (因涉及到递归，不严谨推导)</p><p><strong>缺点</strong>：</p><ol><li><p>递归耗费系统资源</p></li><li><p>最坏情况：(倒叙列表)</p><p>[9, 8, 7, 6, 5, 4, 3, 2, 1] 每次移动一位</p><p>解决办法：随机找一个数和第一个数交换</p></li></ol><ul><li>快速排序 - 框架</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">data, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        mid = partition(data, left, right) <span class="comment"># 归位</span></span><br><span class="line">        quick_sort(data, left, mid-<span class="number">1</span>)</span><br><span class="line">        quick_sort(data, mid+<span class="number">1</span>, right)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    归位</span></span><br><span class="line"><span class="string">    :param li:</span></span><br><span class="line"><span class="string">    :param left: 左指针</span></span><br><span class="line"><span class="string">    :param right: 右指针</span></span><br><span class="line"><span class="string">    :return: 归位后p的下标</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    tmp = li[left]</span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= tmp:  <span class="comment"># 从右找比tmp小的数</span></span><br><span class="line">            right -= <span class="number">1</span>  <span class="comment"># 往左走</span></span><br><span class="line">        li[left] = li[right] <span class="comment"># 找到后，填补空位（左）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= tmp:</span><br><span class="line">            left += <span class="number">1</span>       </span><br><span class="line">        li[right] = li[left] <span class="comment"># 找到后，填补空位（右）</span></span><br><span class="line"></span><br><span class="line">    li[left] = tmp  <span class="comment"># 循环终止，left=right</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h3><h3 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h3><p>python内部<code>sort()</code>方法基于归并排序</p><p><strong>特点</strong></p><ol><li>分解 =&gt; 有序</li><li>归并（需用新列表储存）</li></ol><p><strong>步骤</strong>：</p><ol><li>分解：将列表越分越小，直至分成一个元素。<ul><li>终止条件：一个元素是有序的</li></ul></li><li>合并：将两个有序列表归并，列表越来越大。</li></ol><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608789980609.png" alt="1608789980609" /></p><p><strong>什么是归并</strong>？</p><p>假设列表中分为<strong>两段有序</strong>，如何将其合并成一个有序列表</p><p><strong>归并(merge)</strong>：左右两段 分别取出 元素进行比较 (从左至右取出)，小的数先出来，</p><p><img src="C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608788268837.png" alt="1608788268837" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">li, low, mid, high</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    合并（对有序的左右两段 归并）</span></span><br><span class="line"><span class="string">    :return: 新的 有序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line">    ltmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:  <span class="comment"># 只要左右两边都有数</span></span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            ltmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ltmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(ltmp)</span></span><br><span class="line">    <span class="comment"># 执行完以上代码，有一端没有数了</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        ltmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        ltmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high + <span class="number">1</span>] = ltmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    归并排序</span></span><br><span class="line"><span class="string">    1. 分解（递归）</span></span><br><span class="line"><span class="string">    2. 归并</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 至少2个元素</span></span><br><span class="line">        <span class="comment"># 分解</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        merge_sort(li, low, mid)</span><br><span class="line">        merge_sort(li, mid + <span class="number">1</span>, high)</span><br><span class="line">        <span class="comment"># 合并</span></span><br><span class="line">        merge(li, low, mid, high)</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a class="markdownIt-Anchor" href="#希尔排序"></a> 希尔排序</h3><p><strong>定义</strong>：是一种分组插入排序算法（插入排序的变形）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">注：</span></span><br><span class="line"><span class="string">gap对半分组，为希尔排序的一种</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">希尔排序按gap区分，可通过优化gap序列，来提升时间复杂度</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ol><li><p>分组：再每趟基础上分组</p><ul><li>d1 = n//2</li><li>d2 = d1/2</li><li>d3 = d2/2</li><li>…</li><li>最后一趟：只有一个元素</li></ul></li><li><p>排序：</p><ul><li><p><strong>每趟</strong>并不使得某些元素有序，而是使整体数据越来越<strong>接近有序</strong>；</p></li><li><p><strong>最后</strong>一趟排序使得<strong>所有数据有序</strong></p></li></ul></li></ol><p><strong>时间复杂度</strong>：</p><ol><li>希尔排序的运行效率有gap序列决定，不同序列分组，有不一样的结果，较为复杂</li><li>效率：低于堆排序</li></ol><p>​</p><p>分组 &amp; 排序</p><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=478950433,1945325674&amp;fm=11&amp;gp=0.jpg" alt="img" /></p><ul><li>插入排序变形版</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort_gap</span>(<span class="params">li, gap</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;分组 + 插入排序&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(li)):</span><br><span class="line">        tmp = li[i]</span><br><span class="line">        j = i - gap</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; tmp:</span><br><span class="line">            li[j + gap] = li[j]</span><br><span class="line">            j -= gap  <span class="comment"># 与分到的组中的数作比较 gap：组间隔距离</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            li[j + gap] = tmp</span><br><span class="line">        print(li)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;希尔排序&quot;&quot;&quot;</span></span><br><span class="line">    d = <span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt;= <span class="number">1</span>:</span><br><span class="line">        insert_sort_gap(li, d)</span><br><span class="line">        d //= <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>整合版</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    gap = <span class="built_in">len</span>(li) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(li)):</span><br><span class="line">            tmp = li[i]</span><br><span class="line">            j = i - gap</span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> tmp &lt; li[j]:</span><br><span class="line">                li[j+gap] = li[j]</span><br><span class="line">                j -= gap</span><br><span class="line">            li[j+gap] = tmp</span><br><span class="line">        gap /= <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="计数排序"><a class="markdownIt-Anchor" href="#计数排序"></a> 计数排序</h3><p>对列表进行排序，已知列表中的数范围都在 0~100 之间。设计时间复杂度为 O(n) 的算法</p><p><strong>前提条件</strong>：已知列表中的数范围</p><p><strong>时间复杂度</strong>：O(n)</p><p>​ * 快于python的sort(O*(nlogn))排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_sort</span>(<span class="params">li, max_count=<span class="number">100</span></span>):</span></span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_count+<span class="number">1</span>)] </span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:  <span class="comment"># O(n) </span></span><br><span class="line">        count[val] += <span class="number">1</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> ind, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(count): <span class="comment"># O(n) </span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(val):</span><br><span class="line">            li.append(ind)</span><br></pre></td></tr></table></figure><h3 id="桶排序"><a class="markdownIt-Anchor" href="#桶排序"></a> 桶排序</h3><h3 id="基数排序"><a class="markdownIt-Anchor" href="#基数排序"></a> 基数排序</h3><h2 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h2><ul><li>设置递归最大深度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">10000</span>) </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;递归&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#递归&quot;&gt;&lt;/a&gt; 递归&lt;/h2&gt;
&lt;h3 id=&quot;汉诺塔问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#汉诺塔问题&quot;&gt;&lt;/a&gt; 汉诺塔问题&lt;/h3&gt;
&lt;</summary>
      
    
    
    
    <category term="算法和数据结构" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>9-2 SQLAlchemy</title>
    <link href="http://example.com/2021/01/18/flask/9-2%20%E6%80%BB%E7%BB%93_SQLAlchemy/"/>
    <id>http://example.com/2021/01/18/flask/9-2%20%E6%80%BB%E7%BB%93_SQLAlchemy/</id>
    <published>2021-01-18T11:39:27.135Z</published>
    <updated>2021-01-19T08:30:50.240Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="1介绍"><a class="markdownIt-Anchor" href="#1介绍"></a> 1.介绍</h2><p>SQLAlchemy是一个基于Python实现的ORM框架。该框架建立在 DB API之上，使用关系对象映射进行数据库操作，简言之便是：将类和对象转换成SQL，然后使用数据API执行SQL并获取执行结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install sqlalchemy</span><br></pre></td></tr></table></figure><p>组成部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Engine，框架的引擎</span><br><span class="line">Connection Pooling ，数据库连接池</span><br><span class="line">Dialect，选择连接数据库的DB API种类</span><br><span class="line">Schema/Types，架构和类型</span><br><span class="line">SQL Exprression Language，SQL表达式语言</span><br></pre></td></tr></table></figure><p>SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MySQL-Python</span><br><span class="line">    mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line">    </span><br><span class="line">pymysql</span><br><span class="line">    mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line">    </span><br><span class="line">MySQL-Connector</span><br><span class="line">    mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line">    </span><br><span class="line">cx_Oracle</span><br><span class="line">    oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...]</span><br><span class="line">    </span><br><span class="line">更多：http://docs.sqlalchemy.org/en/latest/dialects/index.html</span><br></pre></td></tr></table></figure><p><strong>django中如何反向生成models</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb &gt; app/models.py</span><br></pre></td></tr></table></figure><h2 id="2简单使用能创建表删除表不能修改表"><a class="markdownIt-Anchor" href="#2简单使用能创建表删除表不能修改表"></a> 2.简单使用（能创建表，删除表，不能修改表）</h2><p>修改表：在数据库添加字段，类对应上</p><p>1执行原生sql（不常用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.base <span class="keyword">import</span> Engine</span><br><span class="line"></span><br><span class="line">engine = create_engine(</span><br><span class="line">    <span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/test?charset=utf8&quot;</span>,</span><br><span class="line">    max_overflow=<span class="number">0</span>,  <span class="comment"># 超过连接池大小外最多创建的连接</span></span><br><span class="line">    pool_size=<span class="number">5</span>,  <span class="comment"># 连接池大小</span></span><br><span class="line">    pool_timeout=<span class="number">30</span>,  <span class="comment"># 池中没有线程最多等待的时间，否则报错</span></span><br><span class="line">    pool_recycle=-<span class="number">1</span>  <span class="comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">arg</span>):</span></span><br><span class="line">    conn = engine.raw_connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(</span><br><span class="line">        <span class="string">&quot;select * from app01_book&quot;</span></span><br><span class="line">    )</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    print(result)</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    t = threading.Thread(target=task, args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>2 orm使用</p><p><a href="http://models.py">models.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, Text, ForeignKey, DateTime, UniqueConstraint, Index</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span>  <span class="comment"># 数据库表名称</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)  <span class="comment"># id 主键</span></span><br><span class="line">    name = Column(String(<span class="number">32</span>), index=<span class="literal">True</span>, nullable=<span class="literal">False</span>)  <span class="comment"># name列，索引，不可为空</span></span><br><span class="line">    <span class="comment"># email = Column(String(32), unique=True)</span></span><br><span class="line">    <span class="comment">#datetime.datetime.now不能加括号，加了括号，以后永远是当前时间</span></span><br><span class="line">    <span class="comment"># ctime = Column(DateTime, default=datetime.datetime.now)</span></span><br><span class="line">    <span class="comment"># extra = Column(Text, nullable=True)</span></span><br><span class="line"></span><br><span class="line">    __table_args__ = (</span><br><span class="line">        <span class="comment"># UniqueConstraint(&#x27;id&#x27;, &#x27;name&#x27;, name=&#x27;uix_id_name&#x27;), #联合唯一</span></span><br><span class="line">        <span class="comment"># Index(&#x27;ix_id_name&#x27;, &#x27;name&#x27;, &#x27;email&#x27;), #索引</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据类创建数据库表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    engine = create_engine(</span><br><span class="line">        <span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa?charset=utf8&quot;</span>,</span><br><span class="line">        max_overflow=<span class="number">0</span>,  <span class="comment"># 超过连接池大小外最多创建的连接</span></span><br><span class="line">        pool_size=<span class="number">5</span>,  <span class="comment"># 连接池大小</span></span><br><span class="line">        pool_timeout=<span class="number">30</span>,  <span class="comment"># 池中没有线程最多等待的时间，否则报错</span></span><br><span class="line">        pool_recycle=-<span class="number">1</span>  <span class="comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据类删除数据库表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    engine = create_engine(</span><br><span class="line">        <span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa?charset=utf8&quot;</span>,</span><br><span class="line">        max_overflow=<span class="number">0</span>,  <span class="comment"># 超过连接池大小外最多创建的连接</span></span><br><span class="line">        pool_size=<span class="number">5</span>,  <span class="comment"># 连接池大小</span></span><br><span class="line">        pool_timeout=<span class="number">30</span>,  <span class="comment"># 池中没有线程最多等待的时间，否则报错</span></span><br><span class="line">        pool_recycle=-<span class="number">1</span>  <span class="comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.drop_all(engine)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># drop_db()</span></span><br><span class="line">    init_db()</span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Users</span><br><span class="line"><span class="comment">#&quot;mysql+pymysql://root@127.0.0.1:3306/aaa&quot;</span></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Connection = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次执行数据库操作时，都需要创建一个Connection</span></span><br><span class="line">con = Connection()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ############# 执行ORM操作 #############</span></span><br><span class="line">obj1 = Users(name=<span class="string">&quot;lqz&quot;</span>)</span><br><span class="line">con.add(obj1)</span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">con.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭session，其实是将连接放回连接池</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure><h2 id="3一对多关系"><a class="markdownIt-Anchor" href="#3一对多关系"></a> 3.一对多关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hobby</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;hobby&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    caption = Column(String(<span class="number">50</span>), default=<span class="string">&#x27;篮球&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;person&#x27;</span></span><br><span class="line">    nid = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>), index=<span class="literal">True</span>, nullable=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># hobby指的是tablename而不是类名，uselist=False</span></span><br><span class="line">    hobby_id = Column(Integer, ForeignKey(<span class="string">&quot;hobby.id&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 跟数据库无关，不会新增字段，只用于快速链表操作</span></span><br><span class="line">    <span class="comment"># 类名，backref用于反向查询</span></span><br><span class="line">    hobby=relationship(<span class="string">&#x27;Hobby&#x27;</span>,backref=<span class="string">&#x27;pers&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4多对多关系"><a class="markdownIt-Anchor" href="#4多对多关系"></a> 4.多对多关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy2Girl</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;boy2girl&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    girl_id = Column(Integer, ForeignKey(<span class="string">&#x27;girl.id&#x27;</span>))</span><br><span class="line">    boy_id = Column(Integer, ForeignKey(<span class="string">&#x27;boy.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;boy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    hostname = Column(String(<span class="number">64</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 与生成表结构无关，仅用于查询方便,放在哪个单表中都可以</span></span><br><span class="line">    servers = relationship(<span class="string">&#x27;Girl&#x27;</span>, secondary=<span class="string">&#x27;boy2girl&#x27;</span>, backref=<span class="string">&#x27;boys&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="5操作数据表"><a class="markdownIt-Anchor" href="#5操作数据表"></a> 5.操作数据表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Users</span><br><span class="line">  </span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 每次执行数据库操作时，都需要创建一个session</span></span><br><span class="line">session = Session()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># ############# 执行ORM操作 #############</span></span><br><span class="line">obj1 = Users(name=<span class="string">&quot;lqz&quot;</span>)</span><br><span class="line">session.add(obj1)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 关闭session</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="6基于scoped_session实现线程安全"><a class="markdownIt-Anchor" href="#6基于scoped_session实现线程安全"></a> 6.基于scoped_session实现线程安全</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> scoped_session</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Users</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 线程安全，基于本地线程实现每个线程用同一个session</span></span><br><span class="line"><span class="string"># 特殊的：scoped_session中有原来方法的Session中的一下方法：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">public_methods = (</span></span><br><span class="line"><span class="string">    &#x27;__contains__&#x27;, &#x27;__iter__&#x27;, &#x27;add&#x27;, &#x27;add_all&#x27;, &#x27;begin&#x27;, &#x27;begin_nested&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;close&#x27;, &#x27;commit&#x27;, &#x27;connection&#x27;, &#x27;delete&#x27;, &#x27;execute&#x27;, &#x27;expire&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;expire_all&#x27;, &#x27;expunge&#x27;, &#x27;expunge_all&#x27;, &#x27;flush&#x27;, &#x27;get_bind&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;is_modified&#x27;, &#x27;bulk_save_objects&#x27;, &#x27;bulk_insert_mappings&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;bulk_update_mappings&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;merge&#x27;, &#x27;query&#x27;, &#x27;refresh&#x27;, &#x27;rollback&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;scalar&#x27;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#scoped_session类并没有继承Session,但是却又它的所有方法</span></span><br><span class="line">session = scoped_session(Session)</span><br><span class="line"><span class="comment"># ############# 执行ORM操作 #############</span></span><br><span class="line">obj1 = Users(name=<span class="string">&quot;alex1&quot;</span>)</span><br><span class="line">session.add(obj1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 关闭session</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="7基本增删查改"><a class="markdownIt-Anchor" href="#7基本增删查改"></a> 7.基本增删查改</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ################ 添加 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">obj1 = Users(name=&quot;wupeiqi&quot;)</span></span><br><span class="line"><span class="string">session.add(obj1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session.add_all([</span></span><br><span class="line"><span class="string">    Users(name=&quot;lqz&quot;),</span></span><br><span class="line"><span class="string">    Users(name=&quot;egon&quot;),</span></span><br><span class="line"><span class="string">    Hosts(name=&quot;c1.com&quot;),</span></span><br><span class="line"><span class="string">])</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ################ 删除 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 2).delete()</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ################ 修改 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#传字典</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 0).update(&#123;&quot;name&quot; : &quot;lqz&quot;&#125;)</span></span><br><span class="line"><span class="string">#类似于django的F查询</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 0).update(&#123;Users.name: Users.name + &quot;099&quot;&#125;, synchronize_session=False)</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 0).update(&#123;&quot;age&quot;: Users.age + 1&#125;, synchronize_session=&quot;evaluate&quot;)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ################ 查询 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">r1 = session.query(Users).all()</span></span><br><span class="line"><span class="string">#只取age列，把name重命名为xx</span></span><br><span class="line"><span class="string">r2 = session.query(Users.name.label(&#x27;xx&#x27;), Users.age).all()</span></span><br><span class="line"><span class="string">#filter传的是表达式，filter_by传的是参数</span></span><br><span class="line"><span class="string">r3 = session.query(Users).filter(Users.name == &quot;lqz&quot;).all()</span></span><br><span class="line"><span class="string">r4 = session.query(Users).filter_by(name=&#x27;lqz&#x27;).all()</span></span><br><span class="line"><span class="string">r5 = session.query(Users).filter_by(name=&#x27;lqz&#x27;).first()</span></span><br><span class="line"><span class="string">#:value 和:name 相当于占位符，用params传参数</span></span><br><span class="line"><span class="string">r6 = session.query(Users).filter(text(&quot;id&lt;:value and name=:name&quot;)).params(value=224, name=&#x27;fred&#x27;).order_by(Users.id).all()</span></span><br><span class="line"><span class="string">#自定义查询sql</span></span><br><span class="line"><span class="string">r7 = session.query(Users).from_statement(text(&quot;SELECT * FROM users where name=:name&quot;)).params(name=&#x27;ed&#x27;).all()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增，删，改都要commit()</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="8常用操作"><a class="markdownIt-Anchor" href="#8常用操作"></a> 8.常用操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　条件</span></span><br><span class="line">ret = session.query(Users).filter_by(name=<span class="string">&#x27;lqz&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#表达式，and条件连接</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> &gt; <span class="number">1</span>, Users.name == <span class="string">&#x27;eric&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span>.between(<span class="number">1</span>, <span class="number">3</span>), Users.name == <span class="string">&#x27;eric&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#注意下划线</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span>.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>])).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#~非，除。。外</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(~Users.<span class="built_in">id</span>.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>])).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#二次筛选</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span>.in_(session.query(Users.<span class="built_in">id</span>).filter_by(name=<span class="string">&#x27;eric&#x27;</span>))).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_, or_</span><br><span class="line"><span class="comment">#or_包裹的都是or条件，and_包裹的都是and条件</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(and_(Users.<span class="built_in">id</span> &gt; <span class="number">3</span>, Users.name == <span class="string">&#x27;eric&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(or_(Users.<span class="built_in">id</span> &lt; <span class="number">2</span>, Users.name == <span class="string">&#x27;eric&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(</span><br><span class="line">    or_(</span><br><span class="line">        Users.<span class="built_in">id</span> &lt; <span class="number">2</span>,</span><br><span class="line">        and_(Users.name == <span class="string">&#x27;eric&#x27;</span>, Users.<span class="built_in">id</span> &gt; <span class="number">3</span>),</span><br><span class="line">        Users.extra != <span class="string">&quot;&quot;</span></span><br><span class="line">    )).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符，以e开头，不以e开头</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.name.like(<span class="string">&#x27;e%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(~Users.name.like(<span class="string">&#x27;e%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制，用于分页，区间</span></span><br><span class="line">ret = session.query(Users)[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序，根据name降序排列（从大到小）</span></span><br><span class="line">ret = session.query(Users).order_by(Users.name.desc()).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#第一个条件重复后，再按第二个条件升序排</span></span><br><span class="line">ret = session.query(Users).order_by(Users.name.desc(), Users.<span class="built_in">id</span>.asc()).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">ret = session.query(Users).group_by(Users.extra).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#分组之后取最大id，id之和，最小id</span></span><br><span class="line">ret = session.query(</span><br><span class="line">    func.<span class="built_in">max</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">sum</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">min</span>(Users.<span class="built_in">id</span>)).group_by(Users.name).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#haviing筛选</span></span><br><span class="line">ret = session.query(</span><br><span class="line">    func.<span class="built_in">max</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">sum</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">min</span>(Users.<span class="built_in">id</span>)).group_by(Users.name).having(func.<span class="built_in">min</span>(Users.<span class="built_in">id</span>) &gt;<span class="number">2</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连表（默认用forinkey关联）</span></span><br><span class="line"></span><br><span class="line">ret = session.query(Users, Favor).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> == Favor.nid).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#join表，默认是inner join</span></span><br><span class="line">ret = session.query(Person).join(Favor).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#isouter=True 外连，表示Person left join Favor，没有右连接，反过来即可</span></span><br><span class="line">ret = session.query(Person).join(Favor, isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#打印原生sql</span></span><br><span class="line">aa=session.query(Person).join(Favor, isouter=<span class="literal">True</span>)</span><br><span class="line">print(aa)</span><br><span class="line"><span class="comment"># 自己指定on条件（连表条件）,第二个参数，支持on多个条件，用and_,同上</span></span><br><span class="line">ret = session.query(Person).join(Favor,Person.<span class="built_in">id</span>==Favor.<span class="built_in">id</span>, isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 组合（了解）UNION 操作符用于合并两个或多个 SELECT 语句的结果集</span></span><br><span class="line"><span class="comment">#union和union all的区别？</span></span><br><span class="line">q1 = session.query(Users.name).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> &gt; <span class="number">2</span>)</span><br><span class="line">q2 = session.query(Favor.caption).<span class="built_in">filter</span>(Favor.nid &lt; <span class="number">2</span>)</span><br><span class="line">ret = q1.union(q2).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">q1 = session.query(Users.name).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> &gt; <span class="number">2</span>)</span><br><span class="line">q2 = session.query(Favor.caption).<span class="built_in">filter</span>(Favor.nid &lt; <span class="number">2</span>)</span><br><span class="line">ret = q1.union_all(q2).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><h2 id="9执行原生sql"><a class="markdownIt-Anchor" href="#9执行原生sql"></a> 9.执行原生sql</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="comment"># cursor = session.execute(&#x27;select * from users&#x27;)</span></span><br><span class="line"><span class="comment"># result = cursor.fetchall()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">cursor = session.execute(<span class="string">&#x27;insert into users(name) values(:value)&#x27;</span>,params=&#123;<span class="string">&quot;value&quot;</span>:<span class="string">&#x27;lqz&#x27;</span>&#125;)</span><br><span class="line">session.commit()</span><br><span class="line">print(cursor.lastrowid)</span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="10一对多"><a class="markdownIt-Anchor" href="#10一对多"></a> 10.一对多</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts, Hobby, Person</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session.add_all([</span></span><br><span class="line"><span class="string">    Hobby(caption=&#x27;乒乓球&#x27;),</span></span><br><span class="line"><span class="string">    Hobby(caption=&#x27;羽毛球&#x27;),</span></span><br><span class="line"><span class="string">    Person(name=&#x27;张三&#x27;, hobby_id=3),</span></span><br><span class="line"><span class="string">    Person(name=&#x27;李四&#x27;, hobby_id=4),</span></span><br><span class="line"><span class="string">])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">person = Person(name=&#x27;张九&#x27;, hobby=Hobby(caption=&#x27;姑娘&#x27;))</span></span><br><span class="line"><span class="string">session.add(person)</span></span><br><span class="line"><span class="string">#添加二</span></span><br><span class="line"><span class="string">hb = Hobby(caption=&#x27;人妖&#x27;)</span></span><br><span class="line"><span class="string">hb.pers = [Person(name=&#x27;文飞&#x27;), Person(name=&#x27;博雅&#x27;)]</span></span><br><span class="line"><span class="string">session.add(hb)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship正向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Person).first()</span></span><br><span class="line"><span class="string">print(v.name)</span></span><br><span class="line"><span class="string">print(v.hobby.caption)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship反向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Hobby).first()</span></span><br><span class="line"><span class="string">print(v.caption)</span></span><br><span class="line"><span class="string">print(v.pers)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#方式一，自己链表</span></span><br><span class="line"><span class="comment"># person_list=session.query(models.Person.name,models.Hobby.caption).join(models.Hobby,isouter=True).all()</span></span><br><span class="line">person_list=session.query(models.Person,models.Hobby).join(models.Hobby,isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> person_list:</span><br><span class="line">    <span class="comment"># print(row.name,row.caption)</span></span><br><span class="line">    print(row[<span class="number">0</span>].name,row[<span class="number">1</span>].caption)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：通过relationship</span></span><br><span class="line"></span><br><span class="line">person_list=session.query(models.Person).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> person_list:</span><br><span class="line">    print(row.name,row.hobby.caption)</span><br><span class="line"><span class="comment">#查询喜欢姑娘的所有人</span></span><br><span class="line">obj=session.query(models.Hobby).<span class="built_in">filter</span>(models.Hobby.<span class="built_in">id</span>==<span class="number">1</span>).first()</span><br><span class="line">persons=obj.pers</span><br><span class="line">print(persons)</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="11多对多"><a class="markdownIt-Anchor" href="#11多对多"></a> 11.多对多</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts, Hobby, Person, Group, Server, Server2Group</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session.add_all([</span></span><br><span class="line"><span class="string">    Server(hostname=&#x27;c1.com&#x27;),</span></span><br><span class="line"><span class="string">    Server(hostname=&#x27;c2.com&#x27;),</span></span><br><span class="line"><span class="string">    Group(name=&#x27;A组&#x27;),</span></span><br><span class="line"><span class="string">    Group(name=&#x27;B组&#x27;),</span></span><br><span class="line"><span class="string">])</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s2g = Server2Group(server_id=1, group_id=1)</span></span><br><span class="line"><span class="string">session.add(s2g)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">gp = Group(name=&#x27;C组&#x27;)</span></span><br><span class="line"><span class="string">gp.servers = [Server(hostname=&#x27;c3.com&#x27;),Server(hostname=&#x27;c4.com&#x27;)]</span></span><br><span class="line"><span class="string">session.add(gp)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ser = Server(hostname=&#x27;c6.com&#x27;)</span></span><br><span class="line"><span class="string">ser.groups = [Group(name=&#x27;F组&#x27;),Group(name=&#x27;G组&#x27;)]</span></span><br><span class="line"><span class="string">session.add(ser)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship正向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Group).first()</span></span><br><span class="line"><span class="string">print(v.name)</span></span><br><span class="line"><span class="string">print(v.servers)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship反向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Server).first()</span></span><br><span class="line"><span class="string">print(v.hostname)</span></span><br><span class="line"><span class="string">print(v.groups)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="12其它"><a class="markdownIt-Anchor" href="#12其它"></a> 12.其它</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text, func</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts, Hobby, Person, Group, Server, Server2Group</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联子查询:correlate(Group)表示跟Group表做关联，as_scalar相当于对该sql加括号，用于放在后面当子查询</span></span><br><span class="line">subqry = session.query(func.count(Server.<span class="built_in">id</span>).label(<span class="string">&quot;sid&quot;</span>)).<span class="built_in">filter</span>(Server.<span class="built_in">id</span> == Group.<span class="built_in">id</span>).correlate(Group).as_scalar()</span><br><span class="line">result = session.query(Group.name, subqry)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT `group`.name AS group_name, (SELECT count(server.id) AS sid </span></span><br><span class="line"><span class="string">FROM server </span></span><br><span class="line"><span class="string">WHERE server.id = `group`.id) AS anon_1 </span></span><br><span class="line"><span class="string">FROM `group`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select * from tb where id in [select id from xxx];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select id,</span></span><br><span class="line"><span class="string">name,</span></span><br><span class="line"><span class="string">#必须保证此次查询只有一个值</span></span><br><span class="line"><span class="string">(select max(id) from xxx) as mid</span></span><br><span class="line"><span class="string">from tb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例如，第三个字段只能有一个值</span></span><br><span class="line"><span class="string">id name  mid</span></span><br><span class="line"><span class="string">1  lqz   1，2  不合理</span></span><br><span class="line"><span class="string">2  egon   2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">成绩表：</span></span><br><span class="line"><span class="string">id sid    cid    score</span></span><br><span class="line"><span class="string">1  1      物理      99 </span></span><br><span class="line"><span class="string">2  1      化学      88</span></span><br><span class="line"><span class="string">3  2      物理      95</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">学生表：</span></span><br><span class="line"><span class="string">id   name  每个学生总分数</span></span><br><span class="line"><span class="string">1     xx      88</span></span><br><span class="line"><span class="string">2     yy       77</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select id，name,</span></span><br><span class="line"><span class="string">(select avr(score) from 成绩表 where 成绩表.sid=学生表.id) as x</span></span><br><span class="line"><span class="string">from 学生表</span></span><br><span class="line"><span class="string">subqry = session.query(func.count(成绩表.scort).label(&quot;sc&quot;)).filter(学生表.id == 成绩表.sid).correlate(学生表).as_scalar()</span></span><br><span class="line"><span class="string">result = session.query(学生表.name, subqry)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原生SQL</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 查询</span></span><br><span class="line"><span class="string">cursor = session.execute(&#x27;select * from users&#x27;)</span></span><br><span class="line"><span class="string">result = cursor.fetchall()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 添加</span></span><br><span class="line"><span class="string">cursor = session.execute(&#x27;insert into users(name) values(:value)&#x27;,params=&#123;&quot;value&quot;:&#x27;wupeiqi&#x27;&#125;)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">print(cursor.lastrowid)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="13flask-sqlalchemy"><a class="markdownIt-Anchor" href="#13flask-sqlalchemy"></a> 13.Flask-SQLAlchemy</h2><p>flask和SQLAchemy的管理者，通过他把他们做连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy()</span><br><span class="line">- 包含配置</span><br><span class="line">- 包含ORM基类</span><br><span class="line">- 包含create_all</span><br><span class="line">- engine</span><br><span class="line">- 创建连接</span><br></pre></td></tr></table></figure><p>离线脚本，创建表</p><p>详见代码</p><p>flask-migrate<br />python3 <a href="http://manage.py">manage.py</a> db init 初始化：只执行一次</p><p>python3 <a href="http://manage.py">manage.py</a> db migrate 等同于 makemigartions<br />python3 <a href="http://manage.py">manage.py</a> db upgrade 等同于migrate</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;1介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1介绍&quot;&gt;&lt;/a&gt; 1.介绍&lt;/h2&gt;
&lt;p&gt;SQLAlchemy是一个基于Python实</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>9-1 Flask</title>
    <link href="http://example.com/2021/01/18/flask/9-1%20%E6%80%BB%E7%BB%93_flask/"/>
    <id>http://example.com/2021/01/18/flask/9-1%20%E6%80%BB%E7%BB%93_flask/</id>
    <published>2021-01-18T11:39:27.130Z</published>
    <updated>2021-01-19T08:30:45.014Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="0flask简介"><a class="markdownIt-Anchor" href="#0flask简介"></a> 0.Flask简介</h2><p>Flask是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架，对于Werkzeug本质是Socket服务端，其用于接收http请求并对请求进行预处理，然后触发Flask框架，开发人员基于Flask框架提供的功能对请求进行相应的处理，并返回给用户，如果要返回给用户复杂的内容时，需要借助jinja2模板来实现对模板的处理，即：将模板和数据进行渲染，将渲染后的字符串返回给用户浏览器。</p><p>“微”(micro) 并不表示你需要把整个 Web 应用塞进单个 Python 文件（虽然确实可以 ），也不意味着 Flask 在功能上有所欠缺。微框架中的“微”意味着 Flask 旨在保持核心简单而易于扩展。Flask 不会替你做出太多决策——比如使用何种数据库。而那些 Flask 所选择的——比如使用何种模板引擎——则很容易替换。除此之外的一切都由可由你掌握。如此，Flask 可以与您珠联璧合。</p><p>默认情况下，Flask 不包含数据库抽象层、表单验证，或是其它任何已有多种库可以胜任的功能。然而，Flask 支持用扩展来给应用添加这些功能，如同是 Flask 本身实现的一样。众多的扩展提供了数据库集成、表单验证、上传处理、各种各样的开放认证技术等功能。Flask 也许是“微小”的，但它已准备好在需求繁杂的生产环境中投入使用</p><h3 id="wsgiref"><a class="markdownIt-Anchor" href="#wsgiref"></a> wsgiref</h3><p>最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。</p><p>如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。</p><p>正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口协议来实现这样的服务器软件，让我们专心用Python编写Web业务。这个接口就是WSGI：Web Server Gateway Interface。而wsgiref模块就是python基于wsgi协议开发的服务模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mya</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    print(environ)</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">if</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data=f.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;login.html&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data=<span class="string">b&#x27;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [data]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    myserver = make_server(<span class="string">&#x27;&#x27;</span>, <span class="number">8011</span>, mya)</span><br><span class="line">    print(<span class="string">&#x27;监听8010&#x27;</span>)</span><br><span class="line">    myserver.serve_forever()</span><br><span class="line"></span><br><span class="line">wsgiref简单应用</span><br></pre></td></tr></table></figure><h2 id="1安装"><a class="markdownIt-Anchor" href="#1安装"></a> 1.安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure><h2 id="2werkzeug简介"><a class="markdownIt-Anchor" href="#2werkzeug简介"></a> 2.werkzeug简介</h2><p>Werkzeug是一个WSGI工具包，他可以作为一个Web框架的底层库。这里稍微说一下， werkzeug 不是一个web服务器，也不是一个web框架，而是一个工具包，官方的介绍说是一个 WSGI 工具包，它可以作为一个 Web 框架的底层库，因为它封装好了很多 Web 框架的东西，例如 Request，Response 等等</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> Request, Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@Request.application</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line">    run_simple(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">4000</span>, hello)</span><br></pre></td></tr></table></figure><h2 id="3flask快速使用"><a class="markdownIt-Anchor" href="#3flask快速使用"></a> 3.flask快速使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 实例化产生一个Flask对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 将 &#x27;/&#x27;和视图函数hello_workd的对应关系添加到路由中</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span><span class="comment"># 1. v=app.route(&#x27;/&#x27;) 2. v(hello_world)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run() <span class="comment"># 最终调用了run_simple()</span></span><br></pre></td></tr></table></figure><h3 id="案例登录显示用户信息"><a class="markdownIt-Anchor" href="#案例登录显示用户信息"></a> 案例：登录，显示用户信息</h3><p><a href="http://main.py">main.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,redirect,session,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;sdfsdfsdfsdf&#x27;</span></span><br><span class="line"></span><br><span class="line">USERS = &#123;</span><br><span class="line">    <span class="number">1</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;text&#x27;</span>:<span class="string">&quot;道路千万条&quot;</span>&#125;,</span><br><span class="line">    <span class="number">2</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">28</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;text&#x27;</span>:<span class="string">&quot;安全第一条&quot;</span>&#125;,</span><br><span class="line">    <span class="number">3</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;text&#x27;</span>:<span class="string">&quot;行车不规范&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/detail/&lt;int:nid&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">nid</span>):</span></span><br><span class="line">    user = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    info = USERS.get(nid)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;detail.html&#x27;</span>,info=info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    user = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        <span class="comment"># return redirect(&#x27;/login&#x27;)</span></span><br><span class="line">        url = url_for(<span class="string">&#x27;l1&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,user_dict=USERS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],endpoint=<span class="string">&#x27;l1&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># request.query_string</span></span><br><span class="line">        user = request.form.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        pwd = request.form.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&#x27;cxw&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            session[<span class="string">&#x27;user_info&#x27;</span>] = user</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,error=<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>detail.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>详细信息 &#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;info.text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% for k,v in user_dict.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v[&#x27;name&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.get(&#x27;name&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/detail/&#123;&#123;k&#125;&#125;&quot;</span>&gt;</span>查看详细<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span>&#123;&#123;error&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作业登录认证装饰器"><a class="markdownIt-Anchor" href="#作业登录认证装饰器"></a> 作业：登录认证装饰器</h3><p>-多个装饰器执行顺序</p><p>-反向查找的名称（endpoint），不允许重复</p><h2 id="4配置文件"><a class="markdownIt-Anchor" href="#4配置文件"></a> 4.配置文件</h2><p>flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;DEBUG&#x27;</span>:                                <span class="literal">False</span>  <span class="comment"># get_debug_flag(default=False),  是否开启Debug模式</span></span><br><span class="line">    <span class="string">&#x27;TESTING&#x27;</span>:                              <span class="literal">False</span>, <span class="comment"># 是否开启测试模式</span></span><br><span class="line">    <span class="string">&#x27;PROPAGATE_EXCEPTIONS&#x27;</span>:                 <span class="literal">None</span>,                          </span><br><span class="line">    <span class="string">&#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;</span>:        <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SECRET_KEY&#x27;</span>:                           <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>:           timedelta(days=<span class="number">31</span>),</span><br><span class="line">    <span class="string">&#x27;USE_X_SENDFILE&#x27;</span>:                       <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;LOGGER_NAME&#x27;</span>:                          <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;LOGGER_HANDLER_POLICY&#x27;</span>:               <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_NAME&#x27;</span>:                          <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;APPLICATION_ROOT&#x27;</span>:                     <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_NAME&#x27;</span>:                  <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_DOMAIN&#x27;</span>:                <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_PATH&#x27;</span>:                  <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_HTTPONLY&#x27;</span>:              <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_SECURE&#x27;</span>:                <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_REFRESH_EACH_REQUEST&#x27;</span>:         <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>:                   <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;</span>:            timedelta(hours=<span class="number">12</span>),</span><br><span class="line">    <span class="string">&#x27;TRAP_BAD_REQUEST_ERRORS&#x27;</span>:              <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;TRAP_HTTP_EXCEPTIONS&#x27;</span>:                 <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;EXPLAIN_TEMPLATE_LOADING&#x27;</span>:             <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;PREFERRED_URL_SCHEME&#x27;</span>:                 <span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;JSON_AS_ASCII&#x27;</span>:                        <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;JSON_SORT_KEYS&#x27;</span>:                       <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;</span>:          <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;JSONIFY_MIMETYPE&#x27;</span>:                     <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;TEMPLATES_AUTO_RELOAD&#x27;</span>:                <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;DEBUG&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">   PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...)</span><br></pre></td></tr></table></figure><h3 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过py文件配置</span></span><br><span class="line">app.config.from_pyfile(<span class="string">&quot;python文件名称&quot;</span>)</span><br><span class="line">如：</span><br><span class="line">settings.py</span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app.config.from_pyfile(<span class="string">&quot;settings.py&quot;</span>)</span><br><span class="line"><span class="comment">#通过环境变量配置</span></span><br><span class="line">app.config.from_envvar(<span class="string">&quot;环境变量名称&quot;</span>)</span><br><span class="line"><span class="comment">#app.config.from_pyfile(os.environ[&#x27;YOURAPPLICATION_SETTINGS&#x27;])</span></span><br><span class="line">环境变量的值为python文件名称名称，内部调用from_pyfile方法</span><br><span class="line"></span><br><span class="line">app.config.from_json(<span class="string">&quot;json文件名称&quot;</span>)</span><br><span class="line">JSON文件名称，必须是json格式，因为内部会执行json.loads</span><br><span class="line"></span><br><span class="line">app.config.from_mapping(&#123;<span class="string">&#x27;DEBUG&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">字典格式</span><br><span class="line"></span><br><span class="line">app.config.from_object(<span class="string">&quot;python类或类的路径&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.config.from_object(<span class="string">&#x27;pro_flask.settings.TestingConfig&#x27;</span>)</span><br><span class="line"></span><br><span class="line">settings.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    DEBUG = <span class="literal">False</span></span><br><span class="line">    TESTING = <span class="literal">False</span></span><br><span class="line">    DATABASE_URI = <span class="string">&#x27;sqlite://:memory:&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    DATABASE_URI = <span class="string">&#x27;mysql://user@localhost/foo&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    TESTING = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS: 从sys.path中已经存在路径开始写</span><br><span class="line"></span><br><span class="line">PS: settings.py文件默认路径要放在程序root_path目录，如果instance_relative_config为<span class="literal">True</span>，则就是instance_path目录（Flask对象init方法的参数）</span><br></pre></td></tr></table></figure><h3 id="典型写法"><a class="markdownIt-Anchor" href="#典型写法"></a> 典型写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/detail/&lt;int:nid&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>],endpoint=<span class="string">&#x27;detail&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure><h3 id="默认转换器"><a class="markdownIt-Anchor" href="#默认转换器"></a> 默认转换器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>:          UnicodeConverter,</span><br><span class="line">    <span class="string">&#x27;string&#x27;</span>:           UnicodeConverter,</span><br><span class="line">    <span class="string">&#x27;any&#x27;</span>:              AnyConverter,</span><br><span class="line">    <span class="string">&#x27;path&#x27;</span>:             PathConverter,</span><br><span class="line">    <span class="string">&#x27;int&#x27;</span>:              IntegerConverter,</span><br><span class="line">    <span class="string">&#x27;float&#x27;</span>:            FloatConverter,</span><br><span class="line">    <span class="string">&#x27;uuid&#x27;</span>:             UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由系统本质"><a class="markdownIt-Anchor" href="#路由系统本质"></a> 路由系统本质</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. decorator = app.route(&#x27;/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;],endpoint=&#x27;n1&#x27;)</span></span><br><span class="line"><span class="string">    def route(self, rule, **options):</span></span><br><span class="line"><span class="string">        # app对象</span></span><br><span class="line"><span class="string">        # rule= /</span></span><br><span class="line"><span class="string">        # options = &#123;methods=[&#x27;GET&#x27;,&#x27;POST&#x27;],endpoint=&#x27;n1&#x27;&#125;</span></span><br><span class="line"><span class="string">        def decorator(f):</span></span><br><span class="line"><span class="string">            endpoint = options.pop(&#x27;endpoint&#x27;, None)</span></span><br><span class="line"><span class="string">            self.add_url_rule(rule, endpoint, f, **options)</span></span><br><span class="line"><span class="string">            return f</span></span><br><span class="line"><span class="string">        return decorator</span></span><br><span class="line"><span class="string">2. @decorator</span></span><br><span class="line"><span class="string">    decorator(index)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#同理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;登录&#x27;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;n2&#x27;</span>, login, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&quot;POST&quot;</span>])</span><br><span class="line"><span class="comment">#与django路由类似</span></span><br><span class="line"><span class="comment">#django与flask路由：flask路由基于装饰器，本质是基于：add_url_rule</span></span><br><span class="line"><span class="comment">#add_url_rule 源码中，endpoint如果为空，endpoint = _endpoint_from_view_func(view_func)，最终取view_func.__name__（函数名）</span></span><br></pre></td></tr></table></figure><h3 id="cbv源码分析"><a class="markdownIt-Anchor" href="#cbv源码分析"></a> CBV(源码分析)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;before&#x27;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;after&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">views.View</span>):</span></span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>]</span><br><span class="line">    decorators = [auth, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Index!&#x27;</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/index&#x27;</span>, view_func=IndexView.as_view(name=<span class="string">&#x27;index&#x27;</span>))  <span class="comment"># name=endpoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者，通常用此方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">views.MethodView</span>):</span></span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>]</span><br><span class="line">    decorators = [auth, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Index.GET&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Index.POST&#x27;</span></span><br><span class="line">    app.add_url_rule(<span class="string">&#x27;/index&#x27;</span>, view_func=IndexView.as_view(name=<span class="string">&#x27;index&#x27;</span>))  <span class="comment"># name=endpoint</span></span><br></pre></td></tr></table></figure><h3 id="appadd_url_rule参数"><a class="markdownIt-Anchor" href="#appadd_url_rule参数"></a> app.add_url_rule参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route和app.add_url_rule参数:</span></span><br><span class="line">    </span><br><span class="line">rule,       <span class="comment"># URL规则</span></span><br><span class="line">view_func,  <span class="comment"># 视图函数名称</span></span><br><span class="line">defaults = <span class="literal">None</span>,  <span class="comment"># 默认值, 当URL中无参数，函数需要参数时，使用defaults = &#123;&#x27;k&#x27;: &#x27;v&#x27;&#125;</span></span><br><span class="line">为函数提供参数</span><br><span class="line">endpoint = <span class="literal">None</span>,  <span class="comment"># 名称，用于反向生成URL，即： url_for(&#x27;名称&#x27;)</span></span><br><span class="line">methods = <span class="literal">None</span>,   <span class="comment"># 允许的请求方式，如：[&quot;GET&quot;, &quot;POST&quot;]</span></span><br><span class="line"><span class="comment">#对URL最后的 / 符号是否严格要求</span></span><br><span class="line">strict_slashes = <span class="literal">None</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index&#x27;, strict_slashes=False)</span></span><br><span class="line"><span class="string">        #访问http://www.xx.com/index/ 或http://www.xx.com/index均可</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index&#x27;, strict_slashes=True)</span></span><br><span class="line"><span class="string">        #仅访问http://www.xx.com/index</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#重定向到指定地址</span></span><br><span class="line">redirect_to = <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index/&lt;int:nid&gt;&#x27;, redirect_to=&#x27;/home/&lt;nid&gt;&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#子域名访问</span></span><br><span class="line">subdomain = <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    #C:\Windows\System32\drivers\etc\hosts</span></span><br><span class="line"><span class="string">    127.0.0.1       www.liuqingzheng.com</span></span><br><span class="line"><span class="string">127.0.0.1       admin.liuqingzheng.com</span></span><br><span class="line"><span class="string">127.0.0.1       buy.liuqingzheng.com</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    from flask import Flask, views, url_for</span></span><br><span class="line"><span class="string">    app = Flask(import_name=__name__)</span></span><br><span class="line"><span class="string">    app.config[&#x27;SERVER_NAME&#x27;] = &#x27;liuqingzheng.com:5000&#x27;</span></span><br><span class="line"><span class="string">    @app.route(&quot;/&quot;, subdomain=&quot;admin&quot;)</span></span><br><span class="line"><span class="string">    def static_index():</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;Flask supports static subdomains</span></span><br><span class="line"><span class="string">        This is available at static.your-domain.tld&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return &quot;static.your-domain.tld&quot;</span></span><br><span class="line"><span class="string">    #可以传入任意的字符串，如传入的字符串为aa，显示为 aa.liuqingzheng.com</span></span><br><span class="line"><span class="string">    @app.route(&quot;/dynamic&quot;, subdomain=&quot;&lt;username&gt;&quot;)</span></span><br><span class="line"><span class="string">    def username_index(username):</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;Dynamic subdomains are also supported</span></span><br><span class="line"><span class="string">        Try going to user1.your-domain.tld/dynamic&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return username + &quot;.your-domain.tld&quot;</span></span><br><span class="line"><span class="string">    if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">        app.run()</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    访问：</span></span><br><span class="line"><span class="string">    http://www.liuqingzheng.com:5000/dynamic</span></span><br><span class="line"><span class="string">    http://admin.liuqingzheng.com:5000/dynamic</span></span><br><span class="line"><span class="string">    http://buy.liuqingzheng.com:5000/dynamic</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="支持正则"><a class="markdownIt-Anchor" href="#支持正则"></a> 支持正则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 写类，继承BaseConverter</span></span><br><span class="line"><span class="comment">#2 注册：app.url_map.converters[&#x27;regex&#x27;] = RegexConverter</span></span><br><span class="line"><span class="comment">#3 使用：@app.route(&#x27;/index/&lt;regex(&quot;\d+&quot;):nid&gt;&#x27;)  正则表达式会当作第二个参数传递到类中</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, views, url_for</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(import_name=__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义URL匹配正则表达式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, <span class="built_in">map</span>, regex</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RegexConverter, self).__init__(<span class="built_in">map</span>)</span><br><span class="line">        self.regex = regex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        路由匹配时，匹配成功后传递给视图函数中参数的值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        使用url_for反向生成URL时，传递的参数经过该方法处理，返回的值用于生成URL中的参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        val = <span class="built_in">super</span>(RegexConverter, self).to_url(value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"><span class="comment"># 添加到flask中</span></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;regex&#x27;</span>] = RegexConverter</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&lt;regex(&quot;\d+&quot;):nid&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">nid</span>):</span></span><br><span class="line">    print(url_for(<span class="string">&#x27;index&#x27;</span>, nid=<span class="string">&#x27;888&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="6模版"><a class="markdownIt-Anchor" href="#6模版"></a> 6.模版</h2><h4 id="61渲染变量"><a class="markdownIt-Anchor" href="#61渲染变量"></a> 6.1渲染变量</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% for k,v in user_dict.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v[&#x27;name&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.get(&#x27;name&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/detail/&#123;&#123;k&#125;&#125;&quot;</span>&gt;</span>查看详细<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="62变量的循环"><a class="markdownIt-Anchor" href="#62变量的循环"></a> 6.2变量的循环</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% for k,v in user_dict.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v[&#x27;name&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.get(&#x27;name&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/detail/&#123;&#123;k&#125;&#125;&quot;</span>&gt;</span>查看详细<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="63逻辑判断"><a class="markdownIt-Anchor" href="#63逻辑判断"></a> 6.3逻辑判断</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% if name %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比django中多可以加括号，执行函数，传参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,Markup,jsonify,make_response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Markup(<span class="string">&quot;&lt;input type=&#x27;text&#x27; value=&#x27;%s&#x27; /&gt;&quot;</span> %(arg,))</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,ff = func1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123;ff(&#x27;六五&#x27;)&#125;&#125;</span><br><span class="line">&#123;&#123;ff(&#x27;六五&#x27;)|safe&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>1.Markup等价django的mark_safe ,</p><p>2.extends,include一模一样</p><h2 id="7请求响应"><a class="markdownIt-Anchor" href="#7请求响应"></a> 7.请求响应</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login.html&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求相关信息</span></span><br><span class="line">    <span class="comment"># request.method  提交的方法</span></span><br><span class="line">    <span class="comment"># request.args  get请求提及的数据</span></span><br><span class="line">    <span class="comment"># request.form   post请求提交的数据</span></span><br><span class="line">    <span class="comment"># request.values  post和get提交的数据总和</span></span><br><span class="line">    <span class="comment"># request.cookies  客户端所带的cookie</span></span><br><span class="line">    <span class="comment"># request.headers  请求头</span></span><br><span class="line">    <span class="comment"># request.path     不带域名，请求路径</span></span><br><span class="line">    <span class="comment"># request.full_path  不带域名，带参数的请求路径</span></span><br><span class="line">    <span class="comment"># request.script_root  </span></span><br><span class="line">    <span class="comment"># request.url           带域名带参数的请求路径</span></span><br><span class="line">    <span class="comment"># request.base_url带域名请求路径</span></span><br><span class="line">    <span class="comment"># request.url_root      域名</span></span><br><span class="line">    <span class="comment"># request.host_url域名</span></span><br><span class="line">    <span class="comment"># request.host127.0.0.1:500</span></span><br><span class="line">    <span class="comment"># request.files</span></span><br><span class="line">    <span class="comment"># obj = request.files[&#x27;the_file_name&#x27;]</span></span><br><span class="line">    <span class="comment"># obj.save(&#x27;/var/www/uploads/&#x27; + secure_filename(f.filename))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 响应相关信息</span></span><br><span class="line">    <span class="comment"># return &quot;字符串&quot;</span></span><br><span class="line">    <span class="comment"># return render_template(&#x27;html模板路径&#x27;,**&#123;&#125;)</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;/index.html&#x27;)</span></span><br><span class="line">    <span class="comment">#return jsonify(&#123;&#x27;k1&#x27;:&#x27;v1&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># response = make_response(render_template(&#x27;index.html&#x27;))</span></span><br><span class="line">    <span class="comment"># response是flask.wrappers.Response类型</span></span><br><span class="line">    <span class="comment"># response.delete_cookie(&#x27;key&#x27;)</span></span><br><span class="line">    <span class="comment"># response.set_cookie(&#x27;key&#x27;, &#x27;value&#x27;)</span></span><br><span class="line">    <span class="comment"># response.headers[&#x27;X-Something&#x27;] = &#x27;A value&#x27;</span></span><br><span class="line">    <span class="comment"># return response</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;内容&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="8session"><a class="markdownIt-Anchor" href="#8session"></a> 8.session</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cookie:存放在客户端的键值对</span><br><span class="line">session：存放在客户端的键值对</span><br><span class="line">token:存放在客户端，通过算法来校验</span><br></pre></td></tr></table></figure><p>在使用session之前必须现在设置一下密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.secret_key=<span class="string">&quot;asdas&quot;</span> <span class="comment">#值随便</span></span><br></pre></td></tr></table></figure><p>除请求对象之外，还有一个 session 对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对 Cookies 进行密钥签名要使用会话，你需要设置一个密钥。 (app.session_interface对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">设置：session[<span class="string">&#x27;username&#x27;</span>] ＝ <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="comment">#在django中发什么三件事，1，生成一个随机的字符串 2 往数据库存 3 写入cookie返回浏览器</span></span><br><span class="line"><span class="comment">#在flask中他没有数据库，但session是怎样实现的？</span></span><br><span class="line"><span class="comment"># 生成一个密钥写入这个cookie,然后下次请求的时候，通过这个cookie解密，然后赋值给session</span></span><br><span class="line">    <span class="comment">#我们通过app.session_interface来查看</span></span><br><span class="line">  </span><br><span class="line">删除：session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h4 id="appsession_interface中save_session的参数设置cookie的参数"><a class="markdownIt-Anchor" href="#appsession_interface中save_session的参数设置cookie的参数"></a> app.session_interface中save_session的参数（设置cookie的参数）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key,             <span class="comment"># 键</span></span><br><span class="line">value=<span class="string">&#x27;&#x27;</span>,        <span class="comment"># 值</span></span><br><span class="line">max_age=<span class="literal">None</span>,    <span class="comment"># 超时时间 cookie需要延续的时间（以秒为单位）如果参数是\ None`` ，这个cookie会延续到浏览器关闭为止</span></span><br><span class="line">expires=<span class="literal">None</span>,    <span class="comment"># 超时时间(IE requires expires, so set it if hasn&#x27;t been already.)</span></span><br><span class="line">path=<span class="string">&#x27;/&#x27;</span>,        <span class="comment"># Cookie生效的路径，/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问，浏览器只会把cookie回传给带有该路径的页面，这样可以避免将cookie传给站点中的其他的应用。</span></span><br><span class="line">domain=<span class="literal">None</span>,     <span class="comment"># Cookie生效的域名 你可用这个参数来构造一个跨站cookie。如， domain=&quot;.example.com&quot;所构造的cookie对下面这些站点都是可读的：www.example.com 、 www2.example.com 和an.other.sub.domain.example.com 。如果该参数设置为 None ，cookie只能由设置它的站点读取</span></span><br><span class="line">secure=<span class="literal">False</span>,    <span class="comment"># 浏览器将通过HTTPS来回传cookie</span></span><br><span class="line">httponly=<span class="literal">False</span>   <span class="comment"># 只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span></span><br></pre></td></tr></table></figure><h4 id="session源码的执行流程"><a class="markdownIt-Anchor" href="#session源码的执行流程"></a> session源码的执行流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-save_seesion</span><br><span class="line">-响应的时候，把session中的值加密序列化放大到了cookie中，返回到浏览器中</span><br><span class="line">-open_session</span><br><span class="line">-请求来了，从cookie中取出值，反解，生成session对象，以后再视图函数中直接用sessoin就可以了。</span><br></pre></td></tr></table></figure><h2 id="9闪现message"><a class="markdownIt-Anchor" href="#9闪现message"></a> 9.闪现（message）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-设置:flash(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">-取值：get_flashed_message()</span><br><span class="line">-</span><br><span class="line">-假设在a页面操作出错，跳转到b页面，在b页面显示a页面的错误信息</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,flash,get_flashed_messages,request,redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;asdfasdf&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 从某个地方获取设置过的所有值，并清除。</span></span><br><span class="line">    val = request.args.get(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">&#x27;oldboy&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">    flash(<span class="string">&#x27;超时错误&#x27;</span>,category=<span class="string">&quot;x1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ssdsdsdfsd&quot;</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;/error&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/error&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    展示错误信息</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    如果get_flashed_messages(with_category=True)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = get_flashed_messages(category_filter=[<span class="string">&#x27;x1&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        msg = data[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg = <span class="string">&quot;...&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;错误信息：%s&quot;</span> %(msg,)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="10请求扩展"><a class="markdownIt-Anchor" href="#10请求扩展"></a> 10.请求扩展</h2><h3 id="1-before_request"><a class="markdownIt-Anchor" href="#1-before_request"></a> 1 before_request</h3><p>类比django中间件中的process_request，在请求收到之前绑定一个函数做一些事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于它做用户登录认证</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    user = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-after_request"><a class="markdownIt-Anchor" href="#2-after_request"></a> 2 after_request</h3><p>类比django中间件中的process_response，每一个请求之后绑定一个函数，如果请求没有异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response1</span>(<span class="params">response</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;process_response1 走了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="3-before_first_request"><a class="markdownIt-Anchor" href="#3-before_first_request"></a> 3 before_first_request</h3><p>第一次请求时,跟浏览器无关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="4-teardown_request"><a class="markdownIt-Anchor" href="#4-teardown_request"></a> 4 teardown_request</h3><p>每一个请求之后绑定一个函数，即使遇到了异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_request </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ter</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="5-errorhandler"><a class="markdownIt-Anchor" href="#5-errorhandler"></a> 5 errorhandler</h3><p>路径不存在时404，服务器内部错误500</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_404</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;404错误了&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-template_global"><a class="markdownIt-Anchor" href="#6-template_global"></a> 6 template_global</h3><p>标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"><span class="comment">#&#123;&#123;sb(1,2)&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-template_filter"><a class="markdownIt-Anchor" href="#7-template_filter"></a> 7 template_filter</h3><p>过滤器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>(<span class="params">a1, a2, a3</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"><span class="comment">#&#123;&#123; 1|db(2,3)&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>1 重点掌握before_request和after_request，</p><p>2 注意有多个的情况，执行顺序</p><p>3 before_request请求拦截后（也就是有return值），response所有都执行</p><h2 id="11-中间件了解"><a class="markdownIt-Anchor" href="#11-中间件了解"></a> 11 中间件（了解）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="comment"># 模拟中间件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Md</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,old_wsgi_app</span>):</span></span><br><span class="line">        self.old_wsgi_app = old_wsgi_app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self,  environ, start_response</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始之前&#x27;</span>)</span><br><span class="line">        ret = self.old_wsgi_app(environ, start_response)</span><br><span class="line">        print(<span class="string">&#x27;结束之后&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#1我们发现当执行app.run方法的时候，最终执行run_simple，最后执行app(),也就是在执行app.__call__方法</span></span><br><span class="line">    <span class="comment">#2 在__call__里面，执行的是self.wsgi_app().那我们希望在执行他本身的wsgi之前做点事情。</span></span><br><span class="line">    <span class="comment">#3 所以我们先用Md类中__init__，保存之前的wsgi,然后我们用将app.wsgi转化成Md的对象。</span></span><br><span class="line">    <span class="comment">#4 那执行新的的app.wsgi_app，就是执行Md的__call__方法。</span></span><br><span class="line">    <span class="comment">#把原来的wsgi_app替换为自定义的，</span></span><br><span class="line">    </span><br><span class="line">    app.wsgi_app = Md(app.wsgi_app)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>请求所有的流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ctx = self.request_context(environ)</span><br><span class="line">error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ctx.push()</span><br><span class="line">            <span class="comment">#根据路径去执行视图函数，视图类</span></span><br><span class="line">            response = self.full_dispatch_request()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            error = e</span><br><span class="line">            response = self.handle_exception(e)</span><br><span class="line">    <span class="keyword">except</span>:  <span class="comment"># noqa: B001</span></span><br><span class="line">        error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment">#不管出不出异常，都会走这里</span></span><br><span class="line">        <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">            error = <span class="literal">None</span></span><br><span class="line">            ctx.auto_pop(error)</span><br></pre></td></tr></table></figure><h2 id="12蓝图"><a class="markdownIt-Anchor" href="#12蓝图"></a> 12.蓝图</h2><p>对程序进行目录结构划分</p><h3 id="不使用蓝图自己分文件"><a class="markdownIt-Anchor" href="#不使用蓝图自己分文件"></a> 不使用蓝图，自己分文件</h3><p>目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-templates</span><br><span class="line">-views</span><br><span class="line">-__init__.py</span><br><span class="line">    -user.py</span><br><span class="line">    -order.py</span><br><span class="line">-app.py</span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><a href="http://init.py">init.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#不导入这个不行</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> account</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> order</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> user</span><br></pre></td></tr></table></figure><p><a href="http://user.py">user.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="http://order.py">order.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/order&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;order&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用蓝图之中小型系统"><a class="markdownIt-Anchor" href="#使用蓝图之中小型系统"></a> 使用蓝图之中小型系统</h3><p>详见代码：pro_flask_简单应用程序目录示例.zip</p><p>目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-flask_pro</span><br><span class="line">-flask_test</span><br><span class="line">    -__init__.py</span><br><span class="line">    -static</span><br><span class="line">        -templates</span><br><span class="line">        -views</span><br><span class="line">        -order.py</span><br><span class="line">            -user.py</span><br><span class="line">     -manage.py </span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>_<em>init</em>.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span>  Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="keyword">from</span> flask_test.views <span class="keyword">import</span> user</span><br><span class="line"><span class="keyword">from</span> flask_test.views <span class="keyword">import</span> order</span><br><span class="line">app.register_blueprint(user.us)</span><br><span class="line">app.register_blueprint(order.<span class="built_in">ord</span>)</span><br></pre></td></tr></table></figure><p><a href="http://manage.py">manage.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_test <span class="keyword">import</span>  app</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">8008</span>)</span><br></pre></td></tr></table></figure><p><a href="http://user.py">user.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">us=Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@us.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="http://order.py">order.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"><span class="built_in">ord</span>=Blueprint(<span class="string">&#x27;order&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ord.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;order test&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用蓝图之大型系统"><a class="markdownIt-Anchor" href="#使用蓝图之大型系统"></a> 使用蓝图之大型系统</h3><p>详见代码：pro_flask_大型应用目录示例.zip</p><p>总结：</p><p>1 xxx = Blueprint(‘account’, <strong>name</strong>,url_prefix=’/xxx’) ：蓝图URL前缀，表示url的前缀，在该蓝图下所有url都加前缀</p><p>2 xxx = Blueprint(‘account’, name,url_prefix=’/xxx’,template_folder=‘tpls’)：给当前蓝图单独使用templates，向上查找，当前找不到，会找总templates</p><p>3 蓝图的befort_request，对当前蓝图有效</p><p>4 大型项目，可以模拟出类似于django中app的概念</p><h2 id="13请求上下文源码分析"><a class="markdownIt-Anchor" href="#13请求上下文源码分析"></a> 13.请求上下文源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一阶段：将ctx(request,session)放到Local对象上</span><br><span class="line">   </span><br><span class="line">第二阶段：视图函数导入：request/session </span><br><span class="line">request.method</span><br><span class="line">-LocalProxy对象.method,执行<span class="built_in">getattr</span>方法，<span class="built_in">getattr</span>(self._get_current_object(), name)</span><br><span class="line">-self._get_current_object()返回<span class="keyword">return</span> self.__local()，self.__local()，在LocakProxy实例化的时候,<span class="built_in">object</span>.__setattr__(self, <span class="string">&#x27;_LocalProxy__local&#x27;</span>, local),此处local就是：partial(_lookup_req_object, <span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"></span><br><span class="line">-<span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span>(<span class="params">name</span>):</span></span><br><span class="line">top = _request_ctx_stack.top <span class="comment">#_request_ctx_stack 就是LocalStack()对象，top方法把ctx取出来</span></span><br><span class="line"><span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">getattr</span>(top, name)<span class="comment">#获取ctx中的request或session对象</span></span><br><span class="line"></span><br><span class="line">第三阶段：请求处理完毕</span><br><span class="line">- 获取session并保存到cookie</span><br><span class="line">- 将ctx删除</span><br></pre></td></tr></table></figure><p>程序运行，两个LocalStack()对象，一个里面放request和session，另一个放g和<code>current_app</code></p><h2 id="14g对象"><a class="markdownIt-Anchor" href="#14g对象"></a> 14.g对象</h2><p>专门用来存储用户信息的g对象，g的全称的为global</p><p>g对象在一次请求中的所有的代码的地方，都是可以使用的</p><h3 id="g对象和session的区别"><a class="markdownIt-Anchor" href="#g对象和session的区别"></a> g对象和session的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session对象是可以跨request的，只要session还未失效，不同的request的请求会获取到同一个session，但是g对象不是，g对象不需要管过期时间，请求一次就g对象就改变了一次，或者重新赋值了一次</span><br></pre></td></tr></table></figure><h2 id="15flask-session"><a class="markdownIt-Anchor" href="#15flask-session"></a> 15.flask-session</h2><p>作用：将默认保存的签名cookie中的值 保存到 redis/memcached/file/Mongodb/SQLAlchemy</p><p>安装：pip3 install flask-session</p><p>使用1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session</span><br><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> RedisSessionInterface</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">conn=redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">6379</span>)</span><br><span class="line"><span class="comment">#use_signer是否对key签名</span></span><br><span class="line">app.session_interface=RedisSessionInterface(conn,key_prefix=<span class="string">&#x27;lqz&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;name&#x27;</span>]=<span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>使用2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">from</span> flask.ext.session <span class="keyword">import</span> Session</span><br><span class="line">app.config[<span class="string">&#x27;SESSION_TYPE&#x27;</span>] = <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SESSION_REDIS&#x27;</span>] = Redis(host=<span class="string">&#x27;192.168.0.94&#x27;</span>,port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure><p>问题：设置cookie时，如何设定关闭浏览器则cookie失效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response.set_cookie(<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,exipre=<span class="literal">None</span>)<span class="comment">#这样设置即可</span></span><br><span class="line"><span class="comment">#在session中设置</span></span><br><span class="line">app.session_interface=RedisSessionInterface(conn,key_prefix=<span class="string">&#x27;lqz&#x27;</span>,permanent=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#一般不用，我们一般都设置超时时间，多长时间后失效</span></span><br></pre></td></tr></table></figure><p>问题：cookie默认超时时间是多少？如何设置超时时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#源码expires = self.get_expiration_time(app, session)</span></span><br><span class="line"><span class="string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>:           timedelta(days=<span class="number">31</span>),<span class="comment">#这个配置文件控制</span></span><br></pre></td></tr></table></figure><h2 id="16数据库连接池"><a class="markdownIt-Anchor" href="#16数据库连接池"></a> 16.数据库连接池</h2><h3 id="pymsql链接数据库"><a class="markdownIt-Anchor" href="#pymsql链接数据库"></a> pymsql链接数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;123456&#x27;</span>, db=<span class="string">&#x27;s8day127db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># cursor.execute(&quot;select id,name from users where name=%s and pwd=%s&quot;,[&#x27;lqz&#x27;,&#x27;123&#x27;,])</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select id,name from users where name=%(user)s and pwd=%(pwd)s&quot;</span>,&#123;<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;lqz&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line">obj = cursor.fetchone()</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><h3 id="数据库连接池版"><a class="markdownIt-Anchor" href="#数据库连接池版"></a> 数据库连接池版</h3><p><a href="http://setting.py">setting.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB, SharedDBConnection</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line">    SECRET_KEY = <span class="string">&quot;umsuldfsdflskjdf&quot;</span></span><br><span class="line">    PERMANENT_SESSION_LIFETIME = timedelta(minutes=<span class="number">20</span>)</span><br><span class="line">    SESSION_REFRESH_EACH_REQUEST= <span class="literal">True</span></span><br><span class="line">    SESSION_TYPE = <span class="string">&quot;redis&quot;</span></span><br><span class="line">    PYMYSQL_POOL = PooledDB(</span><br><span class="line">        creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">        maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">        mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class="line">        maxcached=<span class="number">5</span>,  <span class="comment"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class="line">        maxshared=<span class="number">3</span>,</span><br><span class="line">        <span class="comment"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class="line">        blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">        maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">        setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class="line">        ping=<span class="number">0</span>,</span><br><span class="line">        <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">        host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password=<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        database=<span class="string">&#x27;s8day127db&#x27;</span>,</span><br><span class="line">        charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    SESSION_REDIS = Redis(host=<span class="string">&#x27;192.168.0.94&#x27;</span>, port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    SESSION_REDIS = Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>utils/sql.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Config</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLHelper</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span>(<span class="params">cursor</span>):</span></span><br><span class="line">        POOL = Config.PYMYSQL_POOL</span><br><span class="line">        conn = POOL.connection()</span><br><span class="line">        cursor = conn.cursor(cursor=cursor)</span><br><span class="line">        <span class="keyword">return</span> conn,cursor</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">conn,cursor</span>):</span></span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_one</span>(<span class="params">cls,sql,args,cursor =pymysql.cursors.DictCursor</span>):</span></span><br><span class="line">        conn,cursor = cls.<span class="built_in">open</span>(cursor)</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        obj = cursor.fetchone()</span><br><span class="line">        cls.close(conn,cursor)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_all</span>(<span class="params">cls,sql, args,cursor =pymysql.cursors.DictCursor</span>):</span></span><br><span class="line">        conn, cursor = cls.<span class="built_in">open</span>(cursor)</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        obj = cursor.fetchall()</span><br><span class="line">        cls.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = SQLHelper.fetch_one(<span class="string">&quot;select id,name from users where name=%(user)s and pwd=%(pwd)s&quot;</span>, form.data)</span><br></pre></td></tr></table></figure><h2 id="17wtforms"><a class="markdownIt-Anchor" href="#17wtforms"></a> 17.wtforms</h2><p>安装:pip3 install wtforms</p><h3 id="使用1"><a class="markdownIt-Anchor" href="#使用1"></a> 使用1：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> simple</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> validators</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> widgets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">Form</span>):</span></span><br><span class="line">    <span class="comment"># 字段（内部包含正则表达式）</span></span><br><span class="line">    name = simple.StringField(</span><br><span class="line">        label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;用户名不能为空.&#x27;</span>),</span><br><span class="line">            validators.Length(<span class="built_in">min</span>=<span class="number">6</span>, <span class="built_in">max</span>=<span class="number">18</span>, message=<span class="string">&#x27;用户名长度必须大于%(min)d且小于%(max)d&#x27;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.TextInput(), <span class="comment"># 页面上显示的插件</span></span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 字段（内部包含正则表达式）</span></span><br><span class="line">    pwd = simple.PasswordField(</span><br><span class="line">        label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;密码不能为空.&#x27;</span>),</span><br><span class="line">            validators.Length(<span class="built_in">min</span>=<span class="number">8</span>, message=<span class="string">&#x27;用户名长度必须大于%(min)d&#x27;</span>),</span><br><span class="line">            validators.Regexp(regex=<span class="string">&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&amp;])[A-Za-z\d$@$!%*?&amp;]&#123;8,&#125;&quot;</span>,</span><br><span class="line">                              message=<span class="string">&#x27;密码至少8个字符，至少1个大写字母，1个小写字母，1个数字和1个特殊字符&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        form = LoginForm()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = LoginForm(formdata=request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            print(<span class="string">&#x27;用户提交数据通过格式验证，提交的值为：&#x27;</span>, form.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;form.name.label&#125;&#125; &#123;&#123;form.name&#125;&#125; &#123;&#123;form.name.errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;form.pwd.label&#125;&#125; &#123;&#123;form.pwd&#125;&#125; &#123;&#123;form.pwd.errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用2"><a class="markdownIt-Anchor" href="#使用2"></a> 使用2：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> core</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> html5</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> simple</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> validators</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> widgets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span>(<span class="params">Form</span>):</span></span><br><span class="line">    name = simple.StringField(</span><br><span class="line">        label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired()</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.TextInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;,</span><br><span class="line">        default=<span class="string">&#x27;alex&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd = simple.PasswordField(</span><br><span class="line">        label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;密码不能为空.&#x27;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd_confirm = simple.PasswordField(</span><br><span class="line">        label=<span class="string">&#x27;重复密码&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;重复密码不能为空.&#x27;</span>),</span><br><span class="line">            validators.EqualTo(<span class="string">&#x27;pwd&#x27;</span>, message=<span class="string">&quot;两次密码输入不一致&quot;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    email = html5.EmailField(</span><br><span class="line">        label=<span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;邮箱不能为空.&#x27;</span>),</span><br><span class="line">            validators.Email(message=<span class="string">&#x27;邮箱格式错误&#x27;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.TextInput(input_type=<span class="string">&#x27;email&#x27;</span>),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    gender = core.RadioField(</span><br><span class="line">        label=<span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        coerce=<span class="built_in">int</span> <span class="comment"># “1” “2”</span></span><br><span class="line">     )</span><br><span class="line">    city = core.SelectField(</span><br><span class="line">        label=<span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="string">&#x27;bj&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">            (<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    hobby = core.SelectMultipleField(</span><br><span class="line">        label=<span class="string">&#x27;爱好&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="number">1</span>, <span class="string">&#x27;篮球&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;足球&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        coerce=<span class="built_in">int</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    favor = core.SelectMultipleField(</span><br><span class="line">        label=<span class="string">&#x27;喜好&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="number">1</span>, <span class="string">&#x27;篮球&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;足球&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        widget=widgets.ListWidget(prefix_label=<span class="literal">False</span>),</span><br><span class="line">        option_widget=widgets.CheckboxInput(),</span><br><span class="line">        coerce=<span class="built_in">int</span>,</span><br><span class="line">        default=[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RegisterForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.favor.choices = ((<span class="number">1</span>, <span class="string">&#x27;篮球&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;足球&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;羽毛球&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_pwd_confirm</span>(<span class="params">self, field</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        自定义pwd_confirm字段规则，例：与pwd字段是否一致</span></span><br><span class="line"><span class="string">        :param field:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 最开始初始化时，self.data中已经有所有的值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> field.data != self.data[<span class="string">&#x27;pwd&#x27;</span>]:</span><br><span class="line">            <span class="comment"># raise validators.ValidationError(&quot;密码不一致&quot;) # 继续后续验证</span></span><br><span class="line">            <span class="keyword">raise</span> validators.StopValidation(<span class="string">&quot;密码不一致&quot;</span>)  <span class="comment"># 不再继续后续验证</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        form = RegisterForm(data=&#123;<span class="string">&#x27;gender&#x27;</span>: <span class="number">2</span>,<span class="string">&#x27;hobby&#x27;</span>:[<span class="number">1</span>,]&#125;) <span class="comment"># initial</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = RegisterForm(formdata=request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            print(<span class="string">&#x27;用户提交数据通过格式验证，提交的值为：&#x27;</span>, form.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, form=form)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;用户注册&lt;/h1&gt;</span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> novalidate style=<span class="string">&quot;padding:0  50px&quot;</span>&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> field <span class="keyword">in</span> form %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123;field.label&#125;&#125;: &#123;&#123;field&#125;&#125; &#123;&#123;field.errors[0] &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="18信号"><a class="markdownIt-Anchor" href="#18信号"></a> 18.信号</h2><p>Flask框架中的信号基于blinker，其主要就是让开发者可是在flask请求过程中定制一些用户行为</p><p>安装：<code>pip3 install blinker</code></p><p>内置信号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">request_started = _signals.signal(<span class="string">&#x27;request-started&#x27;</span>)                <span class="comment"># 请求到来前执行</span></span><br><span class="line">request_finished = _signals.signal(<span class="string">&#x27;request-finished&#x27;</span>)              <span class="comment"># 请求结束后执行</span></span><br><span class="line"> </span><br><span class="line">before_render_template = _signals.signal(<span class="string">&#x27;before-render-template&#x27;</span>)  <span class="comment"># 模板渲染前执行</span></span><br><span class="line">template_rendered = _signals.signal(<span class="string">&#x27;template-rendered&#x27;</span>)            <span class="comment"># 模板渲染后执行</span></span><br><span class="line"> </span><br><span class="line">got_request_exception = _signals.signal(<span class="string">&#x27;got-request-exception&#x27;</span>)    <span class="comment"># 请求执行出现异常时执行</span></span><br><span class="line"> </span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">&#x27;request-tearing-down&#x27;</span>)      <span class="comment"># 请求执行完毕后自动执行（无论成功与否）</span></span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">&#x27;appcontext-tearing-down&#x27;</span>)<span class="comment"># 应用上下文执行完毕后自动执行（无论成功与否）</span></span><br><span class="line"> </span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">&#x27;appcontext-pushed&#x27;</span>)            <span class="comment"># 应用上下文push时执行</span></span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">&#x27;appcontext-popped&#x27;</span>)            <span class="comment"># 应用上下文pop时执行</span></span><br><span class="line">message_flashed = _signals.signal(<span class="string">&#x27;message-flashed&#x27;</span>)                <span class="comment"># 调用flask在其中添加数据时，自动触发</span></span><br></pre></td></tr></table></figure><p>使用信号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,signals,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 往信号中注册函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;触发型号&#x27;</span>,args,kwargs)</span><br><span class="line">signals.request_started.connect(func)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发信号： signals.request_started.send()</span></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first1</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first2</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first3</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;视图&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.wsgi_app</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>一个流程中的信号触发点（了解）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a. before_first_request</span><br><span class="line">b. 触发 request_started 信号</span><br><span class="line">c. before_request</span><br><span class="line">d. 模板渲染</span><br><span class="line">渲染前的信号 before_render_template.send(app, template=template, context=context)</span><br><span class="line">rv = template.render(context) <span class="comment"># 模板渲染</span></span><br><span class="line">渲染后的信号 template_rendered.send(app, template=template, context=context)</span><br><span class="line">e. after_request</span><br><span class="line">f. session.save_session()</span><br><span class="line">g. 触发 request_finished信号</span><br><span class="line">如果上述过程出错：</span><br><span class="line">触发错误处理信号 got_request_exception.send(self, exception=e)</span><br><span class="line"></span><br><span class="line">h. 触发信号 request_tearing_down</span><br></pre></td></tr></table></figure><p>自定义信号(了解)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app, flash, render_template</span><br><span class="line"><span class="keyword">from</span> flask.signals <span class="keyword">import</span> _signals</span><br><span class="line">app = Flask(import_name=__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义信号</span></span><br><span class="line">xxxxx = _signals.signal(<span class="string">&#x27;xxxxx&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">sender, *args, **kwargs</span>):</span></span><br><span class="line">    print(sender)</span><br><span class="line"><span class="comment"># 自定义信号中注册函数</span></span><br><span class="line">xxxxx.connect(func)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/x&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 触发信号</span></span><br><span class="line">    xxxxx.send(<span class="string">&#x27;123123&#x27;</span>, k1=<span class="string">&#x27;v1&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="19多app应用"><a class="markdownIt-Anchor" href="#19多app应用"></a> 19.多app应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.wsgi <span class="keyword">import</span> DispatcherMiddleware</span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app</span><br><span class="line">app1 = Flask(<span class="string">&#x27;app01&#x27;</span>)</span><br><span class="line">app2 = Flask(<span class="string">&#x27;app02&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app1.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;app01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app2.route(<span class="params"><span class="string">&#x27;/index2&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;app2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://www.oldboyedu.com/index</span></span><br><span class="line"><span class="comment"># http://www.oldboyedu.com/sec/index2</span></span><br><span class="line">dm = DispatcherMiddleware(app1, &#123;</span><br><span class="line">    <span class="string">&#x27;/sec&#x27;</span>: app2,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    run_simple(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">5000</span>, dm)</span><br></pre></td></tr></table></figure><h2 id="20flask-script"><a class="markdownIt-Anchor" href="#20flask-script"></a> 20.flask-script</h2><p>用于实现类似于django中 python3 <a href="http://manage.py">manage.py</a> runserver …类似的命令</p><p>安装：pip3 install flask-script</p><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">manager=Manager(app)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()</span><br><span class="line"><span class="comment">#以后在执行，直接：python3 manage.py runserver</span></span><br><span class="line"><span class="comment">#python3 manage.py runserver --help</span></span><br></pre></td></tr></table></figure><h3 id="自定制命令"><a class="markdownIt-Anchor" href="#自定制命令"></a> 自定制命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义命令</span></span><br><span class="line"><span class="string">    python manage.py custom 123</span></span><br><span class="line"><span class="string">    :param arg:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option(<span class="params"><span class="string">&#x27;-n&#x27;</span>, <span class="string">&#x27;--name&#x27;</span>, dest=<span class="string">&#x27;name&#x27;</span></span>)</span></span><br><span class="line"><span class="comment">#@manager.option(&#x27;-u&#x27;, &#x27;--url&#x27;, dest=&#x27;url&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">name, url</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义命令（-n也可以写成--name）</span></span><br><span class="line"><span class="string">    执行： python manage.py  cmd -n lqz -u http://www.oldboyedu.com</span></span><br><span class="line"><span class="string">    执行： python manage.py  cmd --name lqz --url http://www.oldboyedu.com</span></span><br><span class="line"><span class="string">    :param name:</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(name, url)</span><br><span class="line"><span class="comment">#有什么用？</span></span><br><span class="line"><span class="comment">#把excel的数据导入数据库，定制个命令，去执行</span></span><br></pre></td></tr></table></figure><h2 id="21flask-admin"><a class="markdownIt-Anchor" href="#21flask-admin"></a> 21flask-admin</h2><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask_admin</span><br></pre></td></tr></table></figure><h4 id="简单使用"><a class="markdownIt-Anchor" href="#简单使用"></a> 简单使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_admin <span class="keyword">import</span> Admin</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#将app注册到adminzhong </span></span><br><span class="line">admin = Admin(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;mian&quot;</span>:</span><br><span class="line"></span><br><span class="line">app.run()</span><br><span class="line"><span class="comment">#访问</span></span><br><span class="line"><span class="comment">#127.0.0.1:5000/admin端口，会得到一个空白的页面</span></span><br></pre></td></tr></table></figure><h4 id="将表模型注册到admin中"><a class="markdownIt-Anchor" href="#将表模型注册到admin中"></a> 将表模型注册到admin中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在将表注册之前应该对app进行配置</span></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&quot;mysql+pymysql://root:@127.0.0.1:3307/py9api?charset=utf8mb4&quot;</span></span><br><span class="line">SQLALCHEMY_POOL_SIZE = <span class="number">5</span></span><br><span class="line">SQLALCHEMY_POOL_TIMEOUT = <span class="number">30</span></span><br><span class="line">SQLALCHEMY_POOL_RECYCLE = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入models文件的中的表模型</span></span><br><span class="line"><span class="keyword">from</span> flask_admin.contrib.sqla <span class="keyword">import</span> ModelView</span><br><span class="line"><span class="keyword">from</span> api.models <span class="keyword">import</span> Stock,Product,Images,Category,Wxuser,Banner</span><br><span class="line"></span><br><span class="line">admin.add_view(ModelView(Stock, db.session))</span><br><span class="line">admin.add_view(ModelView(Product, db.session))</span><br><span class="line"></span><br><span class="line">admin.add_view(ModelView(Category, db.session))</span><br></pre></td></tr></table></figure><h4 id="如果有个字段是图片指端"><a class="markdownIt-Anchor" href="#如果有个字段是图片指端"></a> 如果有个字段是图片指端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置上传文件的路径</span></span><br><span class="line"><span class="comment">#导入from flask_admin.contrib.fileadmin import FileAdmin</span></span><br><span class="line"><span class="keyword">from</span> flask_admin.contrib.fileadmin <span class="keyword">import</span> FileAdmin,form</span><br><span class="line">file_path = op.join(op.dirname(__file__), <span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">admin = Admin(app)</span><br><span class="line">admin.add_view(FileAdmin(file_path, <span class="string">&#x27;/static/&#x27;</span>, name=<span class="string">&#x27;文件&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果有个字段要是上传文件重写该方法的modleView类，假设imgae_url是文件图片的字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagesView</span>(<span class="params">ModelView</span>):</span></span><br><span class="line"></span><br><span class="line">    form_extra_fields = &#123;</span><br><span class="line">        <span class="string">&#x27;image_url&#x27;</span>: form.ImageUploadField(<span class="string">&#x27;Image&#x27;</span>,</span><br><span class="line">                                          base_path=file_path,</span><br><span class="line">                                          relative_path=<span class="string">&#x27;uploadFile/&#x27;</span></span><br><span class="line">                                          )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">admin.add_view(ImagesView(Images, db.session))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;0flask简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0flask简介&quot;&gt;&lt;/a&gt; 0.Flask简介&lt;/h2&gt;
&lt;p&gt;Flask是一</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-5 数据库连接池</title>
    <link href="http://example.com/2021/01/18/flask/8-5%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://example.com/2021/01/18/flask/8-5%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2021-01-18T11:39:27.117Z</published>
    <updated>2021-01-19T08:30:38.027Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="01-如何在python中操作数据库"><a class="markdownIt-Anchor" href="#01-如何在python中操作数据库"></a> 01 如何在python中操作数据库</h2><p>在后端开发中免不掉与数据库打交道，无非是使用<code>orm</code>或者原生<code>sql</code>来操作数据库。</p><p>在python中通过原生sql操作数据库，主流就两种。</p><ul><li>使用pymysql模块：<code>pymysql</code>支持<code>python2.x</code>和<code>python3.x</code>的版本</li><li>使用mysqldb模块：<code>mysqldb</code>仅支持<code>python2.x</code>的版本</li></ul><p>orm的使用以flask和django为例。</p><ul><li>flask使用的orm是基于<code>SQLAlchemy</code>（SQLAlchemy本就是orm），flask团队并在<code>SQLAlchemy</code>基础之上又封装了一个<code>Flask-SQLchemy</code>并予以应用 。</li><li>django使用的orm是django自带的orm。</li></ul><p>orm的操作数据库的方式我们已经熟知了，这里我们聊一聊如何在web中使用原生sql操作数据库，以及会出现的问题。</p><h2 id="02-在web中使用原生sqlpymysql操作数据库"><a class="markdownIt-Anchor" href="#02-在web中使用原生sqlpymysql操作数据库"></a> 02 在web中使用原生sql(pymysql)操作数据库？</h2><h3 id="21-在web中通过原生sql操作数据库会出现的问题"><a class="markdownIt-Anchor" href="#21-在web中通过原生sql操作数据库会出现的问题"></a> 2.1 在web中通过原生sql操作数据库会出现的问题。</h3><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155710792-29404033..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155710792-29404033..png" alt="1554343834169" /></a></p><h4 id="示例1"><a class="markdownIt-Anchor" href="#示例1"></a> 示例1：</h4><p>把所有的数据库操作全部都放在了视图函数里面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">import</span> pymysql</span><br><span class="line">    CONN = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                           password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">                           database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">                           charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cursor = CONN.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line"></span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>会出现的问题</strong></p><ul><li>很多个用户并发的来请求，一个用户可以理解为一个线程，每个线程都会跟数据库建立连接，数据库承受不了这种量级的连接数。</li></ul><h4 id="示例2"><a class="markdownIt-Anchor" href="#示例2"></a> 示例2</h4><p>为了避免之前每个用户都建立连接，我们把数据库连接放到了全局变量里面，只会建立一次连接，但是依然会出现问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">CONN = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                           password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">                           database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">                           charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    cursor = CONN.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line"></span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>会出现的问题：</strong></p><ul><li>会出现线程安全问题，比如如果第一个用户拿到了连接给关闭了，而第二个用户正在进行查询，第二个用户查询的时候第一个用户把连接断了，会导致第二个用户出现问题。</li><li>假设第一用户查询了一下表1，正准备获取查询的内容，这时第二个人查询了一下表2，由于cursor对象都是同一个，第一个人获取到的查询内容就是表2的内容了，所以也会出现线程安全问题</li></ul><h4 id="示例3"><a class="markdownIt-Anchor" href="#示例3"></a> 示例3</h4><p>为了避免之前的线程不安全，在示例2的基础上加上一把线程锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">CONN = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                           password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">                           database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">                           charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">with</span> threading.Lock():</span><br><span class="line">        cursor = CONN.cursor()</span><br><span class="line">        cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        cursor.close()</span><br><span class="line"></span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>会出现的问题</strong>：</p><ul><li>根据代码可以发现，只是在示例2的基础上加了一把线程锁，确实是保证了线程安全，但是所有关于数据库操作的请求变成了串行，无法实现并发了。</li></ul><h4 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结：</h4><ul><li>如果直接连接坐在视图函数中，会导致每个用户都要创建连接，数据库承受不了这种量级的连接数。</li><li>如果连接数据库的内容做成全局变量的话，无法保证线程安全。</li><li>如果定义全局变量用于连接数据库，并且在线程中操作数据库内容加线程锁头，就会变成串行，无法保证并发</li></ul><p>所以我们既要控制数据库的连接数，又要保证线程安全，又要保证web的并发，这个时候最终的解决方案是数据库连接池。</p><h3 id="21-什么是数据库连接池呢"><a class="markdownIt-Anchor" href="#21-什么是数据库连接池呢"></a> 2.1 什么是数据库连接池呢？</h3><p>数据库连接池概念：数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个，这项技术能明显提高对数据库操作的性能。</p><p><strong>图解</strong>：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155711355-1754252191..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155711355-1754252191..png" alt="1553241307822" /></a></p><p>通俗的讲就是，假设数据库连接池中有5个连接对象，每个用户简单理解为一个线程，比如现在有6个用户同时来访问，6个线程去数据库连接池里面申请数据库的连接对象。前5个线程每个都申请到了连接对象去操作数据库，每个线程使用完了数据库连接对象会归还给数据库连接池，那么第6个线程会等待前5个线程归还连接对象给连接池，再具体一点是：假设第一个线程使用完了连接对象，那么此时6个线程才会结束等待，从而申请到连接对象，以此类推。</p><h3 id="22-python数据库连接池dbutiles"><a class="markdownIt-Anchor" href="#22-python数据库连接池dbutiles"></a> 2.2 Python数据库连接池DBUtiles</h3><p>DBUtils 是Python的一个用于实现数据库连接池的模块。</p><p>首先安装一下DBUtils模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install DBUtils</span><br></pre></td></tr></table></figure><p>DBUtils连接池的两种连接模式：</p><p>**模式一：**为每个线程创建一个连接，线程即使调用了close方法，也不会关闭，只是把连接重新放到连接池，仅供自己的线程再次使用，当线程终止时，连接会自动关闭。（不推荐使用，因为这样需要自己控制线程数量）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PersistentDB <span class="keyword">import</span> PersistentDB</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> local</span><br><span class="line"></span><br><span class="line">POOL = PersistentDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class="line">    ping=<span class="number">0</span>, <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    closeable=<span class="literal">False</span>,</span><br><span class="line">    <span class="comment"># 如果为False时， conn.close() 实际上被忽略，供下次使用，再线程关闭时，才会自动关闭链接。如果为True时， conn.close()则关闭链接，那么再次调用pool.connection时就会报错，因为已经真的关闭了连接（pool.steady_connection()可以获取一个新的链接）</span></span><br><span class="line">    threadlocal=<span class="literal">None</span>,  <span class="comment"># 如果为none，用默认的threading.Loacl对象，否则可以自己封装一个local对象进行替换</span></span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    conn = POOL.connection(shareable=<span class="literal">False</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>**模式二：**创建一批连接到连接池，供所有线程共享使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB, SharedDBConnection</span><br><span class="line">POOL = PooledDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">    mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class="line">    maxcached=<span class="number">5</span>,  <span class="comment"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class="line">    maxshared=<span class="number">3</span>,  <span class="comment"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class="line">    blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class="line">    ping=<span class="number">0</span>,</span><br><span class="line">    <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    conn = POOL.connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><h3 id="23-实际开发小应用案例"><a class="markdownIt-Anchor" href="#23-实际开发小应用案例"></a> 2.3 实际开发小应用案例：</h3><p><strong>案例目录：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- app.py</span><br><span class="line">- db_helper.py</span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> db_helper <span class="keyword">import</span> SQLHelper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    result = SQLHelper.fetch_one(<span class="string">&#x27;select * from t1&#x27;</span>,[])</span><br><span class="line">    print(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>db_helper.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line">POOL = PooledDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">    mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class="line">    maxcached=<span class="number">5</span>,  <span class="comment"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class="line">    maxshared=<span class="number">3</span>,  <span class="comment"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class="line">    blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class="line">    ping=<span class="number">0</span>,</span><br><span class="line">    <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLHelper</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_one</span>(<span class="params">sql,args</span>):</span></span><br><span class="line">        conn = POOL.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_all</span>(<span class="params">self,sql,args</span>):</span></span><br><span class="line">        conn = POOL.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>以后在开发的过程中我们可以基于数据库连接池，基于pymysql，来实现自己个性化操作数据库的需求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;01-如何在python中操作数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#01-如何在python中操作数据库&quot;&gt;&lt;/a&gt; 01 如何</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-4 flask请求上下文</title>
    <link href="http://example.com/2021/01/18/flask/8-4%20flask%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://example.com/2021/01/18/flask/8-4%20flask%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2021-01-18T11:39:27.112Z</published>
    <updated>2021-01-19T08:30:33.579Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>在分析上下问之前，要做好一个心理准备，因为设计到的代码会很多，需要不懂的要跟着文档自己去翻阅源码。</p><p>首先把涉及到的主要的类或者设计到的 py 页面展示如下图。下面我会以对应类或者页面去讲解flask源码</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155553388-420550334..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155553388-420550334..png" alt="1553480943160" /></a></p><p>之前我们已经论述过了，每次请求过来都会触发<code>app()</code>，所以会触发<code>FLask</code>类的<code>__call__</code>方法，<code>__call__</code>方法会触发<code>Flask</code>类的<code>wsgi_app()</code>方法。然后所有的请求的整个生命周期都在整个<code>wsgi_app()</code>里面了。</p><p>根据上图类和序号来完成我们的分析流程。</p><h2 id="1-首先分析请求上下文对象ctx创立"><a class="markdownIt-Anchor" href="#1-首先分析请求上下文对象ctx创立"></a> 1 首先分析请求上下文对象(ctx)创立</h2><ul><li><p>1.0 FLask 类中的<code>wsgi_app()</code>中的 <code>ctx = self.request_context(environ）</code></p></li><li><p>1.1 <code>RequestContext</code>类中的 <code>__init__</code></p><ul><li><p>实例化出请求上下文对象ctx</p></li><li><p>并且关注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    request = app.request_class(environ)</span><br><span class="line">self.request = request</span><br></pre></td></tr></table></figure></li></ul></li><li><p>1.2 Request类中的 <code>__init__</code></p><ul><li>该类的 <code>__init__</code>方法实例化出<code>reqeust</code>对象</li></ul><p>这三部完成了初始化一个用户请求相关的数据，也就是请求上下文对象。</p></li></ul><p>1.0中的<code>ctx</code>就是<code>RequestContext</code>对象，请求上下文对象<code>ctx</code>中初始化所有请求所有内容，并且其内部封装着Request对象，Request对象把请求过来的信息格式化并且储存起来。</p><h2 id="2-把请求对象ctx添加到local中入栈"><a class="markdownIt-Anchor" href="#2-把请求对象ctx添加到local中入栈"></a> 2 把请求对象(ctx)添加到local中（入栈）</h2><ul><li><p>2.0 FLask 类中的<code>wsgi_app()</code>中的 <code>ctx.push()</code></p></li><li><p>2.1 <code>RequestContext</code> 类中的 push() 下</p><ul><li>只关注<code>_request_ctx_stack.push(self)</code></li></ul></li><li><p>2.2 <code>LocalStack</code>类中的 push()方法</p><ul><li>只关注 <code>self._local.stack = rv = []</code>，触发2.3执行。</li><li>在实现了2.3的基础上，关注本方法中的<code>rv.append(obj)</code> , rv就是2.3中stack的value值，此obj就是ctx对象 ，相当于为Local类中的storage里面的<code>当前线程或携程唯一标识</code>里的<code>stack</code>对应的<code>value</code>值，添加了球队上下文对象ctx，这个对象里面包含了所有请求过来的信息。</li></ul><p>{</p><p>线程或携程唯一标识:{</p><p>stack:[请求上下文对象ctx]。</p><p>}，</p><p>}</p></li><li><p>2.3 Local类中的 <code>__setattr__</code>方法实现了创建了</p><ul><li><p>storage = {</p><p>线程或携程唯一标识:{</p><p>stack: [ ]</p><p>}，</p><p>}</p></li></ul></li></ul><h2 id="3-找到视图函数并且使用导入request对象"><a class="markdownIt-Anchor" href="#3-找到视图函数并且使用导入request对象"></a> 3 找到视图函数并且使用导入request对象**</h2><ul><li><p>3.0 FLask 类中的<code>wsgi_app()</code>中 <code>response = self.full_dispatch_request()</code>的找到视图函数并执行</p></li><li><p>3.1 找到了视图函数并且执行<code>request.method</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    v &#x3D; request.method</span><br><span class="line">    return  v</span><br></pre></td></tr></table></figure></li><li><p>3.2 须知：<code>request = LocalProxy(partial(_lookup_req_object, 'request'))</code> 用于在视图函数里导入的request对象</p><ul><li>偏函数：<code>partial(_lookup_req_object, 'request')</code><em>不懂可以翻阅之前的文章</em></li></ul></li><li><p>3.3 触发了<code>LocalProxy</code>类 中的 <code>__getattr__</code></p><ul><li>关注：<code>return getattr(self._get_current_object(), name)</code>  # name是‘method’，去Request类中查询‘method’属性，</li></ul></li><li><p>3.4 触发了<code>LocalProxy</code>类 中的 <code>_get_current_object()</code></p><ul><li><p>关注 <code>return self.__local()</code> #返回了Request对象</p><p>在<code>LocalProxy</code>类实例化的时候使得<code>self.__local</code>的值就是实例化时传入偏函数。所以会返回偏函数运行结果。</p></li></ul></li><li><p>3.5 触发了<code>globals.py</code> 里的 <code>_lookup_req_object()</code>运行。</p><ul><li>关注 <code>top = _request_ctx_stack.top</code> # 触发3.6执行</li><li><code>return getattr(top, name) # name = ‘request’</code>，所以返回了Request对象</li></ul></li><li><p>3.6 触发了<code>LocalStack</code>类中的<code>top()</code>方法：</p><ul><li>关注 <code>return self._local.stack[-1]</code> # 返回了请求上下文<code>ctx</code>对象。</li></ul></li><li><p>3.7 触发了Local类中的<code>__getattr__（）</code>方法</p><ul><li>关注<code>return self.__storage__[self.__ident_func__()][name]</code> #返回了当前线程或携程的stack对应的value值，可以理解为返回了 <code>[ctx对象]</code></li></ul></li></ul><h2 id="4-请求结束时从local中移除上下文对象出栈"><a class="markdownIt-Anchor" href="#4-请求结束时从local中移除上下文对象出栈"></a> 4 请求结束时从Local中移除上下文对象（出栈）</h2><p>经过了添加请求上下文到<code>Local</code>的<code>storage</code>中，以及视图函数的运行返回相应对象，我们现在进行把请求上下文对象从storage中移除。</p><ul><li><p>4.0 FLask 类中的<code>wsgi_app()</code>中 <code>ctx.auto_pop()</code></p></li><li><p>4.1 触发了 <code>RequestContext</code>类中的 auto_pop()</p><ul><li>关注 <code>self.pop()</code></li></ul></li><li><p>4.2 触发了 <code>RequestContext</code>类中的 pop() 方法</p><ul><li><code>rv = _request_ctx_stack.pop()</code></li></ul></li><li><p>4.3 触发了 <code>LocalStack</code>类中的pop()的pop方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="built_in">len</span>(stack) == <span class="number">1</span>: <span class="comment"># 证明push过一次 添加过了一次对象</span></span><br><span class="line">    release_local(self._local) <span class="comment"># 在这里pop掉该线程。release_local pop掉的是一个字典</span></span><br><span class="line">    <span class="keyword">return</span> stack[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>4.4 触发了 Local类中的<code>__release_local__()</code> 方法</p><ul><li><pre class="highlight"><code class="python">self.__storage__.pop(self.__ident_func__(), <span class="hljs-literal">None</span>) <span class="hljs-comment">#在Local对象中删除掉了当前线程或者携程的请求上下文对象，</span></code></pre></li></ul></li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><p>其实操作flask的请求上下文就是操作Local中的字典<code>__storage__</code></p><ol><li><p>通过<code>REquestContext</code>类首先实例化<code>ctx</code>请求上下文对象，其内部包含请求对象</p></li><li><p>入栈，通过请求上下文对象的类的push()方法触发了<code>LocalStack</code>类的push() 方法，从而添加到Local类中的字典里。</p></li><li><p>观察导入的request源码 ，通过观察<code>LocalProxy</code>的源码，最后触发了<code>LocalStack</code>的<code>top()</code>方法得到上下文对象，再的到请求对象，从而实现<code>reuqest</code>的功能。</p></li><li><p>出站，和入栈原理相同通过请求上下文对象的类的方法，触发了<code>LocalStack</code>的<code>pop()</code>方法从而从字典中删除掉当前线程或当前携程的请求信息。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155554088-541734375..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155554088-541734375..png" alt="1553484834232" /></a></p></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;p&gt;在分析上下问之前，要做好一个心理准备，因为设计到的代码会很多，需要不懂的要跟着文档自己去翻阅源码。&lt;/p&gt;
&lt;p&gt;首先把涉及到的主要的类或者设计到的 py 页面展示如下图。下面我会以</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-3 阅读flask上下文前补充</title>
    <link href="http://example.com/2021/01/18/flask/8-3%20%E9%98%85%E8%AF%BBflask%E4%B8%8A%E4%B8%8B%E6%96%87%E5%89%8D%E8%A1%A5%E5%85%85/"/>
    <id>http://example.com/2021/01/18/flask/8-3%20%E9%98%85%E8%AF%BBflask%E4%B8%8A%E4%B8%8B%E6%96%87%E5%89%8D%E8%A1%A5%E5%85%85/</id>
    <published>2021-01-18T11:39:27.107Z</published>
    <updated>2021-01-19T08:30:28.477Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="0-预读源码必要了解的知识点"><a class="markdownIt-Anchor" href="#0-预读源码必要了解的知识点"></a> 0 预读源码必要了解的知识点</h2><p>在阅读源码之前，源码中会涉及到很多python类的特殊的用法以及类写好的功能组件，所以这里我们做一个补充，以便于接下来源码的阅读</p><h2 id="01-偏函数"><a class="markdownIt-Anchor" href="#01-偏函数"></a> 01 偏函数</h2><p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2,a3</span>):</span></span><br><span class="line">    print(a1,a2,a3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_func1 = partial(func,a1=<span class="number">1</span>,a2=<span class="number">2</span>)</span><br><span class="line">new_func1(a3=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">new_func2 = partial(func,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">new_func2(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">new_func3 = partial(func,a1=<span class="number">1</span>)</span><br><span class="line">new_func3(a2=<span class="number">2</span>,a3=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：partial括号内第一个参数是原函数，其余参数是需要固定的参数</p><p><strong>效果图</strong>：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420400-1230142937..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420400-1230142937..png" alt="1553002020199" /></a></p><h2 id="02-__add__的使用"><a class="markdownIt-Anchor" href="#02-__add__的使用"></a> 02 <code>__add__</code>的使用</h2><p>如果一个类里面定义了 <code>__add__</code>方法，如果这个类的对象 <code>+</code>另一个对象，会触发这个类的<code>__add__</code>方法，换个说法如果 <code>对象1+对象2</code> 则会触发<code>对象1</code>的 <code>__add__</code>方法，python在类中有很多类似的方法，对象会在不同情况下出发对应的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.num = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other,Foo):</span><br><span class="line">            result = self.num + other.num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = self.num + other</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">fo1 = Foo()</span><br><span class="line">fo2 = Foo()</span><br><span class="line">v1 = fo1 + fo2</span><br><span class="line">v2 = fo1 + <span class="number">4</span></span><br><span class="line">print(v1,v2)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420787-1693929097..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420787-1693929097..png" alt="1553002690004" /></a></p><h2 id="03-chain函数"><a class="markdownIt-Anchor" href="#03-chain函数"></a> 03 chain函数</h2><p>chain函数来自于itertools库，itertools库提供了非常有用的基于迭代对象的函数，而chain函数则是可以串联多个迭代对象来形成一个更大的迭代对象 。</p><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">l2 = [<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">new_iter = chain(l1,l2) <span class="comment"># 参数必须为可迭代对象</span></span><br><span class="line">print(new_iter)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> new_iter:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421124-1086324095..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421124-1086324095..png" alt="1553003580254" /></a></p><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">3</span></span><br><span class="line">list_4 = [f1, f2]</span><br><span class="line">new_iter2 = chain([f3], list_4)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> new_iter2:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421277-1702083091..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421277-1702083091..png" alt="1553003696355" /></a></p><p>作者： 小猿取经</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;0-预读源码必要了解的知识点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0-预读源码必要了解的知识点&quot;&gt;&lt;/a&gt; 0 预读源码必要了解的知识</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-2 flask之分析线程和协程</title>
    <link href="http://example.com/2021/01/18/flask/8-2%20flask%E4%B9%8B%E5%88%86%E6%9E%90%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/"/>
    <id>http://example.com/2021/01/18/flask/8-2%20flask%E4%B9%8B%E5%88%86%E6%9E%90%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/</id>
    <published>2021-01-18T11:39:27.102Z</published>
    <updated>2021-01-19T08:30:21.541Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="01-思考每个请求之间的关系"><a class="markdownIt-Anchor" href="#01-思考每个请求之间的关系"></a> 01 思考：每个请求之间的关系</h2><p>我们每一个请求进来的时候都开一个进程肯定不合理，那么如果每一个请求进来都是串行的，那么根本实现不了并发，所以我们假定每一个请求进来使用的是线程。</p><p>那么线程中数据互相不隔离，存在修改数据的时候数据不安全的问题。</p><p>假定我们的需求是，每个线程都要设置值，并且该线程打印该线程修改的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,current_thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">locals_values = Foo()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    locals_values.name = num</span><br><span class="line">    time.sleep(<span class="number">2</span>)             <span class="comment"># 取出该线程的名字</span></span><br><span class="line">    print(locals_values.name, current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                                    <span class="comment"># 设置该线程的名字</span></span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>很明显阻塞了2秒的时间所有的线程都完成了修改值，而2秒后所有的线程打印出来的时候都是9了，就产生了数据不安全的问题。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249423-1956623278..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249423-1956623278..png" alt="1552975111079" /></a></p><p>所以我们要解决这种线程不安全的问题，有如下两种解决方案。</p><ul><li><p>方案一：是加锁</p></li><li><p>方案二：使用<code>threading.local</code>对象把要修改的数据复制一份，使得每个数据互不影响。</p><p>我们要实现的并发是多个请求实现并发，而不是纯粹的只是修改一个数据，所以第二种思路更适合做我们每个请求的并发，把每个请求对象的内容都复制一份让其互相不影响。</p><p><em>详解：为什么不用加锁的思路？加锁的思路是多个线程要真正实现共用一个数据，并且该线程修改了数据之后会影响到其他线程，更适合类似于12306抢票的应用场景，而我们是要做请求对象的并发，想要实现的是该线程对于请求对象这部分内容有任何修改并不影响其他线程。所以使用方案二</em></p></li></ul><h2 id="02-threadinglocal"><a class="markdownIt-Anchor" href="#02-threadinglocal"></a> 02 threading.local</h2><p>多个线程修改同一个数据，复制多份数据给每个线程用,为每个线程开辟一块空间进行数据存储</p><p><strong>实例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,current_thread,local</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">locals_values = local()</span><br><span class="line"><span class="comment"># 可以简单理解为，识别到新的线程的时候，都会开辟一片新的内存空间，相当于每个线程对该值进行了拷贝。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    locals_values.name = num</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(locals_values.name, current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249911-1462606510..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249911-1462606510..png" alt="1552976228090" /></a></p><p>如上通过threading.local实例化的对象，实现了多线程修改同一个数据，每个线程都复制了一份数据，并且修改的也都是自己的数据。达到了我们想要的效果。</p><h2 id="03-通过字典自定义threadinglocal"><a class="markdownIt-Anchor" href="#03-通过字典自定义threadinglocal"></a> 03 通过字典自定义threading.local</h2><p><strong>实例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> get_ident,Thread,current_thread</span><br><span class="line"><span class="comment"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    storage = &#123;&#125;<span class="comment"># 初始化一个字典</span></span><br><span class="line">    get_ident = get_ident <span class="comment"># 拿到get_ident的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self,k,v</span>):</span></span><br><span class="line">        ident =self.get_ident()<span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        origin = self.storage.get(ident)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> origin:</span><br><span class="line">            origin=&#123;&#125;</span><br><span class="line">        origin[k] = v</span><br><span class="line">        self.storage[ident] = origin</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,k</span>):</span></span><br><span class="line">        ident = self.get_ident() <span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        v= self.storage[ident].get(k)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">locals_values = Local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="comment"># get_ident() 获取当前线程的唯一标记</span></span><br><span class="line">    locals_values.<span class="built_in">set</span>(<span class="string">&#x27;KEY&#x27;</span>,num)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(locals_values.get(<span class="string">&#x27;KEY&#x27;</span>),current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><strong>讲解：</strong></p><p>利用<code>get_ident()</code>获取每个线程的唯一标记作为键，然后组织一个字典storage。</p><p><strong>如</strong>：｛线程1的唯一标记：{k:v}，线程2的唯一标记：{k:v}…｝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">｛</span><br><span class="line"><span class="number">15088</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">0</span>&#125;, </span><br><span class="line">   <span class="number">8856</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">   <span class="number">17052</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">2</span>&#125;, </span><br><span class="line">   <span class="number">8836</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">3</span>&#125;, </span><br><span class="line">   <span class="number">13832</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">4</span>&#125;, </span><br><span class="line">   <span class="number">15504</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">5</span>&#125;, </span><br><span class="line">   <span class="number">16588</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">6</span>&#125;, </span><br><span class="line">   <span class="number">5164</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">7</span>&#125;, </span><br><span class="line">   <span class="number">560</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">8</span>&#125;, </span><br><span class="line">   <span class="number">1812</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>运行效果</strong>：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155250365-1961757116..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155250365-1961757116..png" alt="1552981453617" /></a></p><h2 id="04-通过setattr和getattr实现自定义threthreadinglocal"><a class="markdownIt-Anchor" href="#04-通过setattr和getattr实现自定义threthreadinglocal"></a> 04 通过setattr和getattr实现自定义threthreading.local</h2><p><strong>实例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> get_ident,Thread,current_thread</span><br><span class="line"><span class="comment"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    storage = &#123;&#125;<span class="comment"># 初始化一个字典</span></span><br><span class="line">    get_ident = get_ident <span class="comment"># 拿到get_ident的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, k, v</span>):</span></span><br><span class="line">        ident =self.get_ident()<span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        origin = self.storage.get(ident)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> origin:</span><br><span class="line">            origin=&#123;&#125;</span><br><span class="line">        origin[k] = v</span><br><span class="line">        self.storage[ident] = origin</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        ident = self.get_ident() <span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        v= self.storage[ident].get(k)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">locals_values = Local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="comment"># get_ident() 获取当前线程的唯一标记</span></span><br><span class="line">    locals_values.KEY=num</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(locals_values.KEY,current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h2 id="05-每个对象有自己的存储空间字典"><a class="markdownIt-Anchor" href="#05-每个对象有自己的存储空间字典"></a> 05 每个对象有自己的存储空间（字典）</h2><p>我们可以自定义实现了threading.local的功能，但是现在存在一个问题，如果我们想生成多个Local对象，但是会导致多个Local对象所管理的线程设置的内容都放到了类属性storage = {}里面，所以我们如果想实现每一个Local对象所对应的线程设置的内容都放到自己的storage里面，就需要重新设计代码。</p><p><strong>实例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> get_ident,Thread,current_thread</span><br><span class="line"><span class="comment"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 千万不要按照注释里这么写，否则会造成递归死循环，死循环在__getattr__中,不理解的话可以全程使用debug测试。</span></span><br><span class="line">        <span class="comment"># self.storage = &#123;&#125;</span></span><br><span class="line">        <span class="comment"># self.get_ident =get_ident</span></span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self,<span class="string">&quot;storage&quot;</span>,&#123;&#125;)</span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self,<span class="string">&quot;get_ident&quot;</span>,get_ident) <span class="comment">#借用父类设置对象的属性，避免递归死循环。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, k, v</span>):</span></span><br><span class="line">        ident =self.get_ident()<span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        origin = self.storage.get(ident)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> origin:</span><br><span class="line">            origin=&#123;&#125;</span><br><span class="line">        origin[k] = v</span><br><span class="line">        self.storage[ident] = origin</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        ident = self.get_ident() <span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        v= self.storage[ident].get(k)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">locals_values = Local()</span><br><span class="line">locals_values2 = Local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="comment"># get_ident() 获取当前线程的唯一标记</span></span><br><span class="line">    <span class="comment"># locals_values.set(&#x27;KEY&#x27;,num)</span></span><br><span class="line">    locals_values.KEY=num</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(locals_values.KEY,current_thread().name)</span><br><span class="line">    <span class="comment"># print(&#x27;locals_values2.storage：&#x27;,locals_values2.storage) #查看locals_values2.storage的私有的storage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>显示效果我们就不做演示了，和前几个案例演示效果一样。</p><h2 id="06-如果是你会如何设计flask的请求并发"><a class="markdownIt-Anchor" href="#06-如果是你会如何设计flask的请求并发"></a> 06 如果是你会如何设计flask的请求并发？</h2><ul><li><p>情况一：单进程单线程，基于全局变量就可以做</p></li><li><p>情况二：单进程多线程，基于threading.local对象做</p></li><li><p>情况三：单进程多线程多协程，如何做？</p><p><em>提示：协程属于应用级别的，协程会替代操作系统自动切换遇到 <code>IO</code>的任务或者运行级别低的任务，而应用级别的切换速度远高于操作系统的切换</em></p><p>当然如果是自己来设计框架，为了提升程序的并发性能，一定是上诉的情况三，不光考虑多线程并且要多协程，那么该如何设计呢？</p><p>在我们的flask中为了这种并发需求，依赖于底层的<code>werkzeug</code>外部包，<code>werkzeug</code>实现了保证多线程和多携程的安全，<code>werkzeug</code>基本的设计理念和上一个案例一致，唯一的区别就是在导入的时候做了一步处理，且看<code>werkzeug</code>源码。</p><p><strong><code>werkzeug.local.py</code>部分源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> greenlet <span class="keyword">import</span> getcurrent <span class="keyword">as</span> get_ident <span class="comment"># 拿到携程的唯一标识</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident <span class="comment">#线程的唯一标识</span></span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self, <span class="string">&#x27;__storage__&#x27;</span>, &#123;&#125;)</span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self, <span class="string">&#x27;__ident_func__&#x27;</span>, get_ident)</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, name, value</span>):</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br></pre></td></tr></table></figure><p>讲解：</p><p>原理就是在最开始导入线程和协程的唯一标识的时候统一命名为<code>get_ident</code>，并且先导入协程模块的时候如果报错说明不支持协程，就会去导入线程的<code>get_ident</code>，这样无论是只有线程运行还是协程运行都可以获取唯一标识，并且把这个标识的线程或协程需要设置的内容都分类存放于<code>__storage__</code>字典中。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;01-思考每个请求之间的关系&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#01-思考每个请求之间的关系&quot;&gt;&lt;/a&gt; 01 思考：每个请求之间的</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-1 flask高级</title>
    <link href="http://example.com/2021/01/18/flask/8-1%20flask%E9%AB%98%E7%BA%A7/"/>
    <id>http://example.com/2021/01/18/flask/8-1%20flask%E9%AB%98%E7%BA%A7/</id>
    <published>2021-01-18T11:39:27.097Z</published>
    <updated>2021-01-19T08:30:17.014Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="01-请求扩展"><a class="markdownIt-Anchor" href="#01-请求扩展"></a> 01 请求扩展</h2><h3 id="01-before_first_request-项目启动后第一次请求的时候执行"><a class="markdownIt-Anchor" href="#01-before_first_request-项目启动后第一次请求的时候执行"></a> 01 before_first_request ：项目启动后第一次请求的时候执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;第一次请求的时候执行&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="02-before_request每次请求之前执行"><a class="markdownIt-Anchor" href="#02-before_request每次请求之前执行"></a> 02 before_request：每次请求之前执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;每次请求之前执行&#x27;</span>)</span><br><span class="line">    <span class="comment"># return &#x27;直接return&#x27;    # 如果有一个写了return返回值，那么其他的before_request不会执行，视图也不会执行。</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>可以写多个</li><li>如果有一个写了return返回值，那么其他的before_request不会执行，视图也不会执行。</li></ul><h3 id="03-after_request每次请求之后执行请求出现异常不会执行"><a class="markdownIt-Anchor" href="#03-after_request每次请求之后执行请求出现异常不会执行"></a> 03 after_request：每次请求之后执行，请求出现异常不会执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span>(<span class="params">result</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;每次请求之后执行，请求出现异常不会执行&#x27;</span>)</span><br><span class="line">    <span class="comment"># 这个result是封装的响应对象，需要return否则报错</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="04-errorhandler可以自定义监听响应的状态码并处理"><a class="markdownIt-Anchor" href="#04-errorhandler可以自定义监听响应的状态码并处理"></a> 04 errorhandler：可以自定义监听响应的状态码并处理：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errorhandler</span>(<span class="params">error</span>):</span></span><br><span class="line">    print(error)  <span class="comment"># 是具体的错误信息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;404页面跑到了火星上面去了&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errorhandler</span>(<span class="params">error</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;errorhandler的错误信息&#x27;</span>)</span><br><span class="line">    print(error)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;服务器内部错误500&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="05-teardown_request每次请求之后绑定了一个函数在非debug模式下即使遇到了异常也会执行"><a class="markdownIt-Anchor" href="#05-teardown_request每次请求之后绑定了一个函数在非debug模式下即使遇到了异常也会执行"></a> 05 teardown_request：每次请求之后绑定了一个函数，在<code>非debug</code>模式下即使遇到了异常也会执行。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">terardown_reqquest</span>(<span class="params">error</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;无论视图函数是否有错误，视图函数执行完都会执行&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;想要此函数生效，debug不能为True&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;error 是具体的错误信息&#x27;</span>)</span><br><span class="line">    print(error)</span><br></pre></td></tr></table></figure><h3 id="06-template_global全局模板标签"><a class="markdownIt-Anchor" href="#06-template_global全局模板标签"></a> 06 template_global()：全局模板标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1+a2</span><br><span class="line"><span class="comment">#&#123;&#123;add(1,2)&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这个可以在模板中作为全局的标签使用,在模板中可以直接调用，调用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;add(1,2)&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="07-template_filter全局模板过滤器"><a class="markdownIt-Anchor" href="#07-template_filter全局模板过滤器"></a> 07 template_filter：全局模板过滤器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_filter</span>(<span class="params">a1, a2, a3</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br></pre></td></tr></table></figure><p>这个可以在模板中作为全局过滤器使用，在模板中可以直接调用，调用方式(<em>注意同template_global的区别</em>) ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">1</span>|add_filter(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>优势：</strong></p><p>全局模板标签和全局模板过滤器简化了需要手动传一个函数给模板调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a1,a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1+a2</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,test=test)</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment"># index.html</span></span><br><span class="line">```</span><br><span class="line">&#123;&#123;test(<span class="number">22</span>,<span class="number">22</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure><h2 id="02-flask中间件"><a class="markdownIt-Anchor" href="#02-flask中间件"></a> 02 flask中间件</h2><p>Flask的中间件的性质，就是可以理解为在整个请求的过程的前后定制一些个性化的功能。</p><h5 id="flask的中间件的实现案例"><a class="markdownIt-Anchor" href="#flask的中间件的实现案例"></a> flask的中间件的实现案例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;视图函数中&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_middle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,wsgi_app</span>):</span></span><br><span class="line">        self.wsgi_app = wsgi_app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;中间件的代码上&#x27;</span>)</span><br><span class="line">        obj = self.wsgi_app( *args, **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;中间件的代码下&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   </span><br><span class="line">    app.wsgi_app = my_middle(app.wsgi_app)</span><br><span class="line">     <span class="comment"># app.wsgi_app(environ, start_response)</span></span><br><span class="line">    app.run()</span><br><span class="line">    <span class="comment"># 梳理一下 根据werkzeug我们可以知道 每次请求必然经历了app（）</span></span><br><span class="line">    <span class="comment"># 所以我们要查看Flask的源码找到__call__方法</span></span><br><span class="line">    <span class="comment"># 找到了__call__方法后发现执行了return self.wsgi_app(environ, start_response)</span></span><br><span class="line">    <span class="comment"># 然后flask里面所有的内容调度都是基于这个self.wsgi_app(environ, start_response)，这就是就是flask的入口</span></span><br><span class="line">    <span class="comment"># 如何实现中间件呢？ 原理上就是重写app.wsgi_app，然后在里面添加上一些自己想要实现的功能。</span></span><br><span class="line">    <span class="comment"># 首先分析  app.wsgi_app需要加括号执行  所以我们把app.wsgi_app做成一个对象，并且这个对象需要加括号运行</span></span><br><span class="line">    <span class="comment"># 也就是会触发这个对象的类的__call__()方法</span></span><br><span class="line">    <span class="comment"># 1 那么就是app.wsgi_app=对象=自己重写的类(app.wsgi_app) ，我们需要在自己重写的类里面实现flask源码中的app.wsgi_app,在实例化的过程把原来的app.wsgi_app变成对象的属性</span></span><br><span class="line">    <span class="comment"># 2         app.wsgi_app() =对象() = 自己重写的类.call()方法</span></span><br><span class="line">    <span class="comment"># 3         那么上面的代码就可以理解了，在自己重写的类中实现了原有的__call__方法</span></span><br></pre></td></tr></table></figure><h5 id="梳理"><a class="markdownIt-Anchor" href="#梳理"></a> 梳理：</h5><ul><li>根据<code>werkzeug</code>我们可以知道 每次请求必然经历了<code>app（）</code></li><li>所以我们要查看Flask的源码找到<code>__call__</code>方法</li><li>找到了Flask的<code>__call__</code>方法后发现执行了<code>return self.wsgi_app(environ, start_response)</code></li><li>flask里面所有的内容调度都是基于这个<code>self.wsgi_app(environ, start_response)</code>，这就是就是<code>flask</code>的入口，也就是selef是app，也就是<code>app.wsgi_app（environ, start_response）</code>为程序的入口。</li><li>如何实现中间件呢？ 原理上就是重写app.wsgi_app，然后在里面添加上一些自己想要实现的功能。</li><li>首先分析 app.wsgi_app需要加括号执行 所以我们把app.wsgi_app做成一个对象，并且这个对象需要加括号运行。</li><li>也就是会触发这个对象的类的<code>__call__()</code>方法。</li></ul><h5 id="实操理解"><a class="markdownIt-Anchor" href="#实操理解"></a> 实操理解：</h5><ol><li><p><strong>app.wsgi_app=对象=自己重写的类(app.wsgi_app)</strong></p><p><em>提示：我们需要在自己重写的类里面实现flask源码中的app.wsgi_app,在实例化的过程把原来的 app.wsgi_app变成对象的属性</em></p></li><li><p><strong>app.wsgi_app(） =对象() = 自己重写的类.call()方法</strong></p></li></ol><p>app.wsgi_app(实参） =对象(实参) = 自己重写的类.call(实参)方法</p><ol start="3"><li><strong>那么上面的代码就可以理解了，在自己重写的类中实现了原有的call方法，并且重新调用了原有的app.wsgi_app</strong></li></ol><h2 id="03-蓝图"><a class="markdownIt-Anchor" href="#03-蓝图"></a> 03 蓝图：</h2><h3 id="31-蓝图的基本使用"><a class="markdownIt-Anchor" href="#31-蓝图的基本使用"></a> 3.1 蓝图的基本使用</h3><p>在我的flask中，我们可以利用蓝图对程序目录的划分。</p><p>思考如果我们有很多个视图函数，比如下面这样我们是不是应该抽取出来专门的py文件进行管理呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;logout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;add_order&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;modify_order&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;modify_order&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>上面的这种是不是会显得主运行文件特别乱，这个时候我们的蓝图就闪亮登场了。</p><h5 id="311实例"><a class="markdownIt-Anchor" href="#311实例"></a> <strong>3.1.1实例：</strong></h5><p>项目目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-templates</span><br><span class="line">-static</span><br><span class="line">-views</span><br><span class="line">    -user.py</span><br><span class="line">    -order.py</span><br><span class="line">-app.py</span><br></pre></td></tr></table></figure><p>views/user.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 创建蓝图</span></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 利用蓝图创建路由关系</span></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;logout&quot;</span></span><br></pre></td></tr></table></figure><p>views/order.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">order_bp = Blueprint(<span class="string">&#x27;order&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;add_order&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/modify_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;modify_order&quot;</span></span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> views.user <span class="keyword">import</span> user_bp</span><br><span class="line"><span class="keyword">from</span> views.order <span class="keyword">import</span> order_bp</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 3 注册蓝图</span></span><br><span class="line">app.register_blueprint(user_bp)</span><br><span class="line">app.register_blueprint(order_bp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>访问：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215474-577184084..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215474-577184084..png" alt="1552424766233" /></a></p><p>其他的几条路由也是直接访问，在此就不做展示了。</p><p><strong>讲解：</strong></p><p>观察views/user.py</p><ul><li><p>我们可以把所有的视图函数抽出来多个文件。</p></li><li><p>在这里我们通过<code>user_bp = Blueprint('user',__name__)</code>创建一个蓝图对象</p><p>参数讲解：</p><ul><li>user_bp ：是用于指向创建出的蓝图对象，可以自由命名。</li><li>Blueprint的第一个参数自定义命名的<code>‘user’</code>用于<code>url_for</code>翻转<code>url</code>时使用。</li><li><code>__name__</code>用于寻找蓝图自定义的模板和静态文件使用。</li></ul></li><li><p>蓝图对象的用法和之前实例化出来的app对象用法很像，可以进行注册路由。</p></li></ul><p><a href="http://xn--app-jn0fj93r.py">观察app.py</a></p><ul><li>这里我们需要手动的去注册一下蓝图，才会建立上url和视图函数的映射关系。</li></ul><p><strong>关键词：</strong></p><ol><li><p>创建蓝图</p><p><code>user_bp = Blueprint('user',__name__)</code></p></li><li><p>利用蓝图创建路由关系</p><p>@bp.route(’/login/’)<br />def login():<br />return “login”</p></li><li><p>注册蓝图<br />app.register_blueprint(bp)</p></li></ol><h3 id="32-蓝图的高级使用重点备课内容"><a class="markdownIt-Anchor" href="#32-蓝图的高级使用重点备课内容"></a> 3.2 蓝图的高级使用（重点备课内容）</h3><h4 id="321-蓝图中实现path部分的url前缀"><a class="markdownIt-Anchor" href="#321-蓝图中实现path部分的url前缀"></a> 3.2.1 蓝图中实现path部分的url前缀</h4><p>创建蓝图的时候填写<code>url_prefix</code>可以为增加url的path部分的前缀，可以更方便的去管理访问视图函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 创建蓝图</span></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line"><span class="comment"># 注意斜杠跟视图函数的url连起来时候不要重复了。</span></span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215854-919173490..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215854-919173490..png" alt="1552425130691" /></a></p><p><strong>注意：</strong></p><ol><li><p>斜杠跟视图函数的url连起来时候不要重复了。</p><p>图解：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216014-1683480120..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216014-1683480120..png" alt="1552426158515" /></a></p></li></ol><p>2.url加前缀的时候也可以再注册蓝图的时候加上，更推荐这么做，因为代码的可读性更强。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.register_blueprint(user_bp,url_prefix=<span class="string">&#x27;/order&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="332-蓝图中自定义模板路径"><a class="markdownIt-Anchor" href="#332-蓝图中自定义模板路径"></a> 3.3.2 蓝图中自定义模板路径</h4><p>创建蓝图的时候填写<code>template_folder</code>可以指定自定义模板路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 创建蓝图                                           #所对应的参数路径是相对于蓝图文件的</span></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>,template_folder=<span class="string">&#x27;views_templates&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li><p>蓝图虽然指定了自定义的模板查找路径，但是查找顺序还是会先找主app规定的模板路径(templates)，找不到再找蓝图自定义的模板路径。</p></li><li><p><code>Blueprint</code>的<code>template_folder</code>参数指定的自定义模板路径是相对于蓝图文件的路径。</p><p>图解：</p><p><strong>(01)</strong></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216222-141055298..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216222-141055298..png" alt="1552425776786" /></a></p><p><strong>(02)</strong></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216436-1555848420..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216436-1555848420..png" alt="1552425616132" /></a></p></li></ol><h4 id="333-蓝图中自定义静态文件路径"><a class="markdownIt-Anchor" href="#333-蓝图中自定义静态文件路径"></a> 3.3.3 蓝图中自定义静态文件路径</h4><p>创建蓝图的时候填写<code>static_folder</code>可以指定自定义静态文件的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>,template_folder=<span class="string">&#x27;views_templates&#x27;</span>,</span><br><span class="line">                    static_folder=<span class="string">&#x27;views_static&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>在模板中使用自定义的静态文件路径需要依赖<code>url_for()</code></li><li>下节讲解如何在模板中应用蓝图自定义的静态文件。</li></ol><h4 id="334-url_for翻转蓝图"><a class="markdownIt-Anchor" href="#334-url_for翻转蓝图"></a> 3.3.4 url_for()翻转蓝图</h4><h5 id="视图中翻转url"><a class="markdownIt-Anchor" href="#视图中翻转url"></a> 视图中翻转url:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;创建蓝图时第一个参数.蓝图下的函数名&#x27;</span>)</span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">url_for(<span class="string">&#x27;user.login&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="模板中翻转url"><a class="markdownIt-Anchor" href="#模板中翻转url"></a> 模板中翻转url:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&#39;创建蓝图时第一个参数.蓝图下的函数名&#39;) &#125;&#125;</span><br><span class="line"># 如：</span><br><span class="line">&#123;&#123; url_for(&#39;user.login&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="模板中应用蓝图自定义路径的静态文件"><a class="markdownIt-Anchor" href="#模板中应用蓝图自定义路径的静态文件"></a> 模板中应用蓝图自定义路径的静态文件：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&#39;创建蓝图时第一个参数.static&#39;,filename&#x3D;&#39;蓝图自定义静态文件路径下的文件&#39;) &#125;&#125;</span><br><span class="line"># 如：</span><br><span class="line">&#123;&#123; url_for(&#39;user.static&#39;,filename&#x3D;&#39;login.css&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="335-蓝图子域名的实现"><a class="markdownIt-Anchor" href="#335-蓝图子域名的实现"></a> 3.3.5 蓝图子域名的实现</h4><p>创建蓝图的时候填写<code>subdomain</code>可以指定子域名，可以参考之前注册路由中实现子域名。</p><p><strong>（1）</strong> 配置C:\Windows\System32\drivers\etc\hosts</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> bookmanage.com</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> admin.bookmanage.com</span><br></pre></td></tr></table></figure><p>**（2）**给app增加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SERVER_NAME&#x27;</span>] = <span class="string">&#x27;bookmanage.com:5000&#x27;</span></span><br></pre></td></tr></table></figure><p>**（3）**创建蓝图的时候添加子域名 <code>subdomain='admin'</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 创建蓝图                                           </span></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>,template_folder=<span class="string">&#x27;views_templates&#x27;</span>,</span><br><span class="line">                    static_folder=<span class="string">&#x27;views_static&#x27;</span>,subdomain=<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 利用蓝图创建路由关系</span></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login_master.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>（4）</strong> <a href="http://xn--admin-6u8oj48c.bookmanage.com:5000/user/login/">访问admin.bookmanage.com:5000/user/login/</a></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216641-888219773..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216641-888219773..png" alt="1552428071447" /></a></p><h4 id="336-蓝图中使用自己请求扩展"><a class="markdownIt-Anchor" href="#336-蓝图中使用自己请求扩展"></a> 3.3.6 蓝图中使用自己请求扩展</h4><p>在蓝图中我们可以利用创建好的蓝图对象，设置访问蓝图的视图函数的时候触发蓝图独有的请求扩展。</p><p><strong>例如：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">order_bp = Blueprint(<span class="string">&#x27;order&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;add_order&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_bp_before_request</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;请登录&#x27;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>只有访问该蓝图下的视图函数时候才会触发该蓝图的请求扩展。</li><li>可以这么理解：相当app的请求扩展是全局的，而蓝图的请求扩展是局部的只对本蓝图下的视图函数有效。</li></ul><h3 id="33-使用蓝图之中小型系统"><a class="markdownIt-Anchor" href="#33-使用蓝图之中小型系统"></a> 3.3 使用蓝图之中小型系统</h3><p>目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-flask_small_pro</span><br><span class="line">-app01</span><br><span class="line">    -__init__.py</span><br><span class="line">    -static</span><br><span class="line">        -templates</span><br><span class="line">        -views</span><br><span class="line">        -order.py</span><br><span class="line">            -user.py</span><br><span class="line">     -manage.py </span><br><span class="line">        </span><br><span class="line">__init__.py</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> app01.views.user <span class="keyword">import</span> user_bp</span><br><span class="line"><span class="keyword">from</span> app01.views.order <span class="keyword">import</span> order_bp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.register_blueprint(user_bp,url_prefix=<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line">app.register_blueprint(order_bp)</span><br></pre></td></tr></table></figure><p><a href="http://user.py">user.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;logout&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="http://order.py">order.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">order_bp = Blueprint(<span class="string">&#x27;order&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;buy_order&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/modify_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;modify_order&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="http://manage.py">manage.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="34-使用蓝图之使用大型系统"><a class="markdownIt-Anchor" href="#34-使用蓝图之使用大型系统"></a> 3.4 使用蓝图之使用大型系统</h3><p>这里所谓的大型系统并不是绝对的大型系统，而是相对规整的大型系统，相当于提供了一个参考，在真实的生成环境中会根据公司的项目以及需求，规划自己的目录结构。</p><p>文件路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">│  run.py  </span><br><span class="line">│</span><br><span class="line">│</span><br><span class="line">└─pro_flask  <span class="comment"># 文件夹</span></span><br><span class="line">    │  __init__.py </span><br><span class="line">    │</span><br><span class="line">    ├─admin <span class="comment"># 文件夹</span></span><br><span class="line">    │  │  views.py</span><br><span class="line">    │  │  __init__.py</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─static <span class="comment"># 文件夹</span></span><br><span class="line">    │  └─templates  <span class="comment"># 文件夹</span></span><br><span class="line">    │</span><br><span class="line">    └─web<span class="comment"># 文件夹</span></span><br><span class="line">       │  views.py</span><br><span class="line">       │  __init__.py</span><br><span class="line">       │</span><br><span class="line">       ├─static  <span class="comment"># 文件夹</span></span><br><span class="line">       └─templates <span class="comment"># 文件夹</span></span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><a href="http://run.py">run.py</a> 启动app</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pro_flask <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><code>__init__.py</code> 实例化核心类，导入蓝图对象，注册蓝图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> .admin <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .web <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app.register_blueprint(admin, url_prefix=<span class="string">&#x27;/admin&#x27;</span>)</span><br><span class="line">app.register_blueprint(web)</span><br></pre></td></tr></table></figure><p><a href="http://admin.views.py">admin.views.py</a> 完成注册路由以及视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Admin.Index&#x27;</span></span><br></pre></td></tr></table></figure><p><code>admin.__init__.py</code> 生成蓝图对象导入views，使得views的代码运行完成注册路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">admin = Blueprint(</span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    __name__,</span><br><span class="line">    template_folder=<span class="string">&#x27;templates&#x27;</span>,</span><br><span class="line">    static_folder=<span class="string">&#x27;static&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br></pre></td></tr></table></figure><p>web文件夹下和admin文件夹下目录构成完全一致，这里就不举例子了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;01-请求扩展&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#01-请求扩展&quot;&gt;&lt;/a&gt; 01 请求扩展&lt;/h2&gt;
&lt;h3 id=&quot;01-bef</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>6 flask脚本</title>
    <link href="http://example.com/2021/01/18/flask/6%20flask%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2021/01/18/flask/6%20flask%E8%84%9A%E6%9C%AC/</id>
    <published>2021-01-18T11:39:27.089Z</published>
    <updated>2021-01-19T08:30:07.529Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="61-集成python-shell"><a class="markdownIt-Anchor" href="#61-集成python-shell"></a> 6.1 集成Python shell</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在实际的开发中，不免有一些任务需要在`shell`下完成。如：</span><br><span class="line">- 为cms后台添加超级管理员的需求，</span><br><span class="line">    - 如迁移数据库的需求，定时任务等等，</span><br><span class="line">诸如这类需求更适合在shell中去操作（大部分需要在shell中去操作的都是权限比较高的任务）。 </span><br></pre></td></tr></table></figure><p><em>提示：迁移数据库就是用来解决数据库更新问题，解决之前我们学的<code>db.create_all()</code>和<code>db.drop_all()</code>更新数据库的时候丢失数据的问题。</em></p><p>flask官方提供了一个扩展组件<code>flask-script</code>可以实现在<code>shell</code>下操作我们的<code>Flask</code>项目。</p><h3 id="611-flask-script的用法"><a class="markdownIt-Anchor" href="#611-flask-script的用法"></a> 6.1.1 flask-script的用法：</h3><p>1 由于<code>flask-script</code>是Flask的一个扩展组件，同往常一样首先在虚拟环境中安装我们的<code>flask_script</code>包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-script</span><br></pre></td></tr></table></figure><h4 id="6111-示例flask-script的简单实现"><a class="markdownIt-Anchor" href="#6111-示例flask-script的简单实现"></a> 6.1.1.1 示例：flask-script的简单实现</h4><ul><li>项目目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">│  manage.py</span><br><span class="line">│  server.py</span><br><span class="line">│</span><br><span class="line">├─static  <span class="comment"># 文件夹</span></span><br><span class="line">├─templates <span class="comment"># 文件夹</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://server.py">server.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><ul><li><a href="http://manage.py">manage.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p><strong>解读：<a href="http://manage.py">manage.py</a></strong></p><p><strong>（1）</strong> 从<code>flask_script</code>模块中导入<code>flask_script</code>的核心类<code>Manager</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from flask_script import Manager </span><br></pre></td></tr></table></figure><p><strong>（2）</strong> 从<code>server.py</code>模块中把<code>app</code>对象导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> app</span><br></pre></td></tr></table></figure><p><strong>（3）</strong> 从<code>Manager()</code>类传入<code>app</code>对象实例化出<code>manager</code>对象，<code>manager</code>对象用于以后所有添加命令相关操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager = Manager(app)</span><br></pre></td></tr></table></figure><p>**（4）**利用<code>@manager.command</code>装饰器添加<code>以被装饰函数的名字命名的一条命令</code>与<code>被装饰函数的映射</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command   </span><span class="comment"># 相当于添加了一条hello命令，可以调用到hello函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>（5）</strong><code>manager</code>调用<code>run</code>方法之前定义的命令才会生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p><strong>在<code>shell</code>下操作命令</strong></p><p>在<code>shell</code>中切入到该<code>manage.py</code>的目录下，并且进入虚拟环境。输入命令<code>python manage.py hello</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;python manage.py hello</span><br></pre></td></tr></table></figure><p>命令中的<code>hello</code>是<code>@manager.command</code>装饰器装饰的函数名</p><p>执行命令后会调用<code>hello</code>函数</p><p>如图所示实现了调用<code>hello</code>函数</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155049684-1372091286..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155049684-1372091286..png" alt="1549965903321" /></a></p><h4 id="6111命令添加方式"><a class="markdownIt-Anchor" href="#6111命令添加方式"></a> 6.1.1.1命令添加方式：</h4><h5 id="第一种无参命令"><a class="markdownIt-Anchor" href="#第一种无参命令"></a> 第一种（无参命令）：</h5><p>使用<code>manager.commad</code>方式添加命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;无参命令&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;python manage.py demo</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050107-2129786014..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050107-2129786014..png" alt="1549967813932" /></a></p><h5 id="第二种有参命令"><a class="markdownIt-Anchor" href="#第二种有参命令"></a> 第二种（有参命令）:</h5><p>使用<code>manager.option('-简写的命令'，‘--全写的命令’，dest=‘传给函数的形参’)</code>添加命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@manager.option(<span class="params"><span class="string">&quot;-u&quot;</span>,<span class="string">&quot;--username&quot;</span>,dest=<span class="string">&quot;username&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@manager.option(<span class="params"><span class="string">&quot;-p&quot;</span>,<span class="string">&quot;--password&quot;</span>,dest=<span class="string">&quot;password&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">username, password</span>):</span></span><br><span class="line">    print(<span class="string">&quot;用户名:&#123;&#125;  密码: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(username,password))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;python manage.py login -u mark -p <span class="number">123</span></span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050295-237683571..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050295-237683571..png" alt="1549968703583" /></a></p><h5 id="第三种子命令"><a class="markdownIt-Anchor" href="#第三种子命令"></a> 第三种（子命令）：</h5><p>比如一个功能对应着很多个命令，这个时候就可以用子命令来实现，可以将这些命令的映射单独放到一个文件方便管理。在这个放着很多命令映射的文件中实例化Manager类出一个新的对象，并在<code>manage.py</code>文件中通过<code>manager.add_command(&quot;子命令&quot;,Manager对象)</code>来添加子命令</p><p><strong>示例：</strong></p><p>在之前的6.1.1.1实例的项目目录中新建文件<code>db_script.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">│  manage.py</span><br><span class="line">│  server.py</span><br><span class="line">│  db_script.py</span><br><span class="line">│</span><br><span class="line">├─static  <span class="comment"># 文件夹</span></span><br><span class="line">├─templates <span class="comment"># 文件夹</span></span><br></pre></td></tr></table></figure><ul><li>db_script.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">db_Manager = Manager()</span><br><span class="line"></span><br><span class="line"><span class="meta">@db_Manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;初始迁移仓库&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@db_Manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">migrate</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;生成迁移脚本&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@db_Manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span>():</span></span><br><span class="line">    print(<span class="string">&quot;迁移脚本映射到数据库&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><a href="http://manage.py">manage.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> db_script <span class="keyword">import</span> db_Manager <span class="comment"># 导入子命令文件的Manager类实例化出的对象</span></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line">manager.add_command(<span class="string">&quot;db&quot;</span>,db_Manager) <span class="comment"># 添加子命令</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py db init</span><br><span class="line">python manage.py db migrate</span><br><span class="line">python manage.py db upgrade</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050820-1276211128..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050820-1276211128..png" alt="1549969697643" /></a></p><h2 id="62-项目重构"><a class="markdownIt-Anchor" href="#62-项目重构"></a> 6.2 项目重构</h2><h3 id="621-解耦配置信息以及模型文件信息触发循环导入问题"><a class="markdownIt-Anchor" href="#621-解耦配置信息以及模型文件信息触发循环导入问题"></a> 6.2.1 解耦配置信息以及模型文件信息触发循环导入问题</h3><p>随着项目代码的增多 我们再把连接数据库的信息放到主<code>app</code>文件当中会应影响我们代码的可读性，那么我们相关数据库配置的信息应该放到一个<code>config</code>文件当中去，像我们当时加载debug配置一样使用<code>app.config.from_object(config)</code>一样加载我们的数据库连接信息。</p><p>新建<code>config.py</code>文件,把连接数据库相关的信息放到<code>config.py</code>中去</p><p>然后在主<code>app</code>文件中加载配置信息<code>app.config.from_object(config)</code></p><ul><li><a href="http://config.py">config.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">DATABASE_NAME = <span class="string">&#x27;01_db&#x27;</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line">DB_URI = <span class="string">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\</span><br><span class="line">    .<span class="built_in">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URI = DB_URI</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>那么主<code>app</code>中的模型的文件也十分影响代码易读性，也应该新开一个<code>modles</code>文件夹，把我们的模型表放到<code>modles</code>中去</p><ul><li><a href="http://models.py">models.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>,nullable=<span class="literal">False</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>),server_default=<span class="string">&#x27;&#x27;</span>,comment=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    tel = db.Column(db.String(<span class="number">16</span>),server_default=<span class="string">&#x27;&#x27;</span>,comment=<span class="string">&quot;电话&quot;</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://app.py">app.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> UserInfo</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>这是代码易读性提高了，但是新的问题随之出现了，出现了一个循环导入的问题。</p><p><code>app.py</code> 文件导入了<code>models</code>，我们<code>python</code>中而导入文件必然会把需要导入的文件从上到下执行一遍，那么就触发了<code>models</code>的执行，而models执行的时候需要从<code>app</code>导入<code>db</code>，出现了一个死循环如下图，这就是python循环导入的问题。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051193-1643881132..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051193-1643881132..png" alt="1549982777399" /></a></p><h3 id="622-重构项目解决循环导入问题"><a class="markdownIt-Anchor" href="#622-重构项目解决循环导入问题"></a> 6.2.2 重构项目解决循环导入问题</h3><p>为了解耦配置信息以及模型表信息，导致了<code>models.py</code>和<code>app.py</code>出现了循环导入问题，我们的解决方案是新开启一个文件<code>exts.py</code>，在<code>exts.py</code>中生成db对象，解决循环导入问题。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051362-794772624..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051362-794772624..png" alt="1549982940543" /></a></p><h4 id="实例6221解决循环导入问题之后重构项目"><a class="markdownIt-Anchor" href="#实例6221解决循环导入问题之后重构项目"></a> <strong>实例6.2.2.1：解决循环导入问题之后重构项目</strong></h4><ul><li>项目目录：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">│  app.py</span><br><span class="line">│  config.py</span><br><span class="line">│  exts.py</span><br><span class="line">│  models.py</span><br><span class="line">│</span><br><span class="line">├─static <span class="comment"># 文件夹</span></span><br><span class="line">├─templates  <span class="comment"># 文件夹</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://config.py">config.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">DATABASE_NAME = <span class="string">&#x27;01_db&#x27;</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line">DB_URI = <span class="string">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\</span><br><span class="line">    .<span class="built_in">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URI = DB_URI</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://exts.py">exts.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br></pre></td></tr></table></figure><ul><li><a href="http://models.py">models.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user_info&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>),nullable=<span class="literal">False</span>,server_default=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><a href="http://app.py">app.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> UserInfo</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line"></span><br><span class="line">db.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="63-使用flask-migrate迁移数据库"><a class="markdownIt-Anchor" href="#63-使用flask-migrate迁移数据库"></a> 6.3 使用Flask-Migrate迁移数据库</h2><p>之前我们更新数据库的方式是先删除表然后再创建表简单粗暴，但是会丢失掉所有原来表中的数据。做web开发的我们应该深知数据无价，所以这个时候需要数据库迁移工具来完成这个工作，<code>SQLAlcheme</code>的开发者<code>Michael Bayer</code>开发了一个数据库迁移工具—<code>Alembic</code>来实现数据库的迁移，<code>SQLAlchemy</code>翻译成汉语是炼金术，而蒸馏器（<code>Alembic</code>）正是炼金术士最需要的工具。</p><p>我们的<code>flask-sqlalchmy</code>扩展组件正是基于<code>SQLAlchemy</code>，当然<code>Flask</code>也有专门做数据库迁移的扩展组件<code>Flask-Migrate</code>，同样<code>Flask-Migrate</code>正是基于<code>Alembic</code>。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051827-500166934..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051827-500166934..png" alt="img" /></a></p><h3 id="631-flask-migrate的用法"><a class="markdownIt-Anchor" href="#631-flask-migrate的用法"></a> 6.3.1 Flask-Migrate的用法：</h3><p>1 由于<code>flask-migrate</code>是Flask的一个扩展组件，同往常一样首先在虚拟环境中安装我们的<code>flask_migrate</code>包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-migrate</span><br></pre></td></tr></table></figure><p>为了导出数据库迁移命令，Flask-Migrate提供了一个MigrateCommand类，可附加到Flask-Script的manager对象上。在这个例子中，MigrateCommand类使用db命令附加。</p><p>我们的<code>Flask_Migrate</code>的操作是在<code>shell</code>下完成的，所以要基于<code>Flask-script</code>，<code>Flask-Migrate</code>提供了一个<code>MigrateCommand</code>类，需要附加到<code>Flask-Script</code>的<code>manager</code>对象上，完成命令的创建，并且<code>Flask_Migrate</code>同时体统了<code>Migrate</code>类，需要加载核心对象<code>app</code>和数据库对象<code>db</code>。完成迁移工具的配置。</p><h4 id="示例6311配置flask_migrate"><a class="markdownIt-Anchor" href="#示例6311配置flask_migrate"></a> 示例6.3.1.1：配置Flask_Migrate</h4><p>首先在<code>实例6.2.2.1</code><a href="http://xn--manage-9v7ii2ykk5a.py">中创建manage.py</a></p><ul><li>manage.py代码如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate,MigrateCommand</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> app</span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Migrate(app,db)</span><br><span class="line"></span><br><span class="line">manager.add_command(<span class="string">&#x27;db&#x27;</span>,MigrateCommand)</span><br></pre></td></tr></table></figure><p><strong>解读：</strong></p><p><strong>（1）</strong> 首先从<code>flask_migrate</code>中导入 <code>Migrate，MigrateCommand</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate,MigrateCommand</span><br></pre></td></tr></table></figure><p><strong>（2）</strong><code>Migrate</code>加载<code>app</code>对象和<code>db</code>对象获取数据库的配置信息以及模型表信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Migrate(app,db)</span><br></pre></td></tr></table></figure><p>**（3）**把<code>MigrateCommand</code>附加到<code>manager</code>创建迁移数据库的子命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.add_command(<span class="string">&#x27;db&#x27;</span>,MigrateCommand)</span><br></pre></td></tr></table></figure><h4 id="迁移脚本命令"><a class="markdownIt-Anchor" href="#迁移脚本命令"></a> <strong>迁移脚本命令</strong></h4><p><strong>（1）</strong> <strong>创建迁移仓库</strong></p><p>首先切换到项目目录下并且切入到虚拟环境中输入命令<code>python manage.py db init</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; python manage.py db init</span><br></pre></td></tr></table></figure><p>该命令初始化我们的迁移仓库，并且在我们的项目目录中创建迁移仓库文件</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051992-1462678497..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051992-1462678497..png" alt="1549988156697" /></a></p><p><strong>（2）</strong> <strong>创建迁移脚本</strong></p><p>依然在我们的<code>shell</code>中输入命令<code>python manage.py db migrate</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; python manage.py db migrate</span><br></pre></td></tr></table></figure><p>该命令会在数据库创建一张 <code>alembic_version</code> 表，存放着数据库迁移脚本的版本信息，该命令会搜集到需要迁移的模型表信息，写入到脚本中，但是并没有真正的映射到数据库中。</p><p><strong>（3）更新数据库</strong></p><p>依然在我们的<code>shell</code>中输入命令<code>python manage.py db upgrade</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py db upgrade</span><br></pre></td></tr></table></figure><p>对于第一次迁移来说，其作用和db.create_all()方法一样，但是在随后的迁移中，upgrade命令可以把模型表改动的部分映射到数据库中，实现了一个更新的效果，并且不影响之前保存的数据。</p><p><em>提示：在首次执行这个命令之前如果该数据库的库内已经有了一些表，并且这些表没有与我们的模型映射，会自动删除掉这些表。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;61-集成python-shell&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#61-集成python-shell&quot;&gt;&lt;/a&gt; 6.1 集成P</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>5 数据库</title>
    <link href="http://example.com/2021/01/18/flask/5%20%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2021/01/18/flask/5%20%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-01-18T11:39:27.081Z</published>
    <updated>2021-01-19T08:30:03.770Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="51-orm"><a class="markdownIt-Anchor" href="#51-orm"></a> 5.1 ORM</h2><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222009447-565965275.gif" alt="img" /></p><p>对象关系映射（英语：<strong>(Object Relational Mapping</strong>，简称<strong>ORM</strong>，或<strong>O/RM</strong>，或<strong>O/R mapping</strong>），是一种程序技术，<strong>用于实现面向对象编程语言里不同类型系统的数据之间的转换</strong> 。</p><p>ORM是“对象-关系-映射”的简称。在我们的web应用开发中<strong>ORM把底层的SQL数据实体转化成高层的Python对象</strong>。只需要<strong>通过Python代码即可完成数据库操作</strong>。</p><h2 id="52-在flask中应用orm"><a class="markdownIt-Anchor" href="#52-在flask中应用orm"></a> 5.2 在Flask中应用ORM</h2><p>选择ORM框架时，在我们Flask中更推荐使用Flask的扩展组件<code>Flask-SQLchemy</code> 。</p><p>Python实现的ORM有<code>SQLAlchemy</code>、<code>Peewee</code>、<code>PonyORM</code>等，</p><p>其中<code>SQLAlchemy</code>是Python社区使用最广泛的ORM之一，Flask-<code>SQLchemy</code>正是基于<code>SQLchemy</code>。</p><h3 id="521-连接数据库"><a class="markdownIt-Anchor" href="#521-连接数据库"></a> 5.2.1 连接数据库</h3><p>安装 <code>Flask-SQLchemy</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><p>这里我们的<code>DBMS</code>以<code>mysql</code>数据库为例， 连接数据库</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">DATABASE_NAME = <span class="string">&#x27;01_db&#x27;</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line">DB_URI = <span class="string">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\</span><br><span class="line">.<span class="built_in">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]= <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><p><strong>解读：</strong></p><ol><li>从<code>flask_sqlalchemy</code>模块中导入<code>SQLAlchemy</code>类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br></pre></td></tr></table></figure><ol start="2"><li>app对象通过变量<code>SQLALCHEMY_DATABASE_URI</code>加载配置好的<code>URI</code>(统一资源标识符)，URI内包含了各种用于连接数据库的信息，指向一个具体的库。</li></ol><p><strong>常用数据库的URI格式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span>   <span class="comment"># ip</span></span><br><span class="line">PORT = <span class="string">&#x27;3306&#x27;</span>     <span class="comment"># 端口</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span>     <span class="comment"># 数据库账号</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;root&#x27;</span>        <span class="comment"># 密码</span></span><br><span class="line">DATABASE_NAME = <span class="string">&#x27;01_db&#x27;</span>  <span class="comment"># 具体的一个库名</span></span><br><span class="line">DB_URI = <span class="string">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\</span><br><span class="line">.<span class="built_in">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br></pre></td></tr></table></figure><p><strong>3</strong> <code>SQLALCHEMY_TRACK_MODIFICATIONS</code>这个配置变量决定是否追踪对象的修改，这用于<code>FLask- SQLALchemy</code>的事件通知系统。这个配置键默认值为<code>None</code>，如果没有特殊需要我们把它设置为<code>Flase</code>, 避免造成一些没必要的性能浪费。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]= <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>4</strong> <code>SQLAlchemy</code>类传入<code>app</code>类，引用<code>app</code>配置定位到具体的数据库，并且实例化出<code>db</code>对象，这个db对象代表我们的数据库，并且通过这个对象操作我们的<code>ORM</code></p><h2 id="-code5-"><a class="markdownIt-Anchor" href="#-code5-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure></h2><h3 id="522-数据库模型"><a class="markdownIt-Anchor" href="#522-数据库模型"></a> 5.2.2 数据库模型</h3><p><strong>数据库模型</strong>： 继承了<code>db.Model</code>的python类，并且这个python类映射到数据库为一个表 。 每个数据库模型都对应着数据库中的一个表。</p><h4 id="5221-数据库模型示例"><a class="markdownIt-Anchor" href="#5221-数据库模型示例"></a> 5.2.2.1 数据库模型示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user_info&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>),nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>__tablename__</code>：</p><p>可以直接指定表名（推荐使用）。如果没有写<code>__tablename__</code></p><p>指定表名，此类名可以自动转化为表名（不推荐使用）。</p><ul><li>类名自动转化表名的方式为<code>User</code>–&gt; <code>user</code># 单个单词转换为小写<br /><code>UserInfo</code>–&gt; <code>user_info</code># 多个单词转换为小写并使用下划线分隔</li><li>如UserInfo类在没有<code>__tablename__</code>指定表名时候，UserInfo类会自动映射到数据库的表名为<code>user_info</code>。</li></ul></li><li><p><code>db.Column</code></p><p>类实例化表示字段（表示数据库中的列），该类实例化出的对象被一个变量接受，该变量表示字段名。该类实例化时传入的参数表示字段的约束。</p><ul><li>如：<code>id = db.Column(db.Integer,primary_key=True,autoincrement=True)</code>表示该表内id字段为主键并且自动增长。</li></ul></li></ul><h4 id="5223-常见的字段类型表"><a class="markdownIt-Anchor" href="#5223-常见的字段类型表"></a> 5.2.2.3 常见的字段类型表</h4><table><thead><tr><th>字段</th><th>说明</th><th>映射到数据库对应类型</th></tr></thead><tbody><tr><td>Integer</td><td>整数</td><td>int类型</td></tr><tr><td>String</td><td>字符串，<code>String</code>类内可选择<code>length</code>参数的值用于设置最大字符个数</td><td>varchar类型</td></tr><tr><td>Text</td><td>用于储存较长的Unicode文本，,理论上可以储存65535个字节</td><td>text类型</td></tr><tr><td>Date</td><td>日期，存储<code>Python</code>的<code>datetime.date</code> 对象</td><td>date类型</td></tr><tr><td>Time</td><td>时间，存储<code>Python</code>的<code>datetime.time</code> 对象</td><td>time类型</td></tr><tr><td>DateTime</td><td>时间和日期，存储<code>Python</code> 的<code>datetime</code> 对象</td><td>datetime类型</td></tr><tr><td>Float</td><td>浮点类型</td><td>float类型</td></tr><tr><td>Double</td><td>双精度浮点类型，比浮点类型小数位精度更高。</td><td>double类型，占据64位。</td></tr><tr><td>Boolean</td><td>布尔值</td><td>tinyint类型</td></tr><tr><td>Enum</td><td>枚举类型</td><td>enum类型</td></tr></tbody></table><h4 id="5224-column常用参数表"><a class="markdownIt-Anchor" href="#5224-column常用参数表"></a> 5.2.2.4 Column常用参数表</h4><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>primary_key</td><td>如果设为True，该列就是表的主键</td></tr><tr><td>unique</td><td>如果设为True，该列每个值唯一，也就是该字段不允许出现重复值</td></tr><tr><td>index</td><td>如果设为True，为这列创建索引，用于提升查询效率</td></tr><tr><td>nullable</td><td>如果设为True，这列允许使用空值，反之则不允许使用空值。</td></tr><tr><td>server_default</td><td>为这列定义默认值, 默认值只支持字符串，其他类型需要db.text()方法指定</td></tr><tr><td>default</td><td>为这列定义默认值，但是该约束并不会真正映射到表结构中，该约束只会在ORM层面实现(不推荐使用)</td></tr><tr><td>comment</td><td>该字段的注释</td></tr><tr><td>name</td><td>可以使用该参数直接指定字段名</td></tr><tr><td>autoincrement</td><td>设置这个字段为自动增长的。</td></tr></tbody></table><h5 id="server_default常用配置"><a class="markdownIt-Anchor" href="#server_default常用配置"></a> <strong>server_default常用配置</strong></h5><table><thead><tr><th>配置默认值类型</th><th>代码</th></tr></thead><tbody><tr><td>更新datatime时间</td><td>server_default = db.text(“CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP”)</td></tr><tr><td>当前的datatime时间</td><td>server_default = db.text(“CURRENT_TIMESTAMP”)</td></tr><tr><td>数字</td><td>server_default=“数字”</td></tr><tr><td>布尔</td><td>server_default=db.text(‘True’) / server_default=db.text(‘False’)/ server_default=‘数字’</td></tr></tbody></table><h4 id="5225-将写好的模型映射到数据库"><a class="markdownIt-Anchor" href="#5225-将写好的模型映射到数据库"></a> 5.2.2.5 将写好的模型映射到数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user_info&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p>如果你已经定义好了模型：一个继承<code>db.Model</code>的类</p><p>想把这个模型映射到数据库中（在数据库中创建这个模型所描述的一张表）：使用<code>db.create_all()</code>可以实现把继承了该<code>db.model</code>的所有模型创建到数据库中。查看数据库的时候我们会发现多了一张<code>user_info</code>表。</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222012642-1301719010..png" alt="1549800892083" /></p><h4 id="5226-更新模型"><a class="markdownIt-Anchor" href="#5226-更新模型"></a> 5.2.2.6 更新模型</h4><p>对已存在的表的模型，使用<code>db.create_all()</code>无效</p><ol><li>先<code>db.drop_all()</code>删除该库下的所有继承了<code>db.model</code>的模型表，</li><li>然后再<code>db.create_all()</code>使得继承了<code>db.model</code>的所有模型表映射到数据库中，从而创建我们更新的表。</li></ol><p>弊端：会销毁原有的数据</p><p>解决弊端：看下一章</p><hr /><h3 id="523-数据库操作"><a class="markdownIt-Anchor" href="#523-数据库操作"></a> 5.2.3 数据库操作</h3><h4 id="5231-增"><a class="markdownIt-Anchor" href="#5231-增"></a> 5.2.3.1 增</h4><p><strong>模型表 映射到数据中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&quot;school&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,nullable=<span class="literal">False</span>,autoincrement=<span class="literal">True</span>,comment=<span class="string">&quot;ID&quot;</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>),nullable=<span class="literal">False</span>,server_default=<span class="string">&#x27;&#x27;</span>,comment=<span class="string">&quot;学校名称&quot;</span>)</span><br><span class="line">    area = db.Column(db.String(<span class="number">30</span>),nullable=<span class="literal">False</span>,server_default=<span class="string">&#x27;&#x27;</span>,comment=<span class="string">&quot;所属地区&quot;</span>)</span><br><span class="line">    score = db.Column(db.Integer,nullable=<span class="literal">False</span>,server_default=<span class="string">&#x27;600&#x27;</span>,comment=<span class="string">&quot;录取分数线&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;School(name:&#123;&#125;)&gt;&quot;</span>.<span class="built_in">format</span>(self.name)</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p><strong>示例</strong> — <strong>新增四条记录映射到数据库中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">school_01 =School(name=<span class="string">&quot;北京大学&quot;</span>,area=<span class="string">&quot;北京&quot;</span>,score=<span class="number">658</span>)  <span class="comment"># 实例化模型类作为一条记录</span></span><br><span class="line">school_02 =School(name=<span class="string">&quot;清华大学&quot;</span>,area=<span class="string">&quot;北京&quot;</span>,score=<span class="number">667</span>)</span><br><span class="line">school_03 =School(name=<span class="string">&quot;中山大学&quot;</span>,area=<span class="string">&quot;广东&quot;</span>,score=<span class="number">645</span>)</span><br><span class="line">school_04 =School(name=<span class="string">&quot;复旦大学&quot;</span>,area=<span class="string">&quot;上海&quot;</span>,score=<span class="number">650</span>)</span><br><span class="line"></span><br><span class="line">db.session.add(school_01)   <span class="comment"># 把新创建的记录添加到数据库会话</span></span><br><span class="line">db.session.add(school_02)</span><br><span class="line">db.session.add(school_03)</span><br><span class="line">db.session.add(school_04)</span><br><span class="line"></span><br><span class="line">db.session.commit()  <span class="comment"># 提交数据库会话</span></span><br></pre></td></tr></table></figure><p><em>提示：数据库会话db.session和后面介绍的Flasksession对象没有关系。db.session是数据库会话也称为事务。</em></p><ol><li>实例化模型类创建对象，该对象作为一条记录，实例化的过程传入的参数为字段内容。</li><li>把新创建的记录添加到数据库会话。</li><li>提交数据库会话</li></ol><p><strong>查看数据库</strong></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014255-1197439633..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014255-1197439633..png" alt="1549869497823" /></a></p><p><em>提示1 ：如果add多条记录可以使用add_all()一次添加包含多条记录的列表</em></p><p><em>如：<code>db.session.add_all([school_01,school_02,school_03，school_04])</code></em></p><h4 id="5232-查"><a class="markdownIt-Anchor" href="#5232-查"></a> 5.2.3.2 查</h4><p>在我们的flask中 <code>db.session</code> 出的对象调用<code>query</code>属性，可以通过query属性调用各种过滤方法完成查询。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模型类.&lt;过滤方法&gt;.&lt;查询方法&gt;</span><br></pre></td></tr></table></figure><p><strong>常用过滤器表：</strong></p><table><thead><tr><th>过滤器</th><th>说明</th></tr></thead><tbody><tr><td>filter()</td><td>使用指定的规则过滤记录相当于sql的where约束条件，返回一个新查询</td></tr><tr><td>filter_by()</td><td>同filter原理，不同的是查询的时要使用关键字参数，返回一个新查询</td></tr><tr><td>limit()</td><td>使用指定的值限制原查询返回的结果的数量，返回一个新查询</td></tr><tr><td>offset()</td><td>偏移原查询返回的结果，返回一个新查询</td></tr><tr><td>order_by()</td><td>根据指定条件对原查询结构进行排序，返回一个新查询</td></tr><tr><td>group_by()</td><td>根据指定条件对原来查询结构进行分组，返回一个新查询</td></tr></tbody></table><p><strong>示例</strong></p><p><em>下面几个查询案例需要在<code>示例 5.2.3.1</code>完成的基础上操作</em></p><p><strong>all()</strong> 返回一个列表，列表里存放所有符合条件的记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">all_school = School.query.<span class="built_in">all</span>()</span><br><span class="line">print(all_school) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：[&lt;School(name:北京大学)&gt;, &lt;School(name:清华大学)&gt;, &lt;School(name:中山大学)&gt;, &lt;School(name:复旦大学)&gt;]</span></span><br></pre></td></tr></table></figure><p>**first() **返回符合条件的第一条记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">school_01 =School.query.first()</span><br><span class="line">print(school_01)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：&lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure><p><strong>get()</strong> 返回指定主键值（id字段）的记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">school_01 = School.query.get(<span class="number">1</span>)</span><br><span class="line">print(school_01)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：&lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure><p><strong>filter()</strong> 使用指定的规则过滤记录相当于 sql 的where约束条件，返回新产生的查询对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beijing_all = School.query.<span class="built_in">filter</span>(School.area == <span class="string">&quot;北京&quot;</span>).<span class="built_in">all</span>()</span><br><span class="line">beijing_first = School.query.<span class="built_in">filter</span>(School.area == <span class="string">&quot;北京&quot;</span>).first()</span><br><span class="line">print(beijing_all)</span><br><span class="line">print(beijing_first)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：[&lt;School(name:北京大学)&gt;, &lt;School(name:清华大学)&gt;]</span></span><br><span class="line"><span class="comment">#       &lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure><p><strong>filter_by</strong>：同filter()效果一样，查询的时候使用关键字参数查询（无法进行多表复杂查询，不推荐使用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhongshan_school = School.query.filter_by(name=<span class="string">&#x27;中山大学&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">print(zhongshan_school)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：[&lt;School(name:中山大学)&gt;]</span></span><br></pre></td></tr></table></figure><p><strong><code>db.session.qury(模型类)</code>等价于<code>模型类.query</code>，db.session.query功能更强大一些，可以进行多表查询。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fudan_school = School.query.<span class="built_in">filter</span>(School.name == <span class="string">&#x27;复旦大学&#x27;</span>).first()</span><br><span class="line">print(fudan_school)  </span><br><span class="line"><span class="comment"># 输出：&lt;School(name:复旦大学)&gt;</span></span><br><span class="line"></span><br><span class="line">fudan_school = db.session.query(School).<span class="built_in">filter</span>(School.name == <span class="string">&#x27;复旦大学&#x27;</span>).first()</span><br><span class="line">print(fudan_school)</span><br><span class="line"><span class="comment"># 输出：&lt;School(name:复旦大学)&gt;</span></span><br></pre></td></tr></table></figure><p><em>提示：其他的过滤器会在接下来的章节具体根据实际案例讲解</em></p><h4 id="5233-改"><a class="markdownIt-Anchor" href="#5233-改"></a> 5.2.3.3 改</h4><p><strong>示例</strong></p><p><strong>修改北京大学的录取成绩</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beida = School.query.<span class="built_in">filter</span>(School.name==<span class="string">&#x27;北京大学&#x27;</span>).first()</span><br><span class="line">beida.score = <span class="number">630</span></span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014677-1830233725..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014677-1830233725..png" alt="1549872535950" /></a></p><p>更新一条记录分为一下几部：</p><ol><li><p>找到对应的记录对象</p></li><li><p>修改记录对象的属性</p></li><li><p>直接调用<code>db.session.commit()</code>提交会话</p><p><em>提示：只有要插入新的记录或要将现有的记录添加到会话中时才需要使用add（）方法。只是更新现有记录的时可以修改记录对象属性后直接提交会话</em></p></li></ol><h4 id="5234-删"><a class="markdownIt-Anchor" href="#5234-删"></a> 5.2.3.4 删</h4><p><strong>示例</strong></p><p><strong>从数据库中删除清华大学相关信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qinghua = School.query.<span class="built_in">filter</span>(School.name==<span class="string">&#x27;清华大学&#x27;</span>).first()</span><br><span class="line">db.session.delete(qinghua)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222015098-425693015..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222015098-425693015..png" alt="1549872948198" /></a></p><p>删除一条记录分为以下几步：</p><ol><li>找到对应的记录对象</li><li>需要调用<code>delete()</code>方法在会话中标识需要删除的记录，具体是把该记录对象传入<code>db.session.delete(记录对象)</code>实现标识。</li><li>调用<code>db.session.commit()</code>提交会话。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;51-orm&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#51-orm&quot;&gt;&lt;/a&gt; 5.1 ORM&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;htt</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>3 flask视图</title>
    <link href="http://example.com/2021/01/18/flask/3%20flask%E8%A7%86%E5%9B%BE/"/>
    <id>http://example.com/2021/01/18/flask/3%20flask%E8%A7%86%E5%9B%BE/</id>
    <published>2021-01-18T11:39:27.076Z</published>
    <updated>2021-01-19T08:29:54.373Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="31-http请求"><a class="markdownIt-Anchor" href="#31-http请求"></a> 3.1 HTTP请求</h2><h3 id="311-请求报文-和-响应报文"><a class="markdownIt-Anchor" href="#311-请求报文-和-响应报文"></a> 3.1.1 请求报文 和 响应报文</h3><ul><li>请求报文：请求时浏览器发送的数据称为请求报文</li><li>响应报文：服务器收到了请求返回给浏览器的数据称为响应报文</li></ul><p>报文中的GET请求 和 POST请求</p><ul><li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如<code>EditBook?name=test1&amp;id=123456</code></li><li>POST方法是把提交的数据放在HTTP包的请求体中.</li><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制）</li><li>POST方法提交的数据没有限制。</li><li>GET与POST请求在服务端获取请求数据方式不同。</li></ul><p>报文示例：</p><h2 id="-code0-"><a class="markdownIt-Anchor" href="#-code0-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">GET请求报文</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 请求首行</span></span><br><span class="line">GET / HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line"><span class="comment"># get请求后面的参数</span></span><br><span class="line">GET /?name=lqz&amp;age=18 HTTP/1.1\r\n</span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8008</span>\r\n</span><br><span class="line">Connection: keep-alive\r\n</span><br><span class="line">Cache-Control: <span class="built_in">max</span>-age=<span class="number">0</span>\r\n</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span>\r\n</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">65.0</span><span class="number">.3325</span><span class="number">.181</span> Safari/<span class="number">537.36</span>\r\n</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*/*;q=<span class="number">0.8</span>\r\nAccept-Encoding: gzip, deflate, br\r\n</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>\r\n</span><br><span class="line">Cookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\r\n\r\n<span class="string">&#x27;</span></span><br><span class="line"><span class="string"># 请求体（get请求，请求体为空）    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">POST请求报文</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 请求首行</span></span><br><span class="line"><span class="string">POST /?name=lqz&amp;age=18 HTTP/1.1\r\n</span></span><br><span class="line"><span class="string"># 请求头</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:8008\r\nConnection: keep-alive\r\n</span></span><br><span class="line"><span class="string">Content-Length: 21\r\nCache-Control: max-age=0\r\n      </span></span><br><span class="line"><span class="string">Origin: http://127.0.0.1:8008\r\nUpgrade-Insecure-Requests: 1\r\n</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded\r\n</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\r\n        Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nReferer: http://127.0.0.1:8008/?name=lqz&amp;age=18\r\n</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate, br\r\nAccept-Language: zh-CN,zh;q=0.9\r\nCookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\r\n\r\n</span></span><br><span class="line"><span class="string"># 请求体</span></span><br><span class="line"><span class="string">name=lqz&amp;password=123&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br></pre></td></tr></table></figure></h2><h3 id="312-request对象"><a class="markdownIt-Anchor" href="#312-request对象"></a> 3.1.2 request对象</h3><p>request对象封装解析了请求报文中的数据，其大部分功能是由依赖包werkzeug完成的，并且<strong>每个request对象都是线程隔离的，保证了数据的安全性</strong>。</p><h4 id="3121-request对象常用方法"><a class="markdownIt-Anchor" href="#3121-request对象常用方法"></a> 3.1.2.1 request对象常用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br></pre></td></tr></table></figure><h4 id="3122-使用request属性获取url"><a class="markdownIt-Anchor" href="#3122-使用request属性获取url"></a> 3.1.2.2 使用request属性获取url</h4><p>​访问: <a href="http://127.0.0.1:5000/student_list/?name=mark">http://127.0.0.1:5000/student_list/?name=mark</a> :</p><p>​ <strong>表2-1 使用request</strong>的属性获取<strong>url</strong></p><table><thead><tr><th>属性</th><th>解析值</th><th>属性</th><th>解析值</th></tr></thead><tbody><tr><td>path</td><td>u‘/student_list/’</td><td>base_url</td><td>u’<a href="http://127.0.0.1:5000/student_list/">http://127.0.0.1:5000/student_list/</a>’</td></tr><tr><td>full_path</td><td>u‘/student_list/?name=mark’</td><td>url</td><td>u’<a href="http://127.0.0.1:5000/student_list/?name=mark">http://127.0.0.1:5000/student_list/?name=mark</a>’</td></tr><tr><td>host</td><td>u’127.0.0.1:5000’</td><td>url_root</td><td>u’<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>’</td></tr><tr><td>host_url</td><td>u’<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>’</td><td></td><td></td></tr></tbody></table><p>request的解析结果如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_list/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_list</span>():</span></span><br><span class="line">    print(request.path)          <span class="comment"># 输出 /student_list/</span></span><br><span class="line">    print(request.full_path)     <span class="comment"># 输出 /student_list/?name=mark</span></span><br><span class="line">    print(request.host)          <span class="comment"># 输出 127.0.0.1:5000</span></span><br><span class="line">    print(request.host_url)      <span class="comment"># 输出 http://127.0.0.1:5000/</span></span><br><span class="line">    print(request.base_url)      <span class="comment"># 输出 http://127.0.0.1:5000/student_list/</span></span><br><span class="line">    print(request.url)           <span class="comment"># 输出 http://127.0.0.1:5000/student_list/?name=mark</span></span><br><span class="line">    print(request.url_root)      <span class="comment"># 输出 http://127.0.0.1:5000/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;request.urldemo测试&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3123-其他request对象常用的属性和方法"><a class="markdownIt-Anchor" href="#3123-其他request对象常用的属性和方法"></a> 3.1.2.3  其他request对象常用的属性和方法。</h4><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222230423-1742169751.png" alt="" /></p><h3 id="313-get-和-post"><a class="markdownIt-Anchor" href="#313-get-和-post"></a> 3.1.3 GET 和 POST：</h3><h4 id="3131-常见的http方法"><a class="markdownIt-Anchor" href="#3131-常见的http方法"></a> 3.1.3.1 常见的HTTP方法</h4><table><thead><tr><th>请求</th><th>说明</th><th>请求</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>获取服务器资源</td><td>DELETE</td><td>删除服务器资源</td></tr><tr><td>POST</td><td>处理服务器资源</td><td>PATCH</td><td>在服务器更新资源（客户端提供改变的属性）</td></tr><tr><td>PUT</td><td>在服务器更新资源（客户端提供改变后的完整资源）</td><td></td><td></td></tr></tbody></table><p>一般常用的请求为GET和POST</p><h4 id="3132-get请求"><a class="markdownIt-Anchor" href="#3132-get请求"></a> 3…1.3.2 <code>GET</code>请求</h4><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222432221-608582097.jpg" alt="" /></p><p><strong>GET请求一般用于在服务器上获取资源，不会更改服务器的状态。</strong></p><p><strong>GET示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)  </span><span class="comment"># 不写methods也可以 默认就接收get请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_get</span>():</span></span><br><span class="line">    print(request.args.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment"># 输出 mark</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;请求&#x27;</span>.<span class="built_in">format</span>(request.method)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li>使用request.args属性获取get传来的参数</li><li>@app.route(’/’, methods=[‘GET’]) 指定浏览器只能以GET方法访问服务端。</li></ul><hr /><h4 id="3133-post请求"><a class="markdownIt-Anchor" href="#3133-post请求"></a> 3.1.3.3 <code>POST</code>请求：</h4><p><strong>POST 请求: 会给服务器提交一些数据或者文件，会对服务器的状态产生影响。</strong></p><p>在了解POST请求之前我们先了解一下render_termplate</p><h5 id="31331-render_template的简单使用"><a class="markdownIt-Anchor" href="#31331-render_template的简单使用"></a> 3.1.3.3.1 render_template的简单使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br></pre></td></tr></table></figure><p>我们暂时只简单的理解render_template模块可以把html文件返回给浏览器并渲染。</p><p>如：</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222510737-1061015223.png" alt="" /></p><p><strong><a href="http://server.py">server.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li><p>render_template()会去flask根目录下的templates里面寻找文件，所以给的参数路径是相对路径。</p></li><li><p>render_template()中放的文件路径是与templates文件夹相对的路径</p></li></ul><p><strong>templates/login.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login_request/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>:</p><ul><li><p>form标签的<code>action</code>指定的是跳转的页面。并且会自动拼接成http://127.0.0.1:5000/login_request/</p><p>也就是本项目的: ip地址+端口+/login_request/</p></li><li><p>form标签的<code>method</code>指定的是以什么方法请求服务端，此案例中请求的方法为POST方法。</p></li></ul><p>访问127.0.0.1:5000/login/ 后如下图</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222556143-340794981.png" alt="" /></p><h5 id="31332-post案例"><a class="markdownIt-Anchor" href="#31332-post案例"></a> 3.1.3.3.2 POST案例：</h5><p><strong>项目目录：</strong></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222621609-1621658602.png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222621609-1621658602.png" alt="img" /></a></p><p><strong><a href="http://server.py">server.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login_request/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_request</span>():</span></span><br><span class="line">    print(request.form.get(<span class="string">&#x27;username&#x27;</span>))  <span class="comment"># &#x27;mark&#x27;</span></span><br><span class="line">    print(request.form.get(<span class="string">&#x27;password&#x27;</span>))  <span class="comment"># &#x27;123&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.form.get(<span class="string">&#x27;username&#x27;</span>) == <span class="string">&#x27;mark&#x27;</span> <span class="keyword">and</span> request.form.get(<span class="string">&#x27;password&#x27;</span>) == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li>request.form是专门用来针对表单取数据的，在这里如果前端是以表单的形式提交的，我们可以使用request.form来取值</li><li>@app.route() 中的 methods=[‘POST’] 代表只接收浏览器的POST请求</li></ul><p><strong>templates/login.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login_request/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222657669-1682091996.png" alt="" /></p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222717747-459163041.png" alt="" /></p><p>总体的逻辑是 :</p><ol><li>首先访问127.0.0.1:5000/login/，默认是get请求。</li><li>然后<code>return render_template('login.html')</code> 返回给浏览器页面。</li><li>然后填写内容点击提交，以post方式请求 <a href="http://127.0.0.1:5000/login_request/%E3%80%82">http://127.0.0.1:5000/login_request/。</a></li><li>然后进入<code>def login_request()</code>视图函数 进行逻辑判断返回成功与否。</li></ol><h3 id="314-一个视图函数同时可以接收get和post请求"><a class="markdownIt-Anchor" href="#314-一个视图函数同时可以接收get和post请求"></a> 3.1.4 一个视图函数同时可以接收GET和POST请求</h3><p>我们的案例和3.3.2案例完成的业务逻辑是一样的，相当于简化了3.3.2的案例，把两个视图函数合并到一起，利用<code>request.method</code>属性可以获取字符串格式的请求方法。来区分本次请求是GET还是POST</p><p><strong><a href="http://server.py">server.py</a></strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login_inner/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_inner</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>: <span class="comment">#判断本次请求是否为get请求</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.form.get(<span class="string">&#x27;username&#x27;</span>) == <span class="string">&#x27;mark&#x27;</span> <span class="keyword">and</span> request.form.get(<span class="string">&#x27;password&#x27;</span>) == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li><code>@app.route()</code>的<code>methods</code>方法 指定该视图函数接收浏览器传过来的请求方法，可以指定多个。</li><li><code>request.method</code>获取字符串格式的请求方法</li></ul><p><strong>templates/login.html</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span>  </span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其展示效果</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222809137-31438223.png" alt="" /></p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222826146-1144854374.png" alt="" /></p><h2 id="32-视图函数-和-视图类"><a class="markdownIt-Anchor" href="#32-视图函数-和-视图类"></a> 3.2 视图函数 和 视图类</h2><h3 id="321-视图函数"><a class="markdownIt-Anchor" href="#321-视图函数"></a> 3.2.1 视图函数</h3><h4 id="3211-endpoint-别名"><a class="markdownIt-Anchor" href="#3211-endpoint-别名"></a> 3.2.1.1 endpoint 别名</h4><p><code>endpint</code>参数是写在注册路由的装饰器中的一个参数，学名叫端点，我们可以理解为函数的别名。</p><p>原来我们翻转视图函数的<code>url</code>的时候是直接通过是如函数的名字，如<code>url_for('函数名')</code>，</p><p>现在我们可以指定一个<code>endpoint='fbv'</code>参数来进行翻转<code>url</code>。如果不指定endpoint,默认就以函数名作为端点名。</p><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/fbvtest/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],endpoint=<span class="string">&#x27;fbv&#x27;</span></span>)  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fbvtest</span>():</span></span><br><span class="line">    url_demo = url_for(<span class="string">&#x27;fbv&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;利用视图函数别名翻转的url为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url_demo)</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223137828-581237383.png" alt="" /></p><p><strong>注</strong>：</p><ul><li>利用<code>@app.route()</code> 的<code>endpoint='fbv'</code>参数可以自由指定端点名，url_for可以根据指定的端点名进行翻转。</li></ul><h4 id="3212-装饰器注册路由源码浅析"><a class="markdownIt-Anchor" href="#3212-装饰器注册路由源码浅析"></a> 3.2.1.2 装饰器注册路由源码浅析</h4><p><strong>（1）</strong> 首先写一个小视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册装饰器的原理</span></span><br><span class="line"><span class="comment">#1 v = app.route(&#x27;/source_code_demo/&#x27;,endpoint=&#x27;source_code&#x27;)</span></span><br><span class="line"><span class="comment">#2 v(source_code_demo)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source_code_demo/&#x27;</span>,endpoint=<span class="string">&#x27;source_code&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">source_code_demo</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;source_code_demo&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>（2）</strong> 查看<code>app.route()</code>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">... </span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">route</span>(<span class="params">self, rule, **options</span>):</span></span><br><span class="line">   ...</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">f</span>):</span></span><br><span class="line">               endpoint = options.pop(<span class="string">&#x27;endpoint&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">               self.add_url_rule(rule, endpoint, f, **options)</span><br><span class="line">               <span class="keyword">return</span> f</span><br><span class="line">           <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>解析：</p><ul><li>，发现<code>route()</code>返回的是<code>decorator</code>函数地址，然后基于语法糖和装饰器的原理，decorator会加括号运行，像这样<code>decorator(source_code_demo)</code></li><li><code>decorator</code>函数中首先取出<code>endpoint</code>，然后运行<code>self.add_url_rule(rule, endpoint, f, **options)</code></li><li><strong>所以</strong> <code>self.add_url_rule(rule, endpoint, f, **options)</code><strong>就是注册路由的核心</strong></li></ul><p><strong>（3）</strong> 点进<code>self.add_url_rule(rule, endpoint, f, **options)</code>查看源码,</p><p>再点进<code>_endpoint_from_view_func(view_func)</code>查看源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line"><span class="meta">@setupmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_url_rule</span>(<span class="params">self, rule, endpoint=<span class="literal">None</span>, view_func=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                   provide_automatic_options=<span class="literal">None</span>, **options</span>):</span></span><br><span class="line">      </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> endpoint <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          endpoint = _endpoint_from_view_func(view_func)</span><br><span class="line">      options[<span class="string">&#x27;endpoint&#x27;</span>] = endpoint</span><br><span class="line">      methods = options.pop(<span class="string">&#x27;methods&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># if the methods are not given and the view_func object knows its</span></span><br><span class="line">      <span class="comment"># methods we can use that instead.  If neither exists, we go with</span></span><br><span class="line">      <span class="comment"># a tuple of only ``GET`` as default.</span></span><br><span class="line">      <span class="keyword">if</span> methods <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          methods = <span class="built_in">getattr</span>(view_func, <span class="string">&#x27;methods&#x27;</span>, <span class="literal">None</span>) <span class="keyword">or</span> (<span class="string">&#x27;GET&#x27;</span>,)</span><br><span class="line">          </span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_endpoint_from_view_func</span>(<span class="params">view_func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Internal helper that returns the default endpoint for a given</span></span><br><span class="line"><span class="string">    function.  This always is the function name.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> view_func <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, <span class="string">&#x27;expected view func if endpoint is not provided.&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> view_func.__name__</span><br></pre></td></tr></table></figure><p>解析：</p><ul><li>由上述代码我们可以直到如果没有指定<code>endpoint</code>，我们调用了 <code>_endpoint_from_view_func（）</code></li><li>观察<code>_endpoint_from_view_func</code>函数我们可以知道，返回了视图函数的名字给了<code>endpoint</code>赋值</li><li><code>methos</code>没有指定会给methos赋默认值<code>('GET',)</code></li></ul><p><strong>小结：</strong></p><ol><li><code>self.add_url_rule(rule, endpoint, f, options)</code>就是注册路由的核心</li><li>观察<code>_endpoint_from_view_func</code>函数我们可以知道，返回了视图函数的名字给了<code>endpoint</code>赋值</li><li><code>methos</code>没有指定会给<code>methods</code>赋默认值<code>('GET',)</code></li></ol><h4 id="3213-另一种注册路由的方式-appadd_url_rule"><a class="markdownIt-Anchor" href="#3213-另一种注册路由的方式-appadd_url_rule"></a> 3.2.1.3 另一种注册路由的方式 —— app.add_url_rule()</h4><p>通过看上一个小节写的源码，现在我们知道了app.route() 的核心就是<code>self.add_url_rule(rule, endpoint, f, options)</code>就是注册路由的核心。所以我们可以直接使用<code>app.add_url_rule()</code>的方式来注册路由。</p><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_url_test</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;实现了add_url方式注册路由&#x27;</span></span><br><span class="line">                 <span class="comment"># url                       端点                 函数地址</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/add_url_test/&#x27;</span>,endpoint=<span class="string">&#x27;add_demo&#x27;</span>,view_func=add_url_test)</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223409813-960893827.png" alt="" /></p><h4 id="3214-视图函数中添加自定义装饰器"><a class="markdownIt-Anchor" href="#3214-视图函数中添加自定义装饰器"></a> 3.2.1.4 视图函数中添加自定义装饰器</h4><p>我们在平时的开发的过程中，很多需要权限验证的功能需要用到装饰器，下面的代码是如何在flask中实现一个装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span>  wraps</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_verify</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        user_name = request.args.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_name == <span class="string">&#x27;mark&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;请登录&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/my_info/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_info</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;个人信息页面&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ol><li><p>装饰器一定要写在注册路由的下面，写在视图函数的上面。</p></li><li><p>装饰器内部一定要使用<code>@wraps(func)</code>方法，用于保护被装饰函数的属性。</p><p><em><strong>它能保留原有函数的名称和docstring</strong></em></p></li></ol><h3 id="322-视图类"><a class="markdownIt-Anchor" href="#322-视图类"></a> 3.2.2 视图类</h3><h4 id="3221-视图类的基本写法"><a class="markdownIt-Anchor" href="#3221-视图类的基本写法"></a> 3.2.2.1 视图类的基本写法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, views, request, url_for</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_verify</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        user_name = request.args.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_name == <span class="string">&#x27;mark&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;请登录&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBVTest</span>(<span class="params">views.MethodView</span>):</span></span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]  <span class="comment"># 指定可以接收的方法有什么,可传list(),set()类型</span></span><br><span class="line">    decorators = [login_verify,]  <span class="comment"># 指定自定义的装饰器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(url_for(<span class="string">&#x27;cbvtest&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;cbv_get&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;cbv_post&#x27;</span></span><br><span class="line">    </span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/cbvtest&#x27;</span>,view_func=CBVTest.as_view(name=<span class="string">&#x27;cbvtest&#x27;</span>),endpoint=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>讲解：</p><ol><li><p>首先从flask中导入 <code>views</code></p></li><li><p>写一个类一定要继承 <code>views.MethodView</code></p></li><li><p>在类中写<code>methods = ['GET','POST']</code> 可以指定可接受的请求类型</p></li><li><p>在类中写<code>decorators = [login_verify,]</code>可以指定装饰器，第一个装饰器是最里层函数依次往后包裹</p></li><li><p>在类中写<code>def get(self):</code>用于获取get请求</p></li><li><p>在类中写<code>def post(self):</code>用于获取post请求</p></li><li><p>添加路由的方法使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.add_url_rule(<span class="string">&#x27;路由&#x27;</span>,view_func=CBVTest.as_view(name=<span class="string">&#x27;自定义一个端点名字&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><p>其原理是<code>CBVTest.as_view(name='自定义一个端点名字')</code>会返回一个函数，name是为这个函数命的名字，可以通过这个函数进行分发请求等操作。</p><h4 id="323-详解注册路由的参数"><a class="markdownIt-Anchor" href="#323-详解注册路由的参数"></a> 3.2.3 详解注册路由的参数</h4><h4 id="常用的参数"><a class="markdownIt-Anchor" href="#常用的参数"></a> 常用的参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route和app.add_url_rule参数:</span></span><br><span class="line">    </span><br><span class="line">rule, URL规则</span><br><span class="line">view_func, 视图函数名称</span><br><span class="line">endpoint = <span class="literal">None</span>, 名称，用于反向生成URL，即： url_for(<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">methods = <span class="literal">None</span>, 允许的请求方式，如：[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="不常用的参数"><a class="markdownIt-Anchor" href="#不常用的参数"></a> 不常用的参数</h4><p><strong>（1）</strong> 对URL最后的 / 符号是否严格要求 <code>strict_slashes = False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">strict_slashes = <span class="literal">False</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    @app.route(&#x27;/index&#x27;, strict_slashes=False)</span></span><br><span class="line"><span class="string">    #访问http://www.xx.com/index/ 或http://www.xx.com/index均可</span></span><br><span class="line"><span class="string">    @app.route(&#x27;/index&#x27;, strict_slashes=True)</span></span><br><span class="line"><span class="string">    #仅访问http://www.xx.com/index</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>（2）</strong> 重定向到指定地址<code>redirect_to=“ ”</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>,redirect_to=<span class="string">&#x27;/home/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;根路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/home/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_demo</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;home路径&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>（3）</strong> 为函数提供默认参数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults = <span class="literal">None</span>, 默认值, 当URL中无参数，函数需要参数时，使用defaults = &#123;<span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;v&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>（4）</strong> 子域名设置<code>subdomain=“ ”</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">先在hosts设置域名解析(就是在本机的hosts文件上编辑上域名对应ip的关系) </span></span><br><span class="line"><span class="string">域名解析会先解析本地如果没有再解析dns服务器</span></span><br><span class="line"><span class="string">C:\Windows\System32\drivers\etc\hosts</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">127.0.0.1 mark.com</span></span><br><span class="line"><span class="string">127.0.0.1 admin.mark.com</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SERVER_NAME&#x27;</span>] = <span class="string">&#x27;mark.com:5000&#x27;</span> <span class="comment"># 这个代表访问这个域名的时候要访问5000端口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;设置域名成功&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin_demo/&quot;</span>,subdomain=<span class="string">&#x27;admin&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_demo</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;设置子域名成功&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在浏览器中访问主域名</span></span><br><span class="line"><span class="string">mark.com:5000/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在浏览器中访问子域名</span></span><br><span class="line"><span class="string">admin.mark.com:5000/admin_demo/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：后面跟的path路径部分正常写</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">5000</span>) <span class="comment"># 测试服务器不稳定，尽量手动制定ip和端口</span></span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223624037-1211906551.png" alt="" /></p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223643974-105951200.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;31-http请求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#31-http请求&quot;&gt;&lt;/a&gt; 3.1 HTTP请求&lt;/h2&gt;
&lt;h3 id=</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>2 flask注册路由</title>
    <link href="http://example.com/2021/01/18/flask/2%20flask%E6%B3%A8%E5%86%8C%E8%B7%AF%E7%94%B1/"/>
    <id>http://example.com/2021/01/18/flask/2%20flask%E6%B3%A8%E5%86%8C%E8%B7%AF%E7%94%B1/</id>
    <published>2021-01-18T11:39:27.072Z</published>
    <updated>2021-01-19T08:29:48.605Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="21-url的组成"><a class="markdownIt-Anchor" href="#21-url的组成"></a> 2.1 URL的组成</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scheme:// host:port/      path/         ?parameter=xxx#anchor</span><br><span class="line">https://  www.baidu.com/  Public/linux/ ?fr=aladdin#23</span><br></pre></td></tr></table></figure><ul><li>scheme：代表的是访问的协议，一般为http或者https以及ftp等。</li><li>host：主机名，域名，<a href="http://xn--www-eo8er22f.baidu.com">比如www.baidu.com</a>。</li><li>port：端口号。当你访问一个网站的时候，浏览器默认使用80端口。</li><li>path：路径。比如：<a href="http://www.baidu.com/Public/linux/?python=aladdin#23%EF%BC%8Cwww.baidu.com%E5%90%8E%E9%9D%A2%E7%9A%84Public/linux%E5%B0%B1%E6%98%AFpath%E3%80%82">www.baidu.com/Public/linux/?python=aladdin#23，www.baidu.com后面的Public/linux就是path。</a></li><li>query-string：查询字符串，比如：<a href="http://www.baidu.com/s?wd=python%EF%BC%8C%EF%BC%9F%E5%90%8E%E9%9D%A2%E7%9A%84python=aladdin%E5%B0%B1%E6%98%AF%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82">www.baidu.com/s?wd=python，？后面的python=aladdin就是查询字符串。</a></li><li>anchor：锚点，后台一般不用管，前端用来做页面定位的。比如：<a href="https://www.oldboyedu.com/Public/linux/?fr=aladdin#23">https://www.oldboyedu.com/Public/linux/?fr=aladdin#23</a> ,#后面的23就是锚点</li></ul><h2 id="22-url与路由的区别"><a class="markdownIt-Anchor" href="#22-url与路由的区别"></a> 2.2 URL与路由的区别</h2><p>路由是根据url定位到具体的pyhon类或python函数的程序，这段程序我们称之为路由。</p><p>在Flask程序中使用路由我们称之为<strong>注册路由</strong>，是使用程序实例提供的<strong>app.route（）<strong>装饰器注册路由，而</strong>括号内</strong>的字符串就是<strong>url</strong>，<strong>注册路由的过程就是完成了 url和python类或函数映射的过程</strong>，可以理解为会有一张表保存了url与python类或函数的对应关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="23-url传参的两种"><a class="markdownIt-Anchor" href="#23-url传参的两种"></a> 2.3  url传参的两种</h2><h3 id="231-动态路由传参"><a class="markdownIt-Anchor" href="#231-动态路由传参"></a> 2.3.1 动态路由传参</h3><p>URL中包含可变的部分，如：</p><p>​根据学生的id找到具体的学生，<a href="http://127.0.0.1:5000/student_list/">http://127.0.0.1:5000/student_list/</a>&lt;student_id&gt;/</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_list/&lt;student_id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_list</span>(<span class="params">student_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;学生&#123;&#125;号的信息&#x27;</span>.<span class="built_in">format</span>(student_id)</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009220908482-1110597384.png" alt="" /></p><h4 id="2311-动态路由过滤"><a class="markdownIt-Anchor" href="#2311-动态路由过滤"></a> 2.3.1.1 动态路由过滤**</h4><p>可以对参数限定数据类型，比如上面的文章详情，限定student_id必须为整数类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_list/&lt;int:student_id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_detail</span>(<span class="params">student_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;学生&#123;&#125;号的信息&#x27;</span>.<span class="built_in">format</span>(student_id)</span><br></pre></td></tr></table></figure><p><strong>主要有这几种类型过滤：</strong></p><p><code>string</code>: 默认的数据类型，接收没有任何斜杠&quot;\ /&quot;的字符串</p><p><code>int</code>: 整型</p><p><code>float</code>: 浮点型</p><p><code>path</code>: 和string类型相似，但是接受斜杠，如：可以接受参数/aa/bb/cc/多条放在一起</p><p><code>uuid</code>: 只接受uuid格式的字符串字符串，</p><p><strong>注</strong>：uuid为全宇宙唯一的串</p><p><code>any</code>: 可以<strong>指定多种路径</strong></p><p>​url_path的变量名是自己定义的，可选：student，class</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可访问 127.0.0.1/student/1/ 或 127.0.0.1/class/1/ </span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;any(student,class):url_path&gt;/&lt;id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">item</span>(<span class="params">url_path, <span class="built_in">id</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> url_path == <span class="string">&#x27;student&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;学生&#123;&#125;详情&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;班级&#123;&#125;详情&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><h3 id="232-查询字符串传参"><a class="markdownIt-Anchor" href="#232-查询字符串传参"></a> 2.3.2 查询字符串传参</h3><p>查询字符串：</p><p><a href="http://xn--www-eo8e.baidu.com/s?wd=python&amp;ad=flask%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C">如www.baidu.com/s?wd=python&amp;ad=flask的参数，</a> <code>？</code> 后的key=value便是查询字符串， 可以写多个key=value用<code>&amp;</code>相连</p><p>从<code>flask</code>模块里面导入<code>request</code>对象，用<code>request.args</code>属性在我们的程序中根据查询字符串的<code>key</code>取出查询字符串的<code>value</code>。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求url: 127.0.0.1:5000/student_name/?name=mark&amp;age=18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_name/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">school_name_list</span>():</span></span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    age = request.args.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;学生的姓名为&#123;&#125;，年龄为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, age)</span><br></pre></td></tr></table></figure><h2 id="24-url_for的使用"><a class="markdownIt-Anchor" href="#24-url_for的使用"></a> 2.4 url_for的使用</h2><h3 id="241-url_for的作用"><a class="markdownIt-Anchor" href="#241-url_for的作用"></a> 2.4.1 url_for()的作用：</h3><p>url的反向查询</p><p>应对：即便改动url，也能追踪到改URL</p><h3 id="242-url_for的原理"><a class="markdownIt-Anchor" href="#242-url_for的原理"></a> 2.4.2 url_for()的原理：</h3><p>利用视图函数名字一般不会改变的特性，利用视图函数的<code>名字</code>去动态精准的获取url，以便于开发使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;视图函数名字&#x27;</span>)   <span class="comment"># 输出该视图函数url</span></span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.update(DEBUG=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line">    print(url_for(<span class="string">&quot;book&quot;</span>))  <span class="comment"># 注意这个引用的是视图函数的名字 为字符串格式</span></span><br><span class="line">    print(<span class="built_in">type</span>(url_for(<span class="string">&quot;book&quot;</span>)))</span><br><span class="line">    <span class="keyword">return</span> url_for(<span class="string">&quot;book&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/book_list/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;flask_book&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==  <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="243-url_for-处理动态的视图函数动态路由"><a class="markdownIt-Anchor" href="#243-url_for-处理动态的视图函数动态路由"></a> 2.4.3 url_for 处理动态的视图函数（动态路由）</h3><p>想获取动态路由，必须<strong>以关键字实参的形式 为动态的path部分赋值</strong>，注意动态的path部分必须被赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo2/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line">    student_url = url_for(<span class="string">&#x27;student&#x27;</span>, <span class="built_in">id</span>=<span class="number">5</span>, name=<span class="string">&#x27;mark&#x27;</span>) <span class="comment"># id 就是动态path的key 必须赋值，# name 将作为查询字符串传入</span></span><br><span class="line">    print(student_url)</span><br><span class="line">    <span class="keyword">return</span> student_url</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student/&lt;int:id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;student &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制台输出：</span></span><br><span class="line">/student/5/?name=mark</span><br></pre></td></tr></table></figure><h3 id="244-url_for为url添加查询字符串"><a class="markdownIt-Anchor" href="#244-url_for为url添加查询字符串"></a> 2.4.4  url_for为url添加查询字符串</h3><p>想在路径后面拼出来查询字符串，以关键字实参的形式放到url_for()里面作为参数，会自动拼成路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo3/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo3</span>():</span></span><br><span class="line">    school_url = url_for(<span class="string">&#x27;school&#x27;</span>, school_level=<span class="string">&#x27;high&#x27;</span>, name=<span class="string">&#x27;college&#x27;</span>) </span><br><span class="line">    <span class="comment"># 具体要拼接的查询参数 以关键字实参的形式写在url_for里</span></span><br><span class="line">    print(school_url)</span><br><span class="line">    <span class="keyword">return</span> school_url</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/school/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">school</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;school message&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制台输出：</span></span><br><span class="line">/school/?school_level=high&amp;name=college</span><br></pre></td></tr></table></figure><h3 id="245-自定义动态路由过滤器之正则匹配"><a class="markdownIt-Anchor" href="#245-自定义动态路由过滤器之正则匹配"></a> 2.4.5  自定义动态路由过滤器之正则匹配</h3><p>通过继承<code>werkzeug.routing 的BaseConverter</code>类从而自己定义一个动态路由过滤器的规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug =<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TelephoneConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line">    regex = <span class="string">&#x27;1[3857]\d&#123;9&#125;&#x27;</span> <span class="comment">#右下斜杠d</span></span><br><span class="line"></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;tel&#x27;</span>] = TelephoneConverter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student/&lt;tel:telenum&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_detail</span>(<span class="params">telenum</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;学生的手机号码是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(telenum)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ol><li><p>自定义动态路由过滤器类，该类必须继承<code>werkzeug.routing</code> 的<code>BaseConverter</code>类</p></li><li><p>通过<code>regex</code>属性指定路由规则</p></li><li><p>讲自定义的类映射到<code>app.url_map.converters</code>中（其本质是一个字典）</p><p><code>app.url_map.converters['tel'] = TelephoneConverter</code></p></li><li><p>app.url_map下的默认的路由规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#: the default converter mapping for the map.</span></span><br><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: UnicodeConverter,</span><br><span class="line">    <span class="string">&quot;string&quot;</span>: UnicodeConverter,</span><br><span class="line">    <span class="string">&quot;any&quot;</span>: AnyConverter,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: PathConverter,</span><br><span class="line">    <span class="string">&quot;int&quot;</span>: IntegerConverter,</span><br><span class="line">    <span class="string">&quot;float&quot;</span>: FloatConverter,</span><br><span class="line">    <span class="string">&quot;uuid&quot;</span>: UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2451-自定义动态路由过滤器之处理动态路由"><a class="markdownIt-Anchor" href="#2451-自定义动态路由过滤器之处理动态路由"></a> 2.4.5.1 自定义动态路由过滤器之处理动态路由</h4><p>自定义一个类，该通过继承<code>werkzeug.routing 的BaseConverter</code>类不光可以实现正则匹配，我们介绍一下以下两个方法：</p><ul><li><p>在该类中实现 <code>to_python</code> 方法：</p><p>这个方法的返回值，将会传递给视图函数的形参。我们可以利用这个方法实现处理url中动态路由部分。</p></li><li><p>在该类中实现 <code>to_url</code> 方法：</p><p>翻转url的时候也就是使用url_for函数的时候，我们传入指定的动态路由部分，触发to_url方法，这个方法的返回值，会拼接在非动态路由上，从而实现生成符合要求的url格式。</p></li></ul><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,url_for</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug =<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line">    regex = <span class="string">&#x27;.*&#x27;</span>     <span class="comment"># 这个regex代表都匹配的意思，可以根据自己的需求制定url规则</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;这个函数用于拿到了路由里的动态参数赋值给value，</span></span><br><span class="line"><span class="string">          可以在to_python进行操作动态参数，</span></span><br><span class="line"><span class="string">          返回操作完的的结果给视图函数的形参&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> value.split(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;这个函数用于和url_for连用，</span></span><br><span class="line"><span class="string">           url_for通过指定给动态参数(以关键字实参的形式)赋值给value</span></span><br><span class="line"><span class="string">           我们可以根据我们的需求操作url_for传进来的参数，</span></span><br><span class="line"><span class="string">           然后返回一个理想的动态路由内容拼接在url上&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;+&#x27;</span>.join(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;list&#x27;</span>] = ListConverter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_list/&lt;list:students&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_list</span>(<span class="params">students</span>):</span></span><br><span class="line">    print(url_for(<span class="string">&#x27;student_list&#x27;</span>,students=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])) <span class="comment"># 输出 /student_list/a+b/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(students)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>证明<code>to_python()</code>方法把访问时候动态路由部分被处理成列表了。</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221628236-97482956.png" alt="" /></p><p>证明我们的 <code>to_url()</code> 方法把<code>url_for()</code>函数传入的动态路由部分由列表转换成拼接字符串了。</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221642997-497647337.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;
&lt;h2 id=&quot;21-url的组成&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#21-url的组成&quot;&gt;&lt;/a&gt; 2.1 URL的组成&lt;/h2&gt;
&lt;figure</summary>
      
    
    
    
    <category term="flask" scheme="http://example.com/categories/flask/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
</feed>
