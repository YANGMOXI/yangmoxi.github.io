<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-18T14:10:26.600Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>yango</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>9-2 SQLAlchemy</title>
    <link href="http://example.com/2021/01/18/flask/9-2%20%E6%80%BB%E7%BB%93_SQLAlchemy/"/>
    <id>http://example.com/2021/01/18/flask/9-2%20%E6%80%BB%E7%BB%93_SQLAlchemy/</id>
    <published>2021-01-18T11:39:27.135Z</published>
    <updated>2021-01-18T14:10:26.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1介绍"><a class="markdownIt-Anchor" href="#1介绍"></a> 1.介绍</h2><p>SQLAlchemy是一个基于Python实现的ORM框架。该框架建立在 DB API之上，使用关系对象映射进行数据库操作，简言之便是：将类和对象转换成SQL，然后使用数据API执行SQL并获取执行结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install sqlalchemy</span><br></pre></td></tr></table></figure><p>组成部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Engine，框架的引擎</span><br><span class="line">Connection Pooling ，数据库连接池</span><br><span class="line">Dialect，选择连接数据库的DB API种类</span><br><span class="line">Schema/Types，架构和类型</span><br><span class="line">SQL Exprression Language，SQL表达式语言</span><br></pre></td></tr></table></figure><p>SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MySQL-Python</span><br><span class="line">    mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line">    </span><br><span class="line">pymysql</span><br><span class="line">    mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span><br><span class="line">    </span><br><span class="line">MySQL-Connector</span><br><span class="line">    mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</span><br><span class="line">    </span><br><span class="line">cx_Oracle</span><br><span class="line">    oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...]</span><br><span class="line">    </span><br><span class="line">更多：http://docs.sqlalchemy.org/en/latest/dialects/index.html</span><br></pre></td></tr></table></figure><p><strong>django中如何反向生成models</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb &gt; app/models.py</span><br></pre></td></tr></table></figure><h2 id="2简单使用能创建表删除表不能修改表"><a class="markdownIt-Anchor" href="#2简单使用能创建表删除表不能修改表"></a> 2.简单使用（能创建表，删除表，不能修改表）</h2><p>修改表：在数据库添加字段，类对应上</p><p>1执行原生sql（不常用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.base <span class="keyword">import</span> Engine</span><br><span class="line"></span><br><span class="line">engine = create_engine(</span><br><span class="line">    <span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/test?charset=utf8&quot;</span>,</span><br><span class="line">    max_overflow=<span class="number">0</span>,  <span class="comment"># 超过连接池大小外最多创建的连接</span></span><br><span class="line">    pool_size=<span class="number">5</span>,  <span class="comment"># 连接池大小</span></span><br><span class="line">    pool_timeout=<span class="number">30</span>,  <span class="comment"># 池中没有线程最多等待的时间，否则报错</span></span><br><span class="line">    pool_recycle=-<span class="number">1</span>  <span class="comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span>(<span class="params">arg</span>):</span></span><br><span class="line">    conn = engine.raw_connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(</span><br><span class="line">        <span class="string">&quot;select * from app01_book&quot;</span></span><br><span class="line">    )</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    print(result)</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    t = threading.Thread(target=task, args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>2 orm使用</p><p><a href="http://models.py">models.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, Text, ForeignKey, DateTime, UniqueConstraint, Index</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span>  <span class="comment"># 数据库表名称</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)  <span class="comment"># id 主键</span></span><br><span class="line">    name = Column(String(<span class="number">32</span>), index=<span class="literal">True</span>, nullable=<span class="literal">False</span>)  <span class="comment"># name列，索引，不可为空</span></span><br><span class="line">    <span class="comment"># email = Column(String(32), unique=True)</span></span><br><span class="line">    <span class="comment">#datetime.datetime.now不能加括号，加了括号，以后永远是当前时间</span></span><br><span class="line">    <span class="comment"># ctime = Column(DateTime, default=datetime.datetime.now)</span></span><br><span class="line">    <span class="comment"># extra = Column(Text, nullable=True)</span></span><br><span class="line"></span><br><span class="line">    __table_args__ = (</span><br><span class="line">        <span class="comment"># UniqueConstraint(&#x27;id&#x27;, &#x27;name&#x27;, name=&#x27;uix_id_name&#x27;), #联合唯一</span></span><br><span class="line">        <span class="comment"># Index(&#x27;ix_id_name&#x27;, &#x27;name&#x27;, &#x27;email&#x27;), #索引</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据类创建数据库表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    engine = create_engine(</span><br><span class="line">        <span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa?charset=utf8&quot;</span>,</span><br><span class="line">        max_overflow=<span class="number">0</span>,  <span class="comment"># 超过连接池大小外最多创建的连接</span></span><br><span class="line">        pool_size=<span class="number">5</span>,  <span class="comment"># 连接池大小</span></span><br><span class="line">        pool_timeout=<span class="number">30</span>,  <span class="comment"># 池中没有线程最多等待的时间，否则报错</span></span><br><span class="line">        pool_recycle=-<span class="number">1</span>  <span class="comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据类删除数据库表</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    engine = create_engine(</span><br><span class="line">        <span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa?charset=utf8&quot;</span>,</span><br><span class="line">        max_overflow=<span class="number">0</span>,  <span class="comment"># 超过连接池大小外最多创建的连接</span></span><br><span class="line">        pool_size=<span class="number">5</span>,  <span class="comment"># 连接池大小</span></span><br><span class="line">        pool_timeout=<span class="number">30</span>,  <span class="comment"># 池中没有线程最多等待的时间，否则报错</span></span><br><span class="line">        pool_recycle=-<span class="number">1</span>  <span class="comment"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    Base.metadata.drop_all(engine)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># drop_db()</span></span><br><span class="line">    init_db()</span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Users</span><br><span class="line"><span class="comment">#&quot;mysql+pymysql://root@127.0.0.1:3306/aaa&quot;</span></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Connection = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次执行数据库操作时，都需要创建一个Connection</span></span><br><span class="line">con = Connection()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ############# 执行ORM操作 #############</span></span><br><span class="line">obj1 = Users(name=<span class="string">&quot;lqz&quot;</span>)</span><br><span class="line">con.add(obj1)</span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">con.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭session，其实是将连接放回连接池</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure><h2 id="3一对多关系"><a class="markdownIt-Anchor" href="#3一对多关系"></a> 3.一对多关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hobby</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;hobby&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    caption = Column(String(<span class="number">50</span>), default=<span class="string">&#x27;篮球&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;person&#x27;</span></span><br><span class="line">    nid = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">32</span>), index=<span class="literal">True</span>, nullable=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># hobby指的是tablename而不是类名，uselist=False</span></span><br><span class="line">    hobby_id = Column(Integer, ForeignKey(<span class="string">&quot;hobby.id&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 跟数据库无关，不会新增字段，只用于快速链表操作</span></span><br><span class="line">    <span class="comment"># 类名，backref用于反向查询</span></span><br><span class="line">    hobby=relationship(<span class="string">&#x27;Hobby&#x27;</span>,backref=<span class="string">&#x27;pers&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4多对多关系"><a class="markdownIt-Anchor" href="#4多对多关系"></a> 4.多对多关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy2Girl</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;boy2girl&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    girl_id = Column(Integer, ForeignKey(<span class="string">&#x27;girl.id&#x27;</span>))</span><br><span class="line">    boy_id = Column(Integer, ForeignKey(<span class="string">&#x27;boy.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;girl&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span>(<span class="params">Base</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;boy&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    hostname = Column(String(<span class="number">64</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 与生成表结构无关，仅用于查询方便,放在哪个单表中都可以</span></span><br><span class="line">    servers = relationship(<span class="string">&#x27;Girl&#x27;</span>, secondary=<span class="string">&#x27;boy2girl&#x27;</span>, backref=<span class="string">&#x27;boys&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="5操作数据表"><a class="markdownIt-Anchor" href="#5操作数据表"></a> 5.操作数据表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Users</span><br><span class="line">  </span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123456@127.0.0.1:3306/aaa&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 每次执行数据库操作时，都需要创建一个session</span></span><br><span class="line">session = Session()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># ############# 执行ORM操作 #############</span></span><br><span class="line">obj1 = Users(name=<span class="string">&quot;lqz&quot;</span>)</span><br><span class="line">session.add(obj1)</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 关闭session</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="6基于scoped_session实现线程安全"><a class="markdownIt-Anchor" href="#6基于scoped_session实现线程安全"></a> 6.基于scoped_session实现线程安全</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> scoped_session</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Users</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 线程安全，基于本地线程实现每个线程用同一个session</span></span><br><span class="line"><span class="string"># 特殊的：scoped_session中有原来方法的Session中的一下方法：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">public_methods = (</span></span><br><span class="line"><span class="string">    &#x27;__contains__&#x27;, &#x27;__iter__&#x27;, &#x27;add&#x27;, &#x27;add_all&#x27;, &#x27;begin&#x27;, &#x27;begin_nested&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;close&#x27;, &#x27;commit&#x27;, &#x27;connection&#x27;, &#x27;delete&#x27;, &#x27;execute&#x27;, &#x27;expire&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;expire_all&#x27;, &#x27;expunge&#x27;, &#x27;expunge_all&#x27;, &#x27;flush&#x27;, &#x27;get_bind&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;is_modified&#x27;, &#x27;bulk_save_objects&#x27;, &#x27;bulk_insert_mappings&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;bulk_update_mappings&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;merge&#x27;, &#x27;query&#x27;, &#x27;refresh&#x27;, &#x27;rollback&#x27;,</span></span><br><span class="line"><span class="string">    &#x27;scalar&#x27;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#scoped_session类并没有继承Session,但是却又它的所有方法</span></span><br><span class="line">session = scoped_session(Session)</span><br><span class="line"><span class="comment"># ############# 执行ORM操作 #############</span></span><br><span class="line">obj1 = Users(name=<span class="string">&quot;alex1&quot;</span>)</span><br><span class="line">session.add(obj1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交事务</span></span><br><span class="line">session.commit()</span><br><span class="line"><span class="comment"># 关闭session</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="7基本增删查改"><a class="markdownIt-Anchor" href="#7基本增删查改"></a> 7.基本增删查改</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ################ 添加 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">obj1 = Users(name=&quot;wupeiqi&quot;)</span></span><br><span class="line"><span class="string">session.add(obj1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session.add_all([</span></span><br><span class="line"><span class="string">    Users(name=&quot;lqz&quot;),</span></span><br><span class="line"><span class="string">    Users(name=&quot;egon&quot;),</span></span><br><span class="line"><span class="string">    Hosts(name=&quot;c1.com&quot;),</span></span><br><span class="line"><span class="string">])</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ################ 删除 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 2).delete()</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ################ 修改 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#传字典</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 0).update(&#123;&quot;name&quot; : &quot;lqz&quot;&#125;)</span></span><br><span class="line"><span class="string">#类似于django的F查询</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 0).update(&#123;Users.name: Users.name + &quot;099&quot;&#125;, synchronize_session=False)</span></span><br><span class="line"><span class="string">session.query(Users).filter(Users.id &gt; 0).update(&#123;&quot;age&quot;: Users.age + 1&#125;, synchronize_session=&quot;evaluate&quot;)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># ################ 查询 ################</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">r1 = session.query(Users).all()</span></span><br><span class="line"><span class="string">#只取age列，把name重命名为xx</span></span><br><span class="line"><span class="string">r2 = session.query(Users.name.label(&#x27;xx&#x27;), Users.age).all()</span></span><br><span class="line"><span class="string">#filter传的是表达式，filter_by传的是参数</span></span><br><span class="line"><span class="string">r3 = session.query(Users).filter(Users.name == &quot;lqz&quot;).all()</span></span><br><span class="line"><span class="string">r4 = session.query(Users).filter_by(name=&#x27;lqz&#x27;).all()</span></span><br><span class="line"><span class="string">r5 = session.query(Users).filter_by(name=&#x27;lqz&#x27;).first()</span></span><br><span class="line"><span class="string">#:value 和:name 相当于占位符，用params传参数</span></span><br><span class="line"><span class="string">r6 = session.query(Users).filter(text(&quot;id&lt;:value and name=:name&quot;)).params(value=224, name=&#x27;fred&#x27;).order_by(Users.id).all()</span></span><br><span class="line"><span class="string">#自定义查询sql</span></span><br><span class="line"><span class="string">r7 = session.query(Users).from_statement(text(&quot;SELECT * FROM users where name=:name&quot;)).params(name=&#x27;ed&#x27;).all()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#增，删，改都要commit()</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="8常用操作"><a class="markdownIt-Anchor" href="#8常用操作"></a> 8.常用操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#　条件</span></span><br><span class="line">ret = session.query(Users).filter_by(name=<span class="string">&#x27;lqz&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#表达式，and条件连接</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> &gt; <span class="number">1</span>, Users.name == <span class="string">&#x27;eric&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span>.between(<span class="number">1</span>, <span class="number">3</span>), Users.name == <span class="string">&#x27;eric&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#注意下划线</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span>.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>])).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#~非，除。。外</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(~Users.<span class="built_in">id</span>.in_([<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>])).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#二次筛选</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.<span class="built_in">id</span>.in_(session.query(Users.<span class="built_in">id</span>).filter_by(name=<span class="string">&#x27;eric&#x27;</span>))).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_, or_</span><br><span class="line"><span class="comment">#or_包裹的都是or条件，and_包裹的都是and条件</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(and_(Users.<span class="built_in">id</span> &gt; <span class="number">3</span>, Users.name == <span class="string">&#x27;eric&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(or_(Users.<span class="built_in">id</span> &lt; <span class="number">2</span>, Users.name == <span class="string">&#x27;eric&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(</span><br><span class="line">    or_(</span><br><span class="line">        Users.<span class="built_in">id</span> &lt; <span class="number">2</span>,</span><br><span class="line">        and_(Users.name == <span class="string">&#x27;eric&#x27;</span>, Users.<span class="built_in">id</span> &gt; <span class="number">3</span>),</span><br><span class="line">        Users.extra != <span class="string">&quot;&quot;</span></span><br><span class="line">    )).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符，以e开头，不以e开头</span></span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(Users.name.like(<span class="string">&#x27;e%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">ret = session.query(Users).<span class="built_in">filter</span>(~Users.name.like(<span class="string">&#x27;e%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制，用于分页，区间</span></span><br><span class="line">ret = session.query(Users)[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序，根据name降序排列（从大到小）</span></span><br><span class="line">ret = session.query(Users).order_by(Users.name.desc()).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#第一个条件重复后，再按第二个条件升序排</span></span><br><span class="line">ret = session.query(Users).order_by(Users.name.desc(), Users.<span class="built_in">id</span>.asc()).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分组</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line">ret = session.query(Users).group_by(Users.extra).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#分组之后取最大id，id之和，最小id</span></span><br><span class="line">ret = session.query(</span><br><span class="line">    func.<span class="built_in">max</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">sum</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">min</span>(Users.<span class="built_in">id</span>)).group_by(Users.name).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#haviing筛选</span></span><br><span class="line">ret = session.query(</span><br><span class="line">    func.<span class="built_in">max</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">sum</span>(Users.<span class="built_in">id</span>),</span><br><span class="line">    func.<span class="built_in">min</span>(Users.<span class="built_in">id</span>)).group_by(Users.name).having(func.<span class="built_in">min</span>(Users.<span class="built_in">id</span>) &gt;<span class="number">2</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连表（默认用forinkey关联）</span></span><br><span class="line"></span><br><span class="line">ret = session.query(Users, Favor).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> == Favor.nid).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#join表，默认是inner join</span></span><br><span class="line">ret = session.query(Person).join(Favor).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#isouter=True 外连，表示Person left join Favor，没有右连接，反过来即可</span></span><br><span class="line">ret = session.query(Person).join(Favor, isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment">#打印原生sql</span></span><br><span class="line">aa=session.query(Person).join(Favor, isouter=<span class="literal">True</span>)</span><br><span class="line">print(aa)</span><br><span class="line"><span class="comment"># 自己指定on条件（连表条件）,第二个参数，支持on多个条件，用and_,同上</span></span><br><span class="line">ret = session.query(Person).join(Favor,Person.<span class="built_in">id</span>==Favor.<span class="built_in">id</span>, isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 组合（了解）UNION 操作符用于合并两个或多个 SELECT 语句的结果集</span></span><br><span class="line"><span class="comment">#union和union all的区别？</span></span><br><span class="line">q1 = session.query(Users.name).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> &gt; <span class="number">2</span>)</span><br><span class="line">q2 = session.query(Favor.caption).<span class="built_in">filter</span>(Favor.nid &lt; <span class="number">2</span>)</span><br><span class="line">ret = q1.union(q2).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">q1 = session.query(Users.name).<span class="built_in">filter</span>(Users.<span class="built_in">id</span> &gt; <span class="number">2</span>)</span><br><span class="line">q2 = session.query(Favor.caption).<span class="built_in">filter</span>(Favor.nid &lt; <span class="number">2</span>)</span><br><span class="line">ret = q1.union_all(q2).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><h2 id="9执行原生sql"><a class="markdownIt-Anchor" href="#9执行原生sql"></a> 9.执行原生sql</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="comment"># cursor = session.execute(&#x27;select * from users&#x27;)</span></span><br><span class="line"><span class="comment"># result = cursor.fetchall()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">cursor = session.execute(<span class="string">&#x27;insert into users(name) values(:value)&#x27;</span>,params=&#123;<span class="string">&quot;value&quot;</span>:<span class="string">&#x27;lqz&#x27;</span>&#125;)</span><br><span class="line">session.commit()</span><br><span class="line">print(cursor.lastrowid)</span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="10一对多"><a class="markdownIt-Anchor" href="#10一对多"></a> 10.一对多</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts, Hobby, Person</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session.add_all([</span></span><br><span class="line"><span class="string">    Hobby(caption=&#x27;乒乓球&#x27;),</span></span><br><span class="line"><span class="string">    Hobby(caption=&#x27;羽毛球&#x27;),</span></span><br><span class="line"><span class="string">    Person(name=&#x27;张三&#x27;, hobby_id=3),</span></span><br><span class="line"><span class="string">    Person(name=&#x27;李四&#x27;, hobby_id=4),</span></span><br><span class="line"><span class="string">])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">person = Person(name=&#x27;张九&#x27;, hobby=Hobby(caption=&#x27;姑娘&#x27;))</span></span><br><span class="line"><span class="string">session.add(person)</span></span><br><span class="line"><span class="string">#添加二</span></span><br><span class="line"><span class="string">hb = Hobby(caption=&#x27;人妖&#x27;)</span></span><br><span class="line"><span class="string">hb.pers = [Person(name=&#x27;文飞&#x27;), Person(name=&#x27;博雅&#x27;)]</span></span><br><span class="line"><span class="string">session.add(hb)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship正向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Person).first()</span></span><br><span class="line"><span class="string">print(v.name)</span></span><br><span class="line"><span class="string">print(v.hobby.caption)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship反向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Hobby).first()</span></span><br><span class="line"><span class="string">print(v.caption)</span></span><br><span class="line"><span class="string">print(v.pers)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#方式一，自己链表</span></span><br><span class="line"><span class="comment"># person_list=session.query(models.Person.name,models.Hobby.caption).join(models.Hobby,isouter=True).all()</span></span><br><span class="line">person_list=session.query(models.Person,models.Hobby).join(models.Hobby,isouter=<span class="literal">True</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> person_list:</span><br><span class="line">    <span class="comment"># print(row.name,row.caption)</span></span><br><span class="line">    print(row[<span class="number">0</span>].name,row[<span class="number">1</span>].caption)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二：通过relationship</span></span><br><span class="line"></span><br><span class="line">person_list=session.query(models.Person).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> person_list:</span><br><span class="line">    print(row.name,row.hobby.caption)</span><br><span class="line"><span class="comment">#查询喜欢姑娘的所有人</span></span><br><span class="line">obj=session.query(models.Hobby).<span class="built_in">filter</span>(models.Hobby.<span class="built_in">id</span>==<span class="number">1</span>).first()</span><br><span class="line">persons=obj.pers</span><br><span class="line">print(persons)</span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="11多对多"><a class="markdownIt-Anchor" href="#11多对多"></a> 11.多对多</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts, Hobby, Person, Group, Server, Server2Group</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">session.add_all([</span></span><br><span class="line"><span class="string">    Server(hostname=&#x27;c1.com&#x27;),</span></span><br><span class="line"><span class="string">    Server(hostname=&#x27;c2.com&#x27;),</span></span><br><span class="line"><span class="string">    Group(name=&#x27;A组&#x27;),</span></span><br><span class="line"><span class="string">    Group(name=&#x27;B组&#x27;),</span></span><br><span class="line"><span class="string">])</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">s2g = Server2Group(server_id=1, group_id=1)</span></span><br><span class="line"><span class="string">session.add(s2g)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">gp = Group(name=&#x27;C组&#x27;)</span></span><br><span class="line"><span class="string">gp.servers = [Server(hostname=&#x27;c3.com&#x27;),Server(hostname=&#x27;c4.com&#x27;)]</span></span><br><span class="line"><span class="string">session.add(gp)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ser = Server(hostname=&#x27;c6.com&#x27;)</span></span><br><span class="line"><span class="string">ser.groups = [Group(name=&#x27;F组&#x27;),Group(name=&#x27;G组&#x27;)]</span></span><br><span class="line"><span class="string">session.add(ser)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship正向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Group).first()</span></span><br><span class="line"><span class="string">print(v.name)</span></span><br><span class="line"><span class="string">print(v.servers)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用relationship反向查询</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">v = session.query(Server).first()</span></span><br><span class="line"><span class="string">print(v.hostname)</span></span><br><span class="line"><span class="string">print(v.groups)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="12其它"><a class="markdownIt-Anchor" href="#12其它"></a> 12.其它</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> text, func</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.engine.result <span class="keyword">import</span> ResultProxy</span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> Users, Hosts, Hobby, Person, Group, Server, Server2Group</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">&quot;mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8&quot;</span>, max_overflow=<span class="number">0</span>, pool_size=<span class="number">5</span>)</span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联子查询:correlate(Group)表示跟Group表做关联，as_scalar相当于对该sql加括号，用于放在后面当子查询</span></span><br><span class="line">subqry = session.query(func.count(Server.<span class="built_in">id</span>).label(<span class="string">&quot;sid&quot;</span>)).<span class="built_in">filter</span>(Server.<span class="built_in">id</span> == Group.<span class="built_in">id</span>).correlate(Group).as_scalar()</span><br><span class="line">result = session.query(Group.name, subqry)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">SELECT `group`.name AS group_name, (SELECT count(server.id) AS sid </span></span><br><span class="line"><span class="string">FROM server </span></span><br><span class="line"><span class="string">WHERE server.id = `group`.id) AS anon_1 </span></span><br><span class="line"><span class="string">FROM `group`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select * from tb where id in [select id from xxx];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select id,</span></span><br><span class="line"><span class="string">name,</span></span><br><span class="line"><span class="string">#必须保证此次查询只有一个值</span></span><br><span class="line"><span class="string">(select max(id) from xxx) as mid</span></span><br><span class="line"><span class="string">from tb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例如，第三个字段只能有一个值</span></span><br><span class="line"><span class="string">id name  mid</span></span><br><span class="line"><span class="string">1  lqz   1，2  不合理</span></span><br><span class="line"><span class="string">2  egon   2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">成绩表：</span></span><br><span class="line"><span class="string">id sid    cid    score</span></span><br><span class="line"><span class="string">1  1      物理      99 </span></span><br><span class="line"><span class="string">2  1      化学      88</span></span><br><span class="line"><span class="string">3  2      物理      95</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">学生表：</span></span><br><span class="line"><span class="string">id   name  每个学生总分数</span></span><br><span class="line"><span class="string">1     xx      88</span></span><br><span class="line"><span class="string">2     yy       77</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">select id，name,</span></span><br><span class="line"><span class="string">(select avr(score) from 成绩表 where 成绩表.sid=学生表.id) as x</span></span><br><span class="line"><span class="string">from 学生表</span></span><br><span class="line"><span class="string">subqry = session.query(func.count(成绩表.scort).label(&quot;sc&quot;)).filter(学生表.id == 成绩表.sid).correlate(学生表).as_scalar()</span></span><br><span class="line"><span class="string">result = session.query(学生表.name, subqry)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原生SQL</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 查询</span></span><br><span class="line"><span class="string">cursor = session.execute(&#x27;select * from users&#x27;)</span></span><br><span class="line"><span class="string">result = cursor.fetchall()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 添加</span></span><br><span class="line"><span class="string">cursor = session.execute(&#x27;insert into users(name) values(:value)&#x27;,params=&#123;&quot;value&quot;:&#x27;wupeiqi&#x27;&#125;)</span></span><br><span class="line"><span class="string">session.commit()</span></span><br><span class="line"><span class="string">print(cursor.lastrowid)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><h2 id="13flask-sqlalchemy"><a class="markdownIt-Anchor" href="#13flask-sqlalchemy"></a> 13.Flask-SQLAlchemy</h2><p>flask和SQLAchemy的管理者，通过他把他们做连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy()</span><br><span class="line">- 包含配置</span><br><span class="line">- 包含ORM基类</span><br><span class="line">- 包含create_all</span><br><span class="line">- engine</span><br><span class="line">- 创建连接</span><br></pre></td></tr></table></figure><p>离线脚本，创建表</p><p>详见代码</p><p>flask-migrate<br />python3 <a href="http://manage.py">manage.py</a> db init 初始化：只执行一次</p><p>python3 <a href="http://manage.py">manage.py</a> db migrate 等同于 makemigartions<br />python3 <a href="http://manage.py">manage.py</a> db upgrade 等同于migrate</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1介绍&quot;&gt;&lt;/a&gt; 1.介绍&lt;/h2&gt;
&lt;p&gt;SQLAlchemy是一个基于Python实现的ORM框架。该框架建立在 DB API之上，使用关系对象映射进行数据库操作，简言之便是：</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>9-1 Flask</title>
    <link href="http://example.com/2021/01/18/flask/9-1%20%E6%80%BB%E7%BB%93_flask/"/>
    <id>http://example.com/2021/01/18/flask/9-1%20%E6%80%BB%E7%BB%93_flask/</id>
    <published>2021-01-18T11:39:27.130Z</published>
    <updated>2021-01-18T14:10:36.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0flask简介"><a class="markdownIt-Anchor" href="#0flask简介"></a> 0.Flask简介</h2><p>Flask是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架，对于Werkzeug本质是Socket服务端，其用于接收http请求并对请求进行预处理，然后触发Flask框架，开发人员基于Flask框架提供的功能对请求进行相应的处理，并返回给用户，如果要返回给用户复杂的内容时，需要借助jinja2模板来实现对模板的处理，即：将模板和数据进行渲染，将渲染后的字符串返回给用户浏览器。</p><p>“微”(micro) 并不表示你需要把整个 Web 应用塞进单个 Python 文件（虽然确实可以 ），也不意味着 Flask 在功能上有所欠缺。微框架中的“微”意味着 Flask 旨在保持核心简单而易于扩展。Flask 不会替你做出太多决策——比如使用何种数据库。而那些 Flask 所选择的——比如使用何种模板引擎——则很容易替换。除此之外的一切都由可由你掌握。如此，Flask 可以与您珠联璧合。</p><p>默认情况下，Flask 不包含数据库抽象层、表单验证，或是其它任何已有多种库可以胜任的功能。然而，Flask 支持用扩展来给应用添加这些功能，如同是 Flask 本身实现的一样。众多的扩展提供了数据库集成、表单验证、上传处理、各种各样的开放认证技术等功能。Flask 也许是“微小”的，但它已准备好在需求繁杂的生产环境中投入使用</p><h3 id="wsgiref"><a class="markdownIt-Anchor" href="#wsgiref"></a> wsgiref</h3><p>最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。</p><p>如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。</p><p>正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口协议来实现这样的服务器软件，让我们专心用Python编写Web业务。这个接口就是WSGI：Web Server Gateway Interface。而wsgiref模块就是python基于wsgi协议开发的服务模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mya</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    print(environ)</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line">    <span class="keyword">if</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/index&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data=f.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> environ.get(<span class="string">&#x27;PATH_INFO&#x27;</span>) == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;login.html&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data=<span class="string">b&#x27;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [data]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    myserver = make_server(<span class="string">&#x27;&#x27;</span>, <span class="number">8011</span>, mya)</span><br><span class="line">    print(<span class="string">&#x27;监听8010&#x27;</span>)</span><br><span class="line">    myserver.serve_forever()</span><br><span class="line"></span><br><span class="line">wsgiref简单应用</span><br></pre></td></tr></table></figure><h2 id="1安装"><a class="markdownIt-Anchor" href="#1安装"></a> 1.安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask</span><br></pre></td></tr></table></figure><h2 id="2werkzeug简介"><a class="markdownIt-Anchor" href="#2werkzeug简介"></a> 2.werkzeug简介</h2><p>Werkzeug是一个WSGI工具包，他可以作为一个Web框架的底层库。这里稍微说一下， werkzeug 不是一个web服务器，也不是一个web框架，而是一个工具包，官方的介绍说是一个 WSGI 工具包，它可以作为一个 Web 框架的底层库，因为它封装好了很多 Web 框架的东西，例如 Request，Response 等等</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> Request, Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@Request.application</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line">    run_simple(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">4000</span>, hello)</span><br></pre></td></tr></table></figure><h2 id="3flask快速使用"><a class="markdownIt-Anchor" href="#3flask快速使用"></a> 3.flask快速使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 实例化产生一个Flask对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 将 &#x27;/&#x27;和视图函数hello_workd的对应关系添加到路由中</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span><span class="comment"># 1. v=app.route(&#x27;/&#x27;) 2. v(hello_world)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run() <span class="comment"># 最终调用了run_simple()</span></span><br></pre></td></tr></table></figure><h3 id="案例登录显示用户信息"><a class="markdownIt-Anchor" href="#案例登录显示用户信息"></a> 案例：登录，显示用户信息</h3><p><a href="http://main.py">main.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,redirect,session,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;sdfsdfsdfsdf&#x27;</span></span><br><span class="line"></span><br><span class="line">USERS = &#123;</span><br><span class="line">    <span class="number">1</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;text&#x27;</span>:<span class="string">&quot;道路千万条&quot;</span>&#125;,</span><br><span class="line">    <span class="number">2</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">28</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;text&#x27;</span>:<span class="string">&quot;安全第一条&quot;</span>&#125;,</span><br><span class="line">    <span class="number">3</span>:&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;gender&#x27;</span>:<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;text&#x27;</span>:<span class="string">&quot;行车不规范&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/detail/&lt;int:nid&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>(<span class="params">nid</span>):</span></span><br><span class="line">    user = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    info = USERS.get(nid)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;detail.html&#x27;</span>,info=info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    user = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        <span class="comment"># return redirect(&#x27;/login&#x27;)</span></span><br><span class="line">        url = url_for(<span class="string">&#x27;l1&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,user_dict=USERS)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],endpoint=<span class="string">&#x27;l1&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># request.query_string</span></span><br><span class="line">        user = request.form.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        pwd = request.form.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">&#x27;cxw&#x27;</span> <span class="keyword">and</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            session[<span class="string">&#x27;user_info&#x27;</span>] = user</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>,error=<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>detail.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>详细信息 &#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123;info.text&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% for k,v in user_dict.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v[&#x27;name&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.get(&#x27;name&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/detail/&#123;&#123;k&#125;&#125;&quot;</span>&gt;</span>查看详细<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span>&#123;&#123;error&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作业登录认证装饰器"><a class="markdownIt-Anchor" href="#作业登录认证装饰器"></a> 作业：登录认证装饰器</h3><p>-多个装饰器执行顺序</p><p>-反向查找的名称（endpoint），不允许重复</p><h2 id="4配置文件"><a class="markdownIt-Anchor" href="#4配置文件"></a> 4.配置文件</h2><p>flask中的配置文件是一个flask.config.Config对象（继承字典）,默认配置为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;DEBUG&#x27;</span>:                                <span class="literal">False</span>  <span class="comment"># get_debug_flag(default=False),  是否开启Debug模式</span></span><br><span class="line">    <span class="string">&#x27;TESTING&#x27;</span>:                              <span class="literal">False</span>, <span class="comment"># 是否开启测试模式</span></span><br><span class="line">    <span class="string">&#x27;PROPAGATE_EXCEPTIONS&#x27;</span>:                 <span class="literal">None</span>,                          </span><br><span class="line">    <span class="string">&#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;</span>:        <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SECRET_KEY&#x27;</span>:                           <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>:           timedelta(days=<span class="number">31</span>),</span><br><span class="line">    <span class="string">&#x27;USE_X_SENDFILE&#x27;</span>:                       <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;LOGGER_NAME&#x27;</span>:                          <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;LOGGER_HANDLER_POLICY&#x27;</span>:               <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_NAME&#x27;</span>:                          <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;APPLICATION_ROOT&#x27;</span>:                     <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_NAME&#x27;</span>:                  <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_DOMAIN&#x27;</span>:                <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_PATH&#x27;</span>:                  <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_HTTPONLY&#x27;</span>:              <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_COOKIE_SECURE&#x27;</span>:                <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;SESSION_REFRESH_EACH_REQUEST&#x27;</span>:         <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>:                   <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;</span>:            timedelta(hours=<span class="number">12</span>),</span><br><span class="line">    <span class="string">&#x27;TRAP_BAD_REQUEST_ERRORS&#x27;</span>:              <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;TRAP_HTTP_EXCEPTIONS&#x27;</span>:                 <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;EXPLAIN_TEMPLATE_LOADING&#x27;</span>:             <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;PREFERRED_URL_SCHEME&#x27;</span>:                 <span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;JSON_AS_ASCII&#x27;</span>:                        <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;JSON_SORT_KEYS&#x27;</span>:                       <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;</span>:          <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;JSONIFY_MIMETYPE&#x27;</span>:                     <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;TEMPLATES_AUTO_RELOAD&#x27;</span>:                <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式一"><a class="markdownIt-Anchor" href="#方式一"></a> 方式一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;DEBUG&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">   PS： 由于Config对象本质上是字典，所以还可以使用app.config.update(...)</span><br></pre></td></tr></table></figure><h3 id="方式二"><a class="markdownIt-Anchor" href="#方式二"></a> 方式二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过py文件配置</span></span><br><span class="line">app.config.from_pyfile(<span class="string">&quot;python文件名称&quot;</span>)</span><br><span class="line">如：</span><br><span class="line">settings.py</span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app.config.from_pyfile(<span class="string">&quot;settings.py&quot;</span>)</span><br><span class="line"><span class="comment">#通过环境变量配置</span></span><br><span class="line">app.config.from_envvar(<span class="string">&quot;环境变量名称&quot;</span>)</span><br><span class="line"><span class="comment">#app.config.from_pyfile(os.environ[&#x27;YOURAPPLICATION_SETTINGS&#x27;])</span></span><br><span class="line">环境变量的值为python文件名称名称，内部调用from_pyfile方法</span><br><span class="line"></span><br><span class="line">app.config.from_json(<span class="string">&quot;json文件名称&quot;</span>)</span><br><span class="line">JSON文件名称，必须是json格式，因为内部会执行json.loads</span><br><span class="line"></span><br><span class="line">app.config.from_mapping(&#123;<span class="string">&#x27;DEBUG&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">字典格式</span><br><span class="line"></span><br><span class="line">app.config.from_object(<span class="string">&quot;python类或类的路径&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.config.from_object(<span class="string">&#x27;pro_flask.settings.TestingConfig&#x27;</span>)</span><br><span class="line"></span><br><span class="line">settings.py</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    DEBUG = <span class="literal">False</span></span><br><span class="line">    TESTING = <span class="literal">False</span></span><br><span class="line">    DATABASE_URI = <span class="string">&#x27;sqlite://:memory:&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    DATABASE_URI = <span class="string">&#x27;mysql://user@localhost/foo&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    TESTING = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS: 从sys.path中已经存在路径开始写</span><br><span class="line"></span><br><span class="line">PS: settings.py文件默认路径要放在程序root_path目录，如果instance_relative_config为<span class="literal">True</span>，则就是instance_path目录（Flask对象init方法的参数）</span><br></pre></td></tr></table></figure><h3 id="典型写法"><a class="markdownIt-Anchor" href="#典型写法"></a> 典型写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/detail/&lt;int:nid&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>],endpoint=<span class="string">&#x27;detail&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure><h3 id="默认转换器"><a class="markdownIt-Anchor" href="#默认转换器"></a> 默认转换器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>:          UnicodeConverter,</span><br><span class="line">    <span class="string">&#x27;string&#x27;</span>:           UnicodeConverter,</span><br><span class="line">    <span class="string">&#x27;any&#x27;</span>:              AnyConverter,</span><br><span class="line">    <span class="string">&#x27;path&#x27;</span>:             PathConverter,</span><br><span class="line">    <span class="string">&#x27;int&#x27;</span>:              IntegerConverter,</span><br><span class="line">    <span class="string">&#x27;float&#x27;</span>:            FloatConverter,</span><br><span class="line">    <span class="string">&#x27;uuid&#x27;</span>:             UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由系统本质"><a class="markdownIt-Anchor" href="#路由系统本质"></a> 路由系统本质</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. decorator = app.route(&#x27;/&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;],endpoint=&#x27;n1&#x27;)</span></span><br><span class="line"><span class="string">    def route(self, rule, **options):</span></span><br><span class="line"><span class="string">        # app对象</span></span><br><span class="line"><span class="string">        # rule= /</span></span><br><span class="line"><span class="string">        # options = &#123;methods=[&#x27;GET&#x27;,&#x27;POST&#x27;],endpoint=&#x27;n1&#x27;&#125;</span></span><br><span class="line"><span class="string">        def decorator(f):</span></span><br><span class="line"><span class="string">            endpoint = options.pop(&#x27;endpoint&#x27;, None)</span></span><br><span class="line"><span class="string">            self.add_url_rule(rule, endpoint, f, **options)</span></span><br><span class="line"><span class="string">            return f</span></span><br><span class="line"><span class="string">        return decorator</span></span><br><span class="line"><span class="string">2. @decorator</span></span><br><span class="line"><span class="string">    decorator(index)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#同理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;登录&#x27;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;n2&#x27;</span>, login, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&quot;POST&quot;</span>])</span><br><span class="line"><span class="comment">#与django路由类似</span></span><br><span class="line"><span class="comment">#django与flask路由：flask路由基于装饰器，本质是基于：add_url_rule</span></span><br><span class="line"><span class="comment">#add_url_rule 源码中，endpoint如果为空，endpoint = _endpoint_from_view_func(view_func)，最终取view_func.__name__（函数名）</span></span><br></pre></td></tr></table></figure><h3 id="cbv源码分析"><a class="markdownIt-Anchor" href="#cbv源码分析"></a> CBV(源码分析)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;before&#x27;</span>)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;after&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">views.View</span>):</span></span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>]</span><br><span class="line">    decorators = [auth, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Index&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Index!&#x27;</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/index&#x27;</span>, view_func=IndexView.as_view(name=<span class="string">&#x27;index&#x27;</span>))  <span class="comment"># name=endpoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者，通常用此方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span>(<span class="params">views.MethodView</span>):</span></span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>]</span><br><span class="line">    decorators = [auth, ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Index.GET&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Index.POST&#x27;</span></span><br><span class="line">    app.add_url_rule(<span class="string">&#x27;/index&#x27;</span>, view_func=IndexView.as_view(name=<span class="string">&#x27;index&#x27;</span>))  <span class="comment"># name=endpoint</span></span><br></pre></td></tr></table></figure><h3 id="appadd_url_rule参数"><a class="markdownIt-Anchor" href="#appadd_url_rule参数"></a> app.add_url_rule参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route和app.add_url_rule参数:</span></span><br><span class="line">    </span><br><span class="line">rule,       <span class="comment"># URL规则</span></span><br><span class="line">view_func,  <span class="comment"># 视图函数名称</span></span><br><span class="line">defaults = <span class="literal">None</span>,  <span class="comment"># 默认值, 当URL中无参数，函数需要参数时，使用defaults = &#123;&#x27;k&#x27;: &#x27;v&#x27;&#125;</span></span><br><span class="line">为函数提供参数</span><br><span class="line">endpoint = <span class="literal">None</span>,  <span class="comment"># 名称，用于反向生成URL，即： url_for(&#x27;名称&#x27;)</span></span><br><span class="line">methods = <span class="literal">None</span>,   <span class="comment"># 允许的请求方式，如：[&quot;GET&quot;, &quot;POST&quot;]</span></span><br><span class="line"><span class="comment">#对URL最后的 / 符号是否严格要求</span></span><br><span class="line">strict_slashes = <span class="literal">None</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index&#x27;, strict_slashes=False)</span></span><br><span class="line"><span class="string">        #访问http://www.xx.com/index/ 或http://www.xx.com/index均可</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index&#x27;, strict_slashes=True)</span></span><br><span class="line"><span class="string">        #仅访问http://www.xx.com/index</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#重定向到指定地址</span></span><br><span class="line">redirect_to = <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index/&lt;int:nid&gt;&#x27;, redirect_to=&#x27;/home/&lt;nid&gt;&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#子域名访问</span></span><br><span class="line">subdomain = <span class="literal">None</span>, </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    #C:\Windows\System32\drivers\etc\hosts</span></span><br><span class="line"><span class="string">    127.0.0.1       www.liuqingzheng.com</span></span><br><span class="line"><span class="string">127.0.0.1       admin.liuqingzheng.com</span></span><br><span class="line"><span class="string">127.0.0.1       buy.liuqingzheng.com</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    from flask import Flask, views, url_for</span></span><br><span class="line"><span class="string">    app = Flask(import_name=__name__)</span></span><br><span class="line"><span class="string">    app.config[&#x27;SERVER_NAME&#x27;] = &#x27;liuqingzheng.com:5000&#x27;</span></span><br><span class="line"><span class="string">    @app.route(&quot;/&quot;, subdomain=&quot;admin&quot;)</span></span><br><span class="line"><span class="string">    def static_index():</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;Flask supports static subdomains</span></span><br><span class="line"><span class="string">        This is available at static.your-domain.tld&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return &quot;static.your-domain.tld&quot;</span></span><br><span class="line"><span class="string">    #可以传入任意的字符串，如传入的字符串为aa，显示为 aa.liuqingzheng.com</span></span><br><span class="line"><span class="string">    @app.route(&quot;/dynamic&quot;, subdomain=&quot;&lt;username&gt;&quot;)</span></span><br><span class="line"><span class="string">    def username_index(username):</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;Dynamic subdomains are also supported</span></span><br><span class="line"><span class="string">        Try going to user1.your-domain.tld/dynamic&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        return username + &quot;.your-domain.tld&quot;</span></span><br><span class="line"><span class="string">    if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">        app.run()</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    访问：</span></span><br><span class="line"><span class="string">    http://www.liuqingzheng.com:5000/dynamic</span></span><br><span class="line"><span class="string">    http://admin.liuqingzheng.com:5000/dynamic</span></span><br><span class="line"><span class="string">    http://buy.liuqingzheng.com:5000/dynamic</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="支持正则"><a class="markdownIt-Anchor" href="#支持正则"></a> 支持正则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1 写类，继承BaseConverter</span></span><br><span class="line"><span class="comment">#2 注册：app.url_map.converters[&#x27;regex&#x27;] = RegexConverter</span></span><br><span class="line"><span class="comment">#3 使用：@app.route(&#x27;/index/&lt;regex(&quot;\d+&quot;):nid&gt;&#x27;)  正则表达式会当作第二个参数传递到类中</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, views, url_for</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(import_name=__name__)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义URL匹配正则表达式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, <span class="built_in">map</span>, regex</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RegexConverter, self).__init__(<span class="built_in">map</span>)</span><br><span class="line">        self.regex = regex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        路由匹配时，匹配成功后传递给视图函数中参数的值</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        使用url_for反向生成URL时，传递的参数经过该方法处理，返回的值用于生成URL中的参数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        val = <span class="built_in">super</span>(RegexConverter, self).to_url(value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"><span class="comment"># 添加到flask中</span></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;regex&#x27;</span>] = RegexConverter</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index/&lt;regex(&quot;\d+&quot;):nid&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">nid</span>):</span></span><br><span class="line">    print(url_for(<span class="string">&#x27;index&#x27;</span>, nid=<span class="string">&#x27;888&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="6模版"><a class="markdownIt-Anchor" href="#6模版"></a> 6.模版</h2><h4 id="61渲染变量"><a class="markdownIt-Anchor" href="#61渲染变量"></a> 6.1渲染变量</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% for k,v in user_dict.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v[&#x27;name&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.get(&#x27;name&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/detail/&#123;&#123;k&#125;&#125;&quot;</span>&gt;</span>查看详细<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="62变量的循环"><a class="markdownIt-Anchor" href="#62变量的循环"></a> 6.2变量的循环</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% for k,v in user_dict.items() %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;k&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v[&#x27;name&#x27;]&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.get(&#x27;name&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/detail/&#123;&#123;k&#125;&#125;&quot;</span>&gt;</span>查看详细<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="63逻辑判断"><a class="markdownIt-Anchor" href="#63逻辑判断"></a> 6.3逻辑判断</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        &#123;% if name %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比django中多可以加括号，执行函数，传参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,Markup,jsonify,make_response</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Markup(<span class="string">&quot;&lt;input type=&#x27;text&#x27; value=&#x27;%s&#x27; /&gt;&quot;</span> %(arg,))</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,ff = func1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &#123;&#123;ff(&#x27;六五&#x27;)&#125;&#125;</span><br><span class="line">&#123;&#123;ff(&#x27;六五&#x27;)|safe&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>1.Markup等价django的mark_safe ,</p><p>2.extends,include一模一样</p><h2 id="7请求响应"><a class="markdownIt-Anchor" href="#7请求响应"></a> 7.请求响应</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login.html&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 请求相关信息</span></span><br><span class="line">    <span class="comment"># request.method  提交的方法</span></span><br><span class="line">    <span class="comment"># request.args  get请求提及的数据</span></span><br><span class="line">    <span class="comment"># request.form   post请求提交的数据</span></span><br><span class="line">    <span class="comment"># request.values  post和get提交的数据总和</span></span><br><span class="line">    <span class="comment"># request.cookies  客户端所带的cookie</span></span><br><span class="line">    <span class="comment"># request.headers  请求头</span></span><br><span class="line">    <span class="comment"># request.path     不带域名，请求路径</span></span><br><span class="line">    <span class="comment"># request.full_path  不带域名，带参数的请求路径</span></span><br><span class="line">    <span class="comment"># request.script_root  </span></span><br><span class="line">    <span class="comment"># request.url           带域名带参数的请求路径</span></span><br><span class="line">    <span class="comment"># request.base_url带域名请求路径</span></span><br><span class="line">    <span class="comment"># request.url_root      域名</span></span><br><span class="line">    <span class="comment"># request.host_url域名</span></span><br><span class="line">    <span class="comment"># request.host127.0.0.1:500</span></span><br><span class="line">    <span class="comment"># request.files</span></span><br><span class="line">    <span class="comment"># obj = request.files[&#x27;the_file_name&#x27;]</span></span><br><span class="line">    <span class="comment"># obj.save(&#x27;/var/www/uploads/&#x27; + secure_filename(f.filename))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 响应相关信息</span></span><br><span class="line">    <span class="comment"># return &quot;字符串&quot;</span></span><br><span class="line">    <span class="comment"># return render_template(&#x27;html模板路径&#x27;,**&#123;&#125;)</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;/index.html&#x27;)</span></span><br><span class="line">    <span class="comment">#return jsonify(&#123;&#x27;k1&#x27;:&#x27;v1&#x27;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># response = make_response(render_template(&#x27;index.html&#x27;))</span></span><br><span class="line">    <span class="comment"># response是flask.wrappers.Response类型</span></span><br><span class="line">    <span class="comment"># response.delete_cookie(&#x27;key&#x27;)</span></span><br><span class="line">    <span class="comment"># response.set_cookie(&#x27;key&#x27;, &#x27;value&#x27;)</span></span><br><span class="line">    <span class="comment"># response.headers[&#x27;X-Something&#x27;] = &#x27;A value&#x27;</span></span><br><span class="line">    <span class="comment"># return response</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;内容&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="8session"><a class="markdownIt-Anchor" href="#8session"></a> 8.session</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cookie:存放在客户端的键值对</span><br><span class="line">session：存放在客户端的键值对</span><br><span class="line">token:存放在客户端，通过算法来校验</span><br></pre></td></tr></table></figure><p>在使用session之前必须现在设置一下密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.secret_key=<span class="string">&quot;asdas&quot;</span> <span class="comment">#值随便</span></span><br></pre></td></tr></table></figure><p>除请求对象之外，还有一个 session 对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对 Cookies 进行密钥签名要使用会话，你需要设置一个密钥。 (app.session_interface对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">设置：session[<span class="string">&#x27;username&#x27;</span>] ＝ <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line"><span class="comment">#在django中发什么三件事，1，生成一个随机的字符串 2 往数据库存 3 写入cookie返回浏览器</span></span><br><span class="line"><span class="comment">#在flask中他没有数据库，但session是怎样实现的？</span></span><br><span class="line"><span class="comment"># 生成一个密钥写入这个cookie,然后下次请求的时候，通过这个cookie解密，然后赋值给session</span></span><br><span class="line">    <span class="comment">#我们通过app.session_interface来查看</span></span><br><span class="line">  </span><br><span class="line">删除：session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h4 id="appsession_interface中save_session的参数设置cookie的参数"><a class="markdownIt-Anchor" href="#appsession_interface中save_session的参数设置cookie的参数"></a> app.session_interface中save_session的参数（设置cookie的参数）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key,             <span class="comment"># 键</span></span><br><span class="line">value=<span class="string">&#x27;&#x27;</span>,        <span class="comment"># 值</span></span><br><span class="line">max_age=<span class="literal">None</span>,    <span class="comment"># 超时时间 cookie需要延续的时间（以秒为单位）如果参数是\ None`` ，这个cookie会延续到浏览器关闭为止</span></span><br><span class="line">expires=<span class="literal">None</span>,    <span class="comment"># 超时时间(IE requires expires, so set it if hasn&#x27;t been already.)</span></span><br><span class="line">path=<span class="string">&#x27;/&#x27;</span>,        <span class="comment"># Cookie生效的路径，/ 表示根路径，特殊的：根路径的cookie可以被任何url的页面访问，浏览器只会把cookie回传给带有该路径的页面，这样可以避免将cookie传给站点中的其他的应用。</span></span><br><span class="line">domain=<span class="literal">None</span>,     <span class="comment"># Cookie生效的域名 你可用这个参数来构造一个跨站cookie。如， domain=&quot;.example.com&quot;所构造的cookie对下面这些站点都是可读的：www.example.com 、 www2.example.com 和an.other.sub.domain.example.com 。如果该参数设置为 None ，cookie只能由设置它的站点读取</span></span><br><span class="line">secure=<span class="literal">False</span>,    <span class="comment"># 浏览器将通过HTTPS来回传cookie</span></span><br><span class="line">httponly=<span class="literal">False</span>   <span class="comment"># 只能http协议传输，无法被JavaScript获取（不是绝对，底层抓包可以获取到也可以被覆盖）</span></span><br></pre></td></tr></table></figure><h4 id="session源码的执行流程"><a class="markdownIt-Anchor" href="#session源码的执行流程"></a> session源码的执行流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-save_seesion</span><br><span class="line">-响应的时候，把session中的值加密序列化放大到了cookie中，返回到浏览器中</span><br><span class="line">-open_session</span><br><span class="line">-请求来了，从cookie中取出值，反解，生成session对象，以后再视图函数中直接用sessoin就可以了。</span><br></pre></td></tr></table></figure><h2 id="9闪现message"><a class="markdownIt-Anchor" href="#9闪现message"></a> 9.闪现（message）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-设置:flash(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">-取值：get_flashed_message()</span><br><span class="line">-</span><br><span class="line">-假设在a页面操作出错，跳转到b页面，在b页面显示a页面的错误信息</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,flash,get_flashed_messages,request,redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;asdfasdf&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 从某个地方获取设置过的所有值，并清除。</span></span><br><span class="line">    val = request.args.get(<span class="string">&#x27;v&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">&#x27;oldboy&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">    flash(<span class="string">&#x27;超时错误&#x27;</span>,category=<span class="string">&quot;x1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ssdsdsdfsd&quot;</span></span><br><span class="line">    <span class="comment"># return redirect(&#x27;/error&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/error&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    展示错误信息</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    如果get_flashed_messages(with_category=True)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = get_flashed_messages(category_filter=[<span class="string">&#x27;x1&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        msg = data[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        msg = <span class="string">&quot;...&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;错误信息：%s&quot;</span> %(msg,)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="10请求扩展"><a class="markdownIt-Anchor" href="#10请求扩展"></a> 10.请求扩展</h2><h3 id="1-before_request"><a class="markdownIt-Anchor" href="#1-before_request"></a> 1 before_request</h3><p>类比django中间件中的process_request，在请求收到之前绑定一个函数做一些事情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于它做用户登录认证</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.path == <span class="string">&#x27;/login&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    user = session.get(<span class="string">&#x27;user_info&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-after_request"><a class="markdownIt-Anchor" href="#2-after_request"></a> 2 after_request</h3><p>类比django中间件中的process_response，每一个请求之后绑定一个函数，如果请求没有异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response1</span>(<span class="params">response</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;process_response1 走了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="3-before_first_request"><a class="markdownIt-Anchor" href="#3-before_first_request"></a> 3 before_first_request</h3><p>第一次请求时,跟浏览器无关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="4-teardown_request"><a class="markdownIt-Anchor" href="#4-teardown_request"></a> 4 teardown_request</h3><p>每一个请求之后绑定一个函数，即使遇到了异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_request </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ter</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="5-errorhandler"><a class="markdownIt-Anchor" href="#5-errorhandler"></a> 5 errorhandler</h3><p>路径不存在时404，服务器内部错误500</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_404</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;404错误了&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-template_global"><a class="markdownIt-Anchor" href="#6-template_global"></a> 6 template_global</h3><p>标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"><span class="comment">#&#123;&#123;sb(1,2)&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-template_filter"><a class="markdownIt-Anchor" href="#7-template_filter"></a> 7 template_filter</h3><p>过滤器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>(<span class="params">a1, a2, a3</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"><span class="comment">#&#123;&#123; 1|db(2,3)&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>1 重点掌握before_request和after_request，</p><p>2 注意有多个的情况，执行顺序</p><p>3 before_request请求拦截后（也就是有return值），response所有都执行</p><h2 id="11-中间件了解"><a class="markdownIt-Anchor" href="#11-中间件了解"></a> 11 中间件（了解）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"><span class="comment"># 模拟中间件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Md</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,old_wsgi_app</span>):</span></span><br><span class="line">        self.old_wsgi_app = old_wsgi_app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self,  environ, start_response</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;开始之前&#x27;</span>)</span><br><span class="line">        ret = self.old_wsgi_app(environ, start_response)</span><br><span class="line">        print(<span class="string">&#x27;结束之后&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#1我们发现当执行app.run方法的时候，最终执行run_simple，最后执行app(),也就是在执行app.__call__方法</span></span><br><span class="line">    <span class="comment">#2 在__call__里面，执行的是self.wsgi_app().那我们希望在执行他本身的wsgi之前做点事情。</span></span><br><span class="line">    <span class="comment">#3 所以我们先用Md类中__init__，保存之前的wsgi,然后我们用将app.wsgi转化成Md的对象。</span></span><br><span class="line">    <span class="comment">#4 那执行新的的app.wsgi_app，就是执行Md的__call__方法。</span></span><br><span class="line">    <span class="comment">#把原来的wsgi_app替换为自定义的，</span></span><br><span class="line">    </span><br><span class="line">    app.wsgi_app = Md(app.wsgi_app)</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>请求所有的流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ctx = self.request_context(environ)</span><br><span class="line">error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ctx.push()</span><br><span class="line">            <span class="comment">#根据路径去执行视图函数，视图类</span></span><br><span class="line">            response = self.full_dispatch_request()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            error = e</span><br><span class="line">            response = self.handle_exception(e)</span><br><span class="line">    <span class="keyword">except</span>:  <span class="comment"># noqa: B001</span></span><br><span class="line">        error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment">#不管出不出异常，都会走这里</span></span><br><span class="line">        <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">            error = <span class="literal">None</span></span><br><span class="line">            ctx.auto_pop(error)</span><br></pre></td></tr></table></figure><h2 id="12蓝图"><a class="markdownIt-Anchor" href="#12蓝图"></a> 12.蓝图</h2><p>对程序进行目录结构划分</p><h3 id="不使用蓝图自己分文件"><a class="markdownIt-Anchor" href="#不使用蓝图自己分文件"></a> 不使用蓝图，自己分文件</h3><p>目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-templates</span><br><span class="line">-views</span><br><span class="line">-__init__.py</span><br><span class="line">    -user.py</span><br><span class="line">    -order.py</span><br><span class="line">-app.py</span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><a href="http://init.py">init.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#不导入这个不行</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> account</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> order</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> user</span><br></pre></td></tr></table></figure><p><a href="http://user.py">user.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="http://order.py">order.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/order&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;order&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用蓝图之中小型系统"><a class="markdownIt-Anchor" href="#使用蓝图之中小型系统"></a> 使用蓝图之中小型系统</h3><p>详见代码：pro_flask_简单应用程序目录示例.zip</p><p>目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-flask_pro</span><br><span class="line">-flask_test</span><br><span class="line">    -__init__.py</span><br><span class="line">    -static</span><br><span class="line">        -templates</span><br><span class="line">        -views</span><br><span class="line">        -order.py</span><br><span class="line">            -user.py</span><br><span class="line">     -manage.py </span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>_<em>init</em>.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span>  Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="keyword">from</span> flask_test.views <span class="keyword">import</span> user</span><br><span class="line"><span class="keyword">from</span> flask_test.views <span class="keyword">import</span> order</span><br><span class="line">app.register_blueprint(user.us)</span><br><span class="line">app.register_blueprint(order.<span class="built_in">ord</span>)</span><br></pre></td></tr></table></figure><p><a href="http://manage.py">manage.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_test <span class="keyword">import</span>  app</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">8008</span>)</span><br></pre></td></tr></table></figure><p><a href="http://user.py">user.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">us=Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@us.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="http://order.py">order.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"><span class="built_in">ord</span>=Blueprint(<span class="string">&#x27;order&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ord.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;order test&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="使用蓝图之大型系统"><a class="markdownIt-Anchor" href="#使用蓝图之大型系统"></a> 使用蓝图之大型系统</h3><p>详见代码：pro_flask_大型应用目录示例.zip</p><p>总结：</p><p>1 xxx = Blueprint(‘account’, <strong>name</strong>,url_prefix=’/xxx’) ：蓝图URL前缀，表示url的前缀，在该蓝图下所有url都加前缀</p><p>2 xxx = Blueprint(‘account’, name,url_prefix=’/xxx’,template_folder=‘tpls’)：给当前蓝图单独使用templates，向上查找，当前找不到，会找总templates</p><p>3 蓝图的befort_request，对当前蓝图有效</p><p>4 大型项目，可以模拟出类似于django中app的概念</p><h2 id="13请求上下文源码分析"><a class="markdownIt-Anchor" href="#13请求上下文源码分析"></a> 13.请求上下文源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一阶段：将ctx(request,session)放到Local对象上</span><br><span class="line">   </span><br><span class="line">第二阶段：视图函数导入：request/session </span><br><span class="line">request.method</span><br><span class="line">-LocalProxy对象.method,执行<span class="built_in">getattr</span>方法，<span class="built_in">getattr</span>(self._get_current_object(), name)</span><br><span class="line">-self._get_current_object()返回<span class="keyword">return</span> self.__local()，self.__local()，在LocakProxy实例化的时候,<span class="built_in">object</span>.__setattr__(self, <span class="string">&#x27;_LocalProxy__local&#x27;</span>, local),此处local就是：partial(_lookup_req_object, <span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"></span><br><span class="line">-<span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span>(<span class="params">name</span>):</span></span><br><span class="line">top = _request_ctx_stack.top <span class="comment">#_request_ctx_stack 就是LocalStack()对象，top方法把ctx取出来</span></span><br><span class="line"><span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">getattr</span>(top, name)<span class="comment">#获取ctx中的request或session对象</span></span><br><span class="line"></span><br><span class="line">第三阶段：请求处理完毕</span><br><span class="line">- 获取session并保存到cookie</span><br><span class="line">- 将ctx删除</span><br></pre></td></tr></table></figure><p>程序运行，两个LocalStack()对象，一个里面放request和session，另一个放g和<code>current_app</code></p><h2 id="14g对象"><a class="markdownIt-Anchor" href="#14g对象"></a> 14.g对象</h2><p>专门用来存储用户信息的g对象，g的全称的为global</p><p>g对象在一次请求中的所有的代码的地方，都是可以使用的</p><h3 id="g对象和session的区别"><a class="markdownIt-Anchor" href="#g对象和session的区别"></a> g对象和session的区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session对象是可以跨request的，只要session还未失效，不同的request的请求会获取到同一个session，但是g对象不是，g对象不需要管过期时间，请求一次就g对象就改变了一次，或者重新赋值了一次</span><br></pre></td></tr></table></figure><h2 id="15flask-session"><a class="markdownIt-Anchor" href="#15flask-session"></a> 15.flask-session</h2><p>作用：将默认保存的签名cookie中的值 保存到 redis/memcached/file/Mongodb/SQLAlchemy</p><p>安装：pip3 install flask-session</p><p>使用1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,session</span><br><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> RedisSessionInterface</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">conn=redis.Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">6379</span>)</span><br><span class="line"><span class="comment">#use_signer是否对key签名</span></span><br><span class="line">app.session_interface=RedisSessionInterface(conn,key_prefix=<span class="string">&#x27;lqz&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;name&#x27;</span>]=<span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>使用2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">from</span> flask.ext.session <span class="keyword">import</span> Session</span><br><span class="line">app.config[<span class="string">&#x27;SESSION_TYPE&#x27;</span>] = <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SESSION_REDIS&#x27;</span>] = Redis(host=<span class="string">&#x27;192.168.0.94&#x27;</span>,port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure><p>问题：设置cookie时，如何设定关闭浏览器则cookie失效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response.set_cookie(<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,exipre=<span class="literal">None</span>)<span class="comment">#这样设置即可</span></span><br><span class="line"><span class="comment">#在session中设置</span></span><br><span class="line">app.session_interface=RedisSessionInterface(conn,key_prefix=<span class="string">&#x27;lqz&#x27;</span>,permanent=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#一般不用，我们一般都设置超时时间，多长时间后失效</span></span><br></pre></td></tr></table></figure><p>问题：cookie默认超时时间是多少？如何设置超时时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#源码expires = self.get_expiration_time(app, session)</span></span><br><span class="line"><span class="string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>:           timedelta(days=<span class="number">31</span>),<span class="comment">#这个配置文件控制</span></span><br></pre></td></tr></table></figure><h2 id="16数据库连接池"><a class="markdownIt-Anchor" href="#16数据库连接池"></a> 16.数据库连接池</h2><h3 id="pymsql链接数据库"><a class="markdownIt-Anchor" href="#pymsql链接数据库"></a> pymsql链接数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;123456&#x27;</span>, db=<span class="string">&#x27;s8day127db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"><span class="comment"># cursor.execute(&quot;select id,name from users where name=%s and pwd=%s&quot;,[&#x27;lqz&#x27;,&#x27;123&#x27;,])</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select id,name from users where name=%(user)s and pwd=%(pwd)s&quot;</span>,&#123;<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;lqz&#x27;</span>,<span class="string">&#x27;pwd&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;)</span><br><span class="line">obj = cursor.fetchone()</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure><h3 id="数据库连接池版"><a class="markdownIt-Anchor" href="#数据库连接池版"></a> 数据库连接池版</h3><p><a href="http://setting.py">setting.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB, SharedDBConnection</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line">    SECRET_KEY = <span class="string">&quot;umsuldfsdflskjdf&quot;</span></span><br><span class="line">    PERMANENT_SESSION_LIFETIME = timedelta(minutes=<span class="number">20</span>)</span><br><span class="line">    SESSION_REFRESH_EACH_REQUEST= <span class="literal">True</span></span><br><span class="line">    SESSION_TYPE = <span class="string">&quot;redis&quot;</span></span><br><span class="line">    PYMYSQL_POOL = PooledDB(</span><br><span class="line">        creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">        maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">        mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class="line">        maxcached=<span class="number">5</span>,  <span class="comment"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class="line">        maxshared=<span class="number">3</span>,</span><br><span class="line">        <span class="comment"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class="line">        blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">        maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">        setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class="line">        ping=<span class="number">0</span>,</span><br><span class="line">        <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">        host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        port=<span class="number">3306</span>,</span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password=<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        database=<span class="string">&#x27;s8day127db&#x27;</span>,</span><br><span class="line">        charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    SESSION_REDIS = Redis(host=<span class="string">&#x27;192.168.0.94&#x27;</span>, port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    SESSION_REDIS = Redis(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="string">&#x27;6379&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestingConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>utils/sql.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Config</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLHelper</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span>(<span class="params">cursor</span>):</span></span><br><span class="line">        POOL = Config.PYMYSQL_POOL</span><br><span class="line">        conn = POOL.connection()</span><br><span class="line">        cursor = conn.cursor(cursor=cursor)</span><br><span class="line">        <span class="keyword">return</span> conn,cursor</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">conn,cursor</span>):</span></span><br><span class="line">        conn.commit()</span><br><span class="line">        cursor.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_one</span>(<span class="params">cls,sql,args,cursor =pymysql.cursors.DictCursor</span>):</span></span><br><span class="line">        conn,cursor = cls.<span class="built_in">open</span>(cursor)</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        obj = cursor.fetchone()</span><br><span class="line">        cls.close(conn,cursor)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_all</span>(<span class="params">cls,sql, args,cursor =pymysql.cursors.DictCursor</span>):</span></span><br><span class="line">        conn, cursor = cls.<span class="built_in">open</span>(cursor)</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        obj = cursor.fetchall()</span><br><span class="line">        cls.close(conn, cursor)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj = SQLHelper.fetch_one(<span class="string">&quot;select id,name from users where name=%(user)s and pwd=%(pwd)s&quot;</span>, form.data)</span><br></pre></td></tr></table></figure><h2 id="17wtforms"><a class="markdownIt-Anchor" href="#17wtforms"></a> 17.wtforms</h2><p>安装:pip3 install wtforms</p><h3 id="使用1"><a class="markdownIt-Anchor" href="#使用1"></a> 使用1：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> simple</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> validators</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> widgets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">Form</span>):</span></span><br><span class="line">    <span class="comment"># 字段（内部包含正则表达式）</span></span><br><span class="line">    name = simple.StringField(</span><br><span class="line">        label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;用户名不能为空.&#x27;</span>),</span><br><span class="line">            validators.Length(<span class="built_in">min</span>=<span class="number">6</span>, <span class="built_in">max</span>=<span class="number">18</span>, message=<span class="string">&#x27;用户名长度必须大于%(min)d且小于%(max)d&#x27;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.TextInput(), <span class="comment"># 页面上显示的插件</span></span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 字段（内部包含正则表达式）</span></span><br><span class="line">    pwd = simple.PasswordField(</span><br><span class="line">        label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;密码不能为空.&#x27;</span>),</span><br><span class="line">            validators.Length(<span class="built_in">min</span>=<span class="number">8</span>, message=<span class="string">&#x27;用户名长度必须大于%(min)d&#x27;</span>),</span><br><span class="line">            validators.Regexp(regex=<span class="string">&quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&amp;])[A-Za-z\d$@$!%*?&amp;]&#123;8,&#125;&quot;</span>,</span><br><span class="line">                              message=<span class="string">&#x27;密码至少8个字符，至少1个大写字母，1个小写字母，1个数字和1个特殊字符&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        form = LoginForm()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = LoginForm(formdata=request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            print(<span class="string">&#x27;用户提交数据通过格式验证，提交的值为：&#x27;</span>, form.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, form=form)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;form.name.label&#125;&#125; &#123;&#123;form.name&#125;&#125; &#123;&#123;form.name.errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;form.pwd.label&#125;&#125; &#123;&#123;form.pwd&#125;&#125; &#123;&#123;form.pwd.errors[0] &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用2"><a class="markdownIt-Anchor" href="#使用2"></a> 使用2：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> core</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> html5</span><br><span class="line"><span class="keyword">from</span> wtforms.fields <span class="keyword">import</span> simple</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> validators</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> widgets</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span>(<span class="params">Form</span>):</span></span><br><span class="line">    name = simple.StringField(</span><br><span class="line">        label=<span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired()</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.TextInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;,</span><br><span class="line">        default=<span class="string">&#x27;alex&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd = simple.PasswordField(</span><br><span class="line">        label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;密码不能为空.&#x27;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd_confirm = simple.PasswordField(</span><br><span class="line">        label=<span class="string">&#x27;重复密码&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;重复密码不能为空.&#x27;</span>),</span><br><span class="line">            validators.EqualTo(<span class="string">&#x27;pwd&#x27;</span>, message=<span class="string">&quot;两次密码输入不一致&quot;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    email = html5.EmailField(</span><br><span class="line">        label=<span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">&#x27;邮箱不能为空.&#x27;</span>),</span><br><span class="line">            validators.Email(message=<span class="string">&#x27;邮箱格式错误&#x27;</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.TextInput(input_type=<span class="string">&#x27;email&#x27;</span>),</span><br><span class="line">        render_kw=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;form-control&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    gender = core.RadioField(</span><br><span class="line">        label=<span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        coerce=<span class="built_in">int</span> <span class="comment"># “1” “2”</span></span><br><span class="line">     )</span><br><span class="line">    city = core.SelectField(</span><br><span class="line">        label=<span class="string">&#x27;城市&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="string">&#x27;bj&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">            (<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    hobby = core.SelectMultipleField(</span><br><span class="line">        label=<span class="string">&#x27;爱好&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="number">1</span>, <span class="string">&#x27;篮球&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;足球&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        coerce=<span class="built_in">int</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    favor = core.SelectMultipleField(</span><br><span class="line">        label=<span class="string">&#x27;喜好&#x27;</span>,</span><br><span class="line">        choices=(</span><br><span class="line">            (<span class="number">1</span>, <span class="string">&#x27;篮球&#x27;</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">&#x27;足球&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        widget=widgets.ListWidget(prefix_label=<span class="literal">False</span>),</span><br><span class="line">        option_widget=widgets.CheckboxInput(),</span><br><span class="line">        coerce=<span class="built_in">int</span>,</span><br><span class="line">        default=[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(RegisterForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.favor.choices = ((<span class="number">1</span>, <span class="string">&#x27;篮球&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;足球&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;羽毛球&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_pwd_confirm</span>(<span class="params">self, field</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        自定义pwd_confirm字段规则，例：与pwd字段是否一致</span></span><br><span class="line"><span class="string">        :param field:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 最开始初始化时，self.data中已经有所有的值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> field.data != self.data[<span class="string">&#x27;pwd&#x27;</span>]:</span><br><span class="line">            <span class="comment"># raise validators.ValidationError(&quot;密码不一致&quot;) # 继续后续验证</span></span><br><span class="line">            <span class="keyword">raise</span> validators.StopValidation(<span class="string">&quot;密码不一致&quot;</span>)  <span class="comment"># 不再继续后续验证</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        form = RegisterForm(data=&#123;<span class="string">&#x27;gender&#x27;</span>: <span class="number">2</span>,<span class="string">&#x27;hobby&#x27;</span>:[<span class="number">1</span>,]&#125;) <span class="comment"># initial</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = RegisterForm(formdata=request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            print(<span class="string">&#x27;用户提交数据通过格式验证，提交的值为：&#x27;</span>, form.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, form=form)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;用户注册&lt;/h1&gt;</span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span> novalidate style=<span class="string">&quot;padding:0  50px&quot;</span>&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> field <span class="keyword">in</span> form %&#125;</span><br><span class="line">    &lt;p&gt;&#123;&#123;field.label&#125;&#125;: &#123;&#123;field&#125;&#125; &#123;&#123;field.errors[0] &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="18信号"><a class="markdownIt-Anchor" href="#18信号"></a> 18.信号</h2><p>Flask框架中的信号基于blinker，其主要就是让开发者可是在flask请求过程中定制一些用户行为</p><p>安装：<code>pip3 install blinker</code></p><p>内置信号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">request_started = _signals.signal(<span class="string">&#x27;request-started&#x27;</span>)                <span class="comment"># 请求到来前执行</span></span><br><span class="line">request_finished = _signals.signal(<span class="string">&#x27;request-finished&#x27;</span>)              <span class="comment"># 请求结束后执行</span></span><br><span class="line"> </span><br><span class="line">before_render_template = _signals.signal(<span class="string">&#x27;before-render-template&#x27;</span>)  <span class="comment"># 模板渲染前执行</span></span><br><span class="line">template_rendered = _signals.signal(<span class="string">&#x27;template-rendered&#x27;</span>)            <span class="comment"># 模板渲染后执行</span></span><br><span class="line"> </span><br><span class="line">got_request_exception = _signals.signal(<span class="string">&#x27;got-request-exception&#x27;</span>)    <span class="comment"># 请求执行出现异常时执行</span></span><br><span class="line"> </span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">&#x27;request-tearing-down&#x27;</span>)      <span class="comment"># 请求执行完毕后自动执行（无论成功与否）</span></span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">&#x27;appcontext-tearing-down&#x27;</span>)<span class="comment"># 应用上下文执行完毕后自动执行（无论成功与否）</span></span><br><span class="line"> </span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">&#x27;appcontext-pushed&#x27;</span>)            <span class="comment"># 应用上下文push时执行</span></span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">&#x27;appcontext-popped&#x27;</span>)            <span class="comment"># 应用上下文pop时执行</span></span><br><span class="line">message_flashed = _signals.signal(<span class="string">&#x27;message-flashed&#x27;</span>)                <span class="comment"># 调用flask在其中添加数据时，自动触发</span></span><br></pre></td></tr></table></figure><p>使用信号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,signals,render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 往信号中注册函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;触发型号&#x27;</span>,args,kwargs)</span><br><span class="line">signals.request_started.connect(func)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发信号： signals.request_started.send()</span></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first1</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first2</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first3</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;视图&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.wsgi_app</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>一个流程中的信号触发点（了解）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a. before_first_request</span><br><span class="line">b. 触发 request_started 信号</span><br><span class="line">c. before_request</span><br><span class="line">d. 模板渲染</span><br><span class="line">渲染前的信号 before_render_template.send(app, template=template, context=context)</span><br><span class="line">rv = template.render(context) <span class="comment"># 模板渲染</span></span><br><span class="line">渲染后的信号 template_rendered.send(app, template=template, context=context)</span><br><span class="line">e. after_request</span><br><span class="line">f. session.save_session()</span><br><span class="line">g. 触发 request_finished信号</span><br><span class="line">如果上述过程出错：</span><br><span class="line">触发错误处理信号 got_request_exception.send(self, exception=e)</span><br><span class="line"></span><br><span class="line">h. 触发信号 request_tearing_down</span><br></pre></td></tr></table></figure><p>自定义信号(了解)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app, flash, render_template</span><br><span class="line"><span class="keyword">from</span> flask.signals <span class="keyword">import</span> _signals</span><br><span class="line">app = Flask(import_name=__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义信号</span></span><br><span class="line">xxxxx = _signals.signal(<span class="string">&#x27;xxxxx&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">sender, *args, **kwargs</span>):</span></span><br><span class="line">    print(sender)</span><br><span class="line"><span class="comment"># 自定义信号中注册函数</span></span><br><span class="line">xxxxx.connect(func)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/x&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 触发信号</span></span><br><span class="line">    xxxxx.send(<span class="string">&#x27;123123&#x27;</span>, k1=<span class="string">&#x27;v1&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Index&#x27;</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="19多app应用"><a class="markdownIt-Anchor" href="#19多app应用"></a> 19.多app应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.wsgi <span class="keyword">import</span> DispatcherMiddleware</span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app</span><br><span class="line">app1 = Flask(<span class="string">&#x27;app01&#x27;</span>)</span><br><span class="line">app2 = Flask(<span class="string">&#x27;app02&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app1.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;app01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app2.route(<span class="params"><span class="string">&#x27;/index2&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index2</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;app2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://www.oldboyedu.com/index</span></span><br><span class="line"><span class="comment"># http://www.oldboyedu.com/sec/index2</span></span><br><span class="line">dm = DispatcherMiddleware(app1, &#123;</span><br><span class="line">    <span class="string">&#x27;/sec&#x27;</span>: app2,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    run_simple(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">5000</span>, dm)</span><br></pre></td></tr></table></figure><h2 id="20flask-script"><a class="markdownIt-Anchor" href="#20flask-script"></a> 20.flask-script</h2><p>用于实现类似于django中 python3 <a href="http://manage.py">manage.py</a> runserver …类似的命令</p><p>安装：pip3 install flask-script</p><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">manager=Manager(app)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()</span><br><span class="line"><span class="comment">#以后在执行，直接：python3 manage.py runserver</span></span><br><span class="line"><span class="comment">#python3 manage.py runserver --help</span></span><br></pre></td></tr></table></figure><h3 id="自定制命令"><a class="markdownIt-Anchor" href="#自定制命令"></a> 自定制命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom</span>(<span class="params">arg</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义命令</span></span><br><span class="line"><span class="string">    python manage.py custom 123</span></span><br><span class="line"><span class="string">    :param arg:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.option(<span class="params"><span class="string">&#x27;-n&#x27;</span>, <span class="string">&#x27;--name&#x27;</span>, dest=<span class="string">&#x27;name&#x27;</span></span>)</span></span><br><span class="line"><span class="comment">#@manager.option(&#x27;-u&#x27;, &#x27;--url&#x27;, dest=&#x27;url&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span>(<span class="params">name, url</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义命令（-n也可以写成--name）</span></span><br><span class="line"><span class="string">    执行： python manage.py  cmd -n lqz -u http://www.oldboyedu.com</span></span><br><span class="line"><span class="string">    执行： python manage.py  cmd --name lqz --url http://www.oldboyedu.com</span></span><br><span class="line"><span class="string">    :param name:</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(name, url)</span><br><span class="line"><span class="comment">#有什么用？</span></span><br><span class="line"><span class="comment">#把excel的数据导入数据库，定制个命令，去执行</span></span><br></pre></td></tr></table></figure><h2 id="21flask-admin"><a class="markdownIt-Anchor" href="#21flask-admin"></a> 21flask-admin</h2><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install flask_admin</span><br></pre></td></tr></table></figure><h4 id="简单使用"><a class="markdownIt-Anchor" href="#简单使用"></a> 简单使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_admin <span class="keyword">import</span> Admin</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">#将app注册到adminzhong </span></span><br><span class="line">admin = Admin(app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;mian&quot;</span>:</span><br><span class="line"></span><br><span class="line">app.run()</span><br><span class="line"><span class="comment">#访问</span></span><br><span class="line"><span class="comment">#127.0.0.1:5000/admin端口，会得到一个空白的页面</span></span><br></pre></td></tr></table></figure><h4 id="将表模型注册到admin中"><a class="markdownIt-Anchor" href="#将表模型注册到admin中"></a> 将表模型注册到admin中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在将表注册之前应该对app进行配置</span></span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&quot;mysql+pymysql://root:@127.0.0.1:3307/py9api?charset=utf8mb4&quot;</span></span><br><span class="line">SQLALCHEMY_POOL_SIZE = <span class="number">5</span></span><br><span class="line">SQLALCHEMY_POOL_TIMEOUT = <span class="number">30</span></span><br><span class="line">SQLALCHEMY_POOL_RECYCLE = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入models文件的中的表模型</span></span><br><span class="line"><span class="keyword">from</span> flask_admin.contrib.sqla <span class="keyword">import</span> ModelView</span><br><span class="line"><span class="keyword">from</span> api.models <span class="keyword">import</span> Stock,Product,Images,Category,Wxuser,Banner</span><br><span class="line"></span><br><span class="line">admin.add_view(ModelView(Stock, db.session))</span><br><span class="line">admin.add_view(ModelView(Product, db.session))</span><br><span class="line"></span><br><span class="line">admin.add_view(ModelView(Category, db.session))</span><br></pre></td></tr></table></figure><h4 id="如果有个字段是图片指端"><a class="markdownIt-Anchor" href="#如果有个字段是图片指端"></a> 如果有个字段是图片指端</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置上传文件的路径</span></span><br><span class="line"><span class="comment">#导入from flask_admin.contrib.fileadmin import FileAdmin</span></span><br><span class="line"><span class="keyword">from</span> flask_admin.contrib.fileadmin <span class="keyword">import</span> FileAdmin,form</span><br><span class="line">file_path = op.join(op.dirname(__file__), <span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">admin = Admin(app)</span><br><span class="line">admin.add_view(FileAdmin(file_path, <span class="string">&#x27;/static/&#x27;</span>, name=<span class="string">&#x27;文件&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果有个字段要是上传文件重写该方法的modleView类，假设imgae_url是文件图片的字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImagesView</span>(<span class="params">ModelView</span>):</span></span><br><span class="line"></span><br><span class="line">    form_extra_fields = &#123;</span><br><span class="line">        <span class="string">&#x27;image_url&#x27;</span>: form.ImageUploadField(<span class="string">&#x27;Image&#x27;</span>,</span><br><span class="line">                                          base_path=file_path,</span><br><span class="line">                                          relative_path=<span class="string">&#x27;uploadFile/&#x27;</span></span><br><span class="line">                                          )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">admin.add_view(ImagesView(Images, db.session))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0flask简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0flask简介&quot;&gt;&lt;/a&gt; 0.Flask简介&lt;/h2&gt;
&lt;p&gt;Flask是一个基于Python开发并且依赖jinja2模板和Werkzeug WSGI服务的一个微型框架</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-5 数据库连接池</title>
    <link href="http://example.com/2021/01/18/flask/8-5%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://example.com/2021/01/18/flask/8-5%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2021-01-18T11:39:27.117Z</published>
    <updated>2021-01-18T14:10:48.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-如何在python中操作数据库"><a class="markdownIt-Anchor" href="#01-如何在python中操作数据库"></a> 01 如何在python中操作数据库</h2><p>在后端开发中免不掉与数据库打交道，无非是使用<code>orm</code>或者原生<code>sql</code>来操作数据库。</p><p>在python中通过原生sql操作数据库，主流就两种。</p><ul><li>使用pymysql模块：<code>pymysql</code>支持<code>python2.x</code>和<code>python3.x</code>的版本</li><li>使用mysqldb模块：<code>mysqldb</code>仅支持<code>python2.x</code>的版本</li></ul><p>orm的使用以flask和django为例。</p><ul><li>flask使用的orm是基于<code>SQLAlchemy</code>（SQLAlchemy本就是orm），flask团队并在<code>SQLAlchemy</code>基础之上又封装了一个<code>Flask-SQLchemy</code>并予以应用 。</li><li>django使用的orm是django自带的orm。</li></ul><p>orm的操作数据库的方式我们已经熟知了，这里我们聊一聊如何在web中使用原生sql操作数据库，以及会出现的问题。</p><h2 id="02-在web中使用原生sqlpymysql操作数据库"><a class="markdownIt-Anchor" href="#02-在web中使用原生sqlpymysql操作数据库"></a> 02 在web中使用原生sql(pymysql)操作数据库？</h2><h3 id="21-在web中通过原生sql操作数据库会出现的问题"><a class="markdownIt-Anchor" href="#21-在web中通过原生sql操作数据库会出现的问题"></a> 2.1 在web中通过原生sql操作数据库会出现的问题。</h3><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155710792-29404033..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155710792-29404033..png" alt="1554343834169" /></a></p><h4 id="示例1"><a class="markdownIt-Anchor" href="#示例1"></a> 示例1：</h4><p>把所有的数据库操作全部都放在了视图函数里面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">import</span> pymysql</span><br><span class="line">    CONN = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                           password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">                           database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">                           charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cursor = CONN.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line"></span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>会出现的问题</strong></p><ul><li>很多个用户并发的来请求，一个用户可以理解为一个线程，每个线程都会跟数据库建立连接，数据库承受不了这种量级的连接数。</li></ul><h4 id="示例2"><a class="markdownIt-Anchor" href="#示例2"></a> 示例2</h4><p>为了避免之前每个用户都建立连接，我们把数据库连接放到了全局变量里面，只会建立一次连接，但是依然会出现问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">CONN = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                           password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">                           database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">                           charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    cursor = CONN.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line"></span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>会出现的问题：</strong></p><ul><li>会出现线程安全问题，比如如果第一个用户拿到了连接给关闭了，而第二个用户正在进行查询，第二个用户查询的时候第一个用户把连接断了，会导致第二个用户出现问题。</li><li>假设第一用户查询了一下表1，正准备获取查询的内容，这时第二个人查询了一下表2，由于cursor对象都是同一个，第一个人获取到的查询内容就是表2的内容了，所以也会出现线程安全问题</li></ul><h4 id="示例3"><a class="markdownIt-Anchor" href="#示例3"></a> 示例3</h4><p>为了避免之前的线程不安全，在示例2的基础上加上一把线程锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">CONN = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                           port=<span class="number">3306</span>,</span><br><span class="line">                           user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                           password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">                           database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">                           charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">with</span> threading.Lock():</span><br><span class="line">        cursor = CONN.cursor()</span><br><span class="line">        cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        cursor.close()</span><br><span class="line"></span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>会出现的问题</strong>：</p><ul><li>根据代码可以发现，只是在示例2的基础上加了一把线程锁，确实是保证了线程安全，但是所有关于数据库操作的请求变成了串行，无法实现并发了。</li></ul><h4 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结：</h4><ul><li>如果直接连接坐在视图函数中，会导致每个用户都要创建连接，数据库承受不了这种量级的连接数。</li><li>如果连接数据库的内容做成全局变量的话，无法保证线程安全。</li><li>如果定义全局变量用于连接数据库，并且在线程中操作数据库内容加线程锁头，就会变成串行，无法保证并发</li></ul><p>所以我们既要控制数据库的连接数，又要保证线程安全，又要保证web的并发，这个时候最终的解决方案是数据库连接池。</p><h3 id="21-什么是数据库连接池呢"><a class="markdownIt-Anchor" href="#21-什么是数据库连接池呢"></a> 2.1 什么是数据库连接池呢？</h3><p>数据库连接池概念：数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个，这项技术能明显提高对数据库操作的性能。</p><p><strong>图解</strong>：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155711355-1754252191..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155711355-1754252191..png" alt="1553241307822" /></a></p><p>通俗的讲就是，假设数据库连接池中有5个连接对象，每个用户简单理解为一个线程，比如现在有6个用户同时来访问，6个线程去数据库连接池里面申请数据库的连接对象。前5个线程每个都申请到了连接对象去操作数据库，每个线程使用完了数据库连接对象会归还给数据库连接池，那么第6个线程会等待前5个线程归还连接对象给连接池，再具体一点是：假设第一个线程使用完了连接对象，那么此时6个线程才会结束等待，从而申请到连接对象，以此类推。</p><h3 id="22-python数据库连接池dbutiles"><a class="markdownIt-Anchor" href="#22-python数据库连接池dbutiles"></a> 2.2 Python数据库连接池DBUtiles</h3><p>DBUtils 是Python的一个用于实现数据库连接池的模块。</p><p>首先安装一下DBUtils模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install DBUtils</span><br></pre></td></tr></table></figure><p>DBUtils连接池的两种连接模式：</p><p>**模式一：**为每个线程创建一个连接，线程即使调用了close方法，也不会关闭，只是把连接重新放到连接池，仅供自己的线程再次使用，当线程终止时，连接会自动关闭。（不推荐使用，因为这样需要自己控制线程数量）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PersistentDB <span class="keyword">import</span> PersistentDB</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> local</span><br><span class="line"></span><br><span class="line">POOL = PersistentDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class="line">    ping=<span class="number">0</span>, <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    closeable=<span class="literal">False</span>,</span><br><span class="line">    <span class="comment"># 如果为False时， conn.close() 实际上被忽略，供下次使用，再线程关闭时，才会自动关闭链接。如果为True时， conn.close()则关闭链接，那么再次调用pool.connection时就会报错，因为已经真的关闭了连接（pool.steady_connection()可以获取一个新的链接）</span></span><br><span class="line">    threadlocal=<span class="literal">None</span>,  <span class="comment"># 如果为none，用默认的threading.Loacl对象，否则可以自己封装一个local对象进行替换</span></span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    conn = POOL.connection(shareable=<span class="literal">False</span>)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>**模式二：**创建一批连接到连接池，供所有线程共享使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB, SharedDBConnection</span><br><span class="line">POOL = PooledDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">    mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class="line">    maxcached=<span class="number">5</span>,  <span class="comment"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class="line">    maxshared=<span class="number">3</span>,  <span class="comment"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class="line">    blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class="line">    ping=<span class="number">0</span>,</span><br><span class="line">    <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    conn = POOL.connection()</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&#x27;select * from tb1&#x27;</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><h3 id="23-实际开发小应用案例"><a class="markdownIt-Anchor" href="#23-实际开发小应用案例"></a> 2.3 实际开发小应用案例：</h3><p><strong>案例目录：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- app.py</span><br><span class="line">- db_helper.py</span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> db_helper <span class="keyword">import</span> SQLHelper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    result = SQLHelper.fetch_one(<span class="string">&#x27;select * from t1&#x27;</span>,[])</span><br><span class="line">    print(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>db_helper.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line">POOL = PooledDB(</span><br><span class="line">    creator=pymysql,  <span class="comment"># 使用链接数据库的模块</span></span><br><span class="line">    maxconnections=<span class="number">6</span>,  <span class="comment"># 连接池允许的最大连接数，0和None表示不限制连接数</span></span><br><span class="line">    mincached=<span class="number">2</span>,  <span class="comment"># 初始化时，链接池中至少创建的空闲的链接，0表示不创建</span></span><br><span class="line">    maxcached=<span class="number">5</span>,  <span class="comment"># 链接池中最多闲置的链接，0和None不限制</span></span><br><span class="line">    maxshared=<span class="number">3</span>,  <span class="comment"># 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。</span></span><br><span class="line">    blocking=<span class="literal">True</span>,  <span class="comment"># 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错</span></span><br><span class="line">    maxusage=<span class="literal">None</span>,  <span class="comment"># 一个链接最多被重复使用的次数，None表示无限制</span></span><br><span class="line">    setsession=[],  <span class="comment"># 开始会话前执行的命令列表。如：[&quot;set datestyle to ...&quot;, &quot;set time zone ...&quot;]</span></span><br><span class="line">    ping=<span class="number">0</span>,</span><br><span class="line">    <span class="comment"># ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always</span></span><br><span class="line">    host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    password=<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    database=<span class="string">&#x27;pooldb&#x27;</span>,</span><br><span class="line">    charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLHelper</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_one</span>(<span class="params">sql,args</span>):</span></span><br><span class="line">        conn = POOL.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch_all</span>(<span class="params">self,sql,args</span>):</span></span><br><span class="line">        conn = POOL.connection()</span><br><span class="line">        cursor = conn.cursor()</span><br><span class="line">        cursor.execute(sql, args)</span><br><span class="line">        result = cursor.fetchall()</span><br><span class="line">        conn.close()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>以后在开发的过程中我们可以基于数据库连接池，基于pymysql，来实现自己个性化操作数据库的需求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;01-如何在python中操作数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#01-如何在python中操作数据库&quot;&gt;&lt;/a&gt; 01 如何在python中操作数据库&lt;/h2&gt;
&lt;p&gt;在后端开发中免不掉与数据库打交道，无非是使用&lt;c</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-4 flask请求上下文</title>
    <link href="http://example.com/2021/01/18/flask/8-4%20flask%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>http://example.com/2021/01/18/flask/8-4%20flask%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2021-01-18T11:39:27.112Z</published>
    <updated>2021-01-18T14:10:56.230Z</updated>
    
    <content type="html"><![CDATA[<p>在分析上下问之前，要做好一个心理准备，因为设计到的代码会很多，需要不懂的要跟着文档自己去翻阅源码。</p><p>首先把涉及到的主要的类或者设计到的 py 页面展示如下图。下面我会以对应类或者页面去讲解flask源码</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155553388-420550334..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155553388-420550334..png" alt="1553480943160" /></a></p><p>之前我们已经论述过了，每次请求过来都会触发<code>app()</code>，所以会触发<code>FLask</code>类的<code>__call__</code>方法，<code>__call__</code>方法会触发<code>Flask</code>类的<code>wsgi_app()</code>方法。然后所有的请求的整个生命周期都在整个<code>wsgi_app()</code>里面了。</p><p>根据上图类和序号来完成我们的分析流程。</p><h2 id="1-首先分析请求上下文对象ctx创立"><a class="markdownIt-Anchor" href="#1-首先分析请求上下文对象ctx创立"></a> 1 首先分析请求上下文对象(ctx)创立</h2><ul><li><p>1.0 FLask 类中的<code>wsgi_app()</code>中的 <code>ctx = self.request_context(environ）</code></p></li><li><p>1.1 <code>RequestContext</code>类中的 <code>__init__</code></p><ul><li><p>实例化出请求上下文对象ctx</p></li><li><p>并且关注：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    request = app.request_class(environ)</span><br><span class="line">self.request = request</span><br></pre></td></tr></table></figure></li></ul></li><li><p>1.2 Request类中的 <code>__init__</code></p><ul><li>该类的 <code>__init__</code>方法实例化出<code>reqeust</code>对象</li></ul><p>这三部完成了初始化一个用户请求相关的数据，也就是请求上下文对象。</p></li></ul><p>1.0中的<code>ctx</code>就是<code>RequestContext</code>对象，请求上下文对象<code>ctx</code>中初始化所有请求所有内容，并且其内部封装着Request对象，Request对象把请求过来的信息格式化并且储存起来。</p><h2 id="2-把请求对象ctx添加到local中入栈"><a class="markdownIt-Anchor" href="#2-把请求对象ctx添加到local中入栈"></a> 2 把请求对象(ctx)添加到local中（入栈）</h2><ul><li><p>2.0 FLask 类中的<code>wsgi_app()</code>中的 <code>ctx.push()</code></p></li><li><p>2.1 <code>RequestContext</code> 类中的 push() 下</p><ul><li>只关注<code>_request_ctx_stack.push(self)</code></li></ul></li><li><p>2.2 <code>LocalStack</code>类中的 push()方法</p><ul><li>只关注 <code>self._local.stack = rv = []</code>，触发2.3执行。</li><li>在实现了2.3的基础上，关注本方法中的<code>rv.append(obj)</code> , rv就是2.3中stack的value值，此obj就是ctx对象 ，相当于为Local类中的storage里面的<code>当前线程或携程唯一标识</code>里的<code>stack</code>对应的<code>value</code>值，添加了球队上下文对象ctx，这个对象里面包含了所有请求过来的信息。</li></ul><p>{</p><p>线程或携程唯一标识:{</p><p>stack:[请求上下文对象ctx]。</p><p>}，</p><p>}</p></li><li><p>2.3 Local类中的 <code>__setattr__</code>方法实现了创建了</p><ul><li><p>storage = {</p><p>线程或携程唯一标识:{</p><p>stack: [ ]</p><p>}，</p><p>}</p></li></ul></li></ul><h2 id="3-找到视图函数并且使用导入request对象"><a class="markdownIt-Anchor" href="#3-找到视图函数并且使用导入request对象"></a> 3 找到视图函数并且使用导入request对象**</h2><ul><li><p>3.0 FLask 类中的<code>wsgi_app()</code>中 <code>response = self.full_dispatch_request()</code>的找到视图函数并执行</p></li><li><p>3.1 找到了视图函数并且执行<code>request.method</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    v &#x3D; request.method</span><br><span class="line">    return  v</span><br></pre></td></tr></table></figure></li><li><p>3.2 须知：<code>request = LocalProxy(partial(_lookup_req_object, 'request'))</code> 用于在视图函数里导入的request对象</p><ul><li>偏函数：<code>partial(_lookup_req_object, 'request')</code><em>不懂可以翻阅之前的文章</em></li></ul></li><li><p>3.3 触发了<code>LocalProxy</code>类 中的 <code>__getattr__</code></p><ul><li>关注：<code>return getattr(self._get_current_object(), name)</code>  # name是‘method’，去Request类中查询‘method’属性，</li></ul></li><li><p>3.4 触发了<code>LocalProxy</code>类 中的 <code>_get_current_object()</code></p><ul><li><p>关注 <code>return self.__local()</code> #返回了Request对象</p><p>在<code>LocalProxy</code>类实例化的时候使得<code>self.__local</code>的值就是实例化时传入偏函数。所以会返回偏函数运行结果。</p></li></ul></li><li><p>3.5 触发了<code>globals.py</code> 里的 <code>_lookup_req_object()</code>运行。</p><ul><li>关注 <code>top = _request_ctx_stack.top</code> # 触发3.6执行</li><li><code>return getattr(top, name) # name = ‘request’</code>，所以返回了Request对象</li></ul></li><li><p>3.6 触发了<code>LocalStack</code>类中的<code>top()</code>方法：</p><ul><li>关注 <code>return self._local.stack[-1]</code> # 返回了请求上下文<code>ctx</code>对象。</li></ul></li><li><p>3.7 触发了Local类中的<code>__getattr__（）</code>方法</p><ul><li>关注<code>return self.__storage__[self.__ident_func__()][name]</code> #返回了当前线程或携程的stack对应的value值，可以理解为返回了 <code>[ctx对象]</code></li></ul></li></ul><h2 id="4-请求结束时从local中移除上下文对象出栈"><a class="markdownIt-Anchor" href="#4-请求结束时从local中移除上下文对象出栈"></a> 4 请求结束时从Local中移除上下文对象（出栈）</h2><p>经过了添加请求上下文到<code>Local</code>的<code>storage</code>中，以及视图函数的运行返回相应对象，我们现在进行把请求上下文对象从storage中移除。</p><ul><li><p>4.0 FLask 类中的<code>wsgi_app()</code>中 <code>ctx.auto_pop()</code></p></li><li><p>4.1 触发了 <code>RequestContext</code>类中的 auto_pop()</p><ul><li>关注 <code>self.pop()</code></li></ul></li><li><p>4.2 触发了 <code>RequestContext</code>类中的 pop() 方法</p><ul><li><code>rv = _request_ctx_stack.pop()</code></li></ul></li><li><p>4.3 触发了 <code>LocalStack</code>类中的pop()的pop方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="built_in">len</span>(stack) == <span class="number">1</span>: <span class="comment"># 证明push过一次 添加过了一次对象</span></span><br><span class="line">    release_local(self._local) <span class="comment"># 在这里pop掉该线程。release_local pop掉的是一个字典</span></span><br><span class="line">    <span class="keyword">return</span> stack[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>4.4 触发了 Local类中的<code>__release_local__()</code> 方法</p><ul><li><pre class="highlight"><code class="python">self.__storage__.pop(self.__ident_func__(), <span class="hljs-literal">None</span>) <span class="hljs-comment">#在Local对象中删除掉了当前线程或者携程的请求上下文对象，</span></code></pre></li></ul></li></ul><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><p>其实操作flask的请求上下文就是操作Local中的字典<code>__storage__</code></p><ol><li><p>通过<code>REquestContext</code>类首先实例化<code>ctx</code>请求上下文对象，其内部包含请求对象</p></li><li><p>入栈，通过请求上下文对象的类的push()方法触发了<code>LocalStack</code>类的push() 方法，从而添加到Local类中的字典里。</p></li><li><p>观察导入的request源码 ，通过观察<code>LocalProxy</code>的源码，最后触发了<code>LocalStack</code>的<code>top()</code>方法得到上下文对象，再的到请求对象，从而实现<code>reuqest</code>的功能。</p></li><li><p>出站，和入栈原理相同通过请求上下文对象的类的方法，触发了<code>LocalStack</code>的<code>pop()</code>方法从而从字典中删除掉当前线程或当前携程的请求信息。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155554088-541734375..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155554088-541734375..png" alt="1553484834232" /></a></p></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在分析上下问之前，要做好一个心理准备，因为设计到的代码会很多，需要不懂的要跟着文档自己去翻阅源码。&lt;/p&gt;
&lt;p&gt;首先把涉及到的主要的类或者设计到的 py 页面展示如下图。下面我会以对应类或者页面去讲解flask源码&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://img2</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-3 阅读flask上下文前夕补充</title>
    <link href="http://example.com/2021/01/18/flask/8-3%20%E9%98%85%E8%AF%BBflask%E4%B8%8A%E4%B8%8B%E6%96%87%E5%89%8D%E8%A1%A5%E5%85%85/"/>
    <id>http://example.com/2021/01/18/flask/8-3%20%E9%98%85%E8%AF%BBflask%E4%B8%8A%E4%B8%8B%E6%96%87%E5%89%8D%E8%A1%A5%E5%85%85/</id>
    <published>2021-01-18T11:39:27.107Z</published>
    <updated>2021-01-18T14:11:04.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-预读源码必要了解的知识点"><a class="markdownIt-Anchor" href="#0-预读源码必要了解的知识点"></a> 0 预读源码必要了解的知识点</h2><p>在阅读源码之前，源码中会涉及到很多python类的特殊的用法以及类写好的功能组件，所以这里我们做一个补充，以便于接下来源码的阅读</p><h2 id="01-偏函数"><a class="markdownIt-Anchor" href="#01-偏函数"></a> 01 偏函数</h2><p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a1,a2,a3</span>):</span></span><br><span class="line">    print(a1,a2,a3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new_func1 = partial(func,a1=<span class="number">1</span>,a2=<span class="number">2</span>)</span><br><span class="line">new_func1(a3=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">new_func2 = partial(func,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">new_func2(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">new_func3 = partial(func,a1=<span class="number">1</span>)</span><br><span class="line">new_func3(a2=<span class="number">2</span>,a3=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：partial括号内第一个参数是原函数，其余参数是需要固定的参数</p><p><strong>效果图</strong>：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420400-1230142937..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420400-1230142937..png" alt="1553002020199" /></a></p><h2 id="02-__add__的使用"><a class="markdownIt-Anchor" href="#02-__add__的使用"></a> 02 <code>__add__</code>的使用</h2><p>如果一个类里面定义了 <code>__add__</code>方法，如果这个类的对象 <code>+</code>另一个对象，会触发这个类的<code>__add__</code>方法，换个说法如果 <code>对象1+对象2</code> 则会触发<code>对象1</code>的 <code>__add__</code>方法，python在类中有很多类似的方法，对象会在不同情况下出发对应的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.num = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(other,Foo):</span><br><span class="line">            result = self.num + other.num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = self.num + other</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">fo1 = Foo()</span><br><span class="line">fo2 = Foo()</span><br><span class="line">v1 = fo1 + fo2</span><br><span class="line">v2 = fo1 + <span class="number">4</span></span><br><span class="line">print(v1,v2)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420787-1693929097..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420787-1693929097..png" alt="1553002690004" /></a></p><h2 id="03-chain函数"><a class="markdownIt-Anchor" href="#03-chain函数"></a> 03 chain函数</h2><p>chain函数来自于itertools库，itertools库提供了非常有用的基于迭代对象的函数，而chain函数则是可以串联多个迭代对象来形成一个更大的迭代对象 。</p><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">l1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">l2 = [<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">new_iter = chain(l1,l2) <span class="comment"># 参数必须为可迭代对象</span></span><br><span class="line">print(new_iter)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> new_iter:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421124-1086324095..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421124-1086324095..png" alt="1553003580254" /></a></p><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">3</span></span><br><span class="line">list_4 = [f1, f2]</span><br><span class="line">new_iter2 = chain([f3], list_4)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> new_iter2:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>效果图：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421277-1702083091..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421277-1702083091..png" alt="1553003696355" /></a></p><p>作者： 小猿取经</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-预读源码必要了解的知识点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0-预读源码必要了解的知识点&quot;&gt;&lt;/a&gt; 0 预读源码必要了解的知识点&lt;/h2&gt;
&lt;p&gt;在阅读源码之前，源码中会涉及到很多python类的特殊的用法以及类写好的</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-2 flask之分析线程和协程</title>
    <link href="http://example.com/2021/01/18/flask/8-2%20flask%E4%B9%8B%E5%88%86%E6%9E%90%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/"/>
    <id>http://example.com/2021/01/18/flask/8-2%20flask%E4%B9%8B%E5%88%86%E6%9E%90%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B/</id>
    <published>2021-01-18T11:39:27.102Z</published>
    <updated>2021-01-18T14:11:12.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-思考每个请求之间的关系"><a class="markdownIt-Anchor" href="#01-思考每个请求之间的关系"></a> 01 思考：每个请求之间的关系</h2><p>我们每一个请求进来的时候都开一个进程肯定不合理，那么如果每一个请求进来都是串行的，那么根本实现不了并发，所以我们假定每一个请求进来使用的是线程。</p><p>那么线程中数据互相不隔离，存在修改数据的时候数据不安全的问题。</p><p>假定我们的需求是，每个线程都要设置值，并且该线程打印该线程修改的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,current_thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">locals_values = Foo()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    locals_values.name = num</span><br><span class="line">    time.sleep(<span class="number">2</span>)             <span class="comment"># 取出该线程的名字</span></span><br><span class="line">    print(locals_values.name, current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                                    <span class="comment"># 设置该线程的名字</span></span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>很明显阻塞了2秒的时间所有的线程都完成了修改值，而2秒后所有的线程打印出来的时候都是9了，就产生了数据不安全的问题。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249423-1956623278..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249423-1956623278..png" alt="1552975111079" /></a></p><p>所以我们要解决这种线程不安全的问题，有如下两种解决方案。</p><ul><li><p>方案一：是加锁</p></li><li><p>方案二：使用<code>threading.local</code>对象把要修改的数据复制一份，使得每个数据互不影响。</p><p>我们要实现的并发是多个请求实现并发，而不是纯粹的只是修改一个数据，所以第二种思路更适合做我们每个请求的并发，把每个请求对象的内容都复制一份让其互相不影响。</p><p><em>详解：为什么不用加锁的思路？加锁的思路是多个线程要真正实现共用一个数据，并且该线程修改了数据之后会影响到其他线程，更适合类似于12306抢票的应用场景，而我们是要做请求对象的并发，想要实现的是该线程对于请求对象这部分内容有任何修改并不影响其他线程。所以使用方案二</em></p></li></ul><h2 id="02-threadinglocal"><a class="markdownIt-Anchor" href="#02-threadinglocal"></a> 02 threading.local</h2><p>多个线程修改同一个数据，复制多份数据给每个线程用,为每个线程开辟一块空间进行数据存储</p><p><strong>实例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread,current_thread,local</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">locals_values = local()</span><br><span class="line"><span class="comment"># 可以简单理解为，识别到新的线程的时候，都会开辟一片新的内存空间，相当于每个线程对该值进行了拷贝。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    locals_values.name = num</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(locals_values.name, current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249911-1462606510..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249911-1462606510..png" alt="1552976228090" /></a></p><p>如上通过threading.local实例化的对象，实现了多线程修改同一个数据，每个线程都复制了一份数据，并且修改的也都是自己的数据。达到了我们想要的效果。</p><h2 id="03-通过字典自定义threadinglocal"><a class="markdownIt-Anchor" href="#03-通过字典自定义threadinglocal"></a> 03 通过字典自定义threading.local</h2><p><strong>实例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> get_ident,Thread,current_thread</span><br><span class="line"><span class="comment"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    storage = &#123;&#125;<span class="comment"># 初始化一个字典</span></span><br><span class="line">    get_ident = get_ident <span class="comment"># 拿到get_ident的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span>(<span class="params">self,k,v</span>):</span></span><br><span class="line">        ident =self.get_ident()<span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        origin = self.storage.get(ident)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> origin:</span><br><span class="line">            origin=&#123;&#125;</span><br><span class="line">        origin[k] = v</span><br><span class="line">        self.storage[ident] = origin</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,k</span>):</span></span><br><span class="line">        ident = self.get_ident() <span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        v= self.storage[ident].get(k)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">locals_values = Local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="comment"># get_ident() 获取当前线程的唯一标记</span></span><br><span class="line">    locals_values.<span class="built_in">set</span>(<span class="string">&#x27;KEY&#x27;</span>,num)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(locals_values.get(<span class="string">&#x27;KEY&#x27;</span>),current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p><strong>讲解：</strong></p><p>利用<code>get_ident()</code>获取每个线程的唯一标记作为键，然后组织一个字典storage。</p><p><strong>如</strong>：｛线程1的唯一标记：{k:v}，线程2的唯一标记：{k:v}…｝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">｛</span><br><span class="line"><span class="number">15088</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">0</span>&#125;, </span><br><span class="line">   <span class="number">8856</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">   <span class="number">17052</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">2</span>&#125;, </span><br><span class="line">   <span class="number">8836</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">3</span>&#125;, </span><br><span class="line">   <span class="number">13832</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">4</span>&#125;, </span><br><span class="line">   <span class="number">15504</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">5</span>&#125;, </span><br><span class="line">   <span class="number">16588</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">6</span>&#125;, </span><br><span class="line">   <span class="number">5164</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">7</span>&#125;, </span><br><span class="line">   <span class="number">560</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">8</span>&#125;, </span><br><span class="line">   <span class="number">1812</span>: &#123;<span class="string">&#x27;KEY&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>运行效果</strong>：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155250365-1961757116..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155250365-1961757116..png" alt="1552981453617" /></a></p><h2 id="04-通过setattr和getattr实现自定义threthreadinglocal"><a class="markdownIt-Anchor" href="#04-通过setattr和getattr实现自定义threthreadinglocal"></a> 04 通过setattr和getattr实现自定义threthreading.local</h2><p><strong>实例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> get_ident,Thread,current_thread</span><br><span class="line"><span class="comment"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    storage = &#123;&#125;<span class="comment"># 初始化一个字典</span></span><br><span class="line">    get_ident = get_ident <span class="comment"># 拿到get_ident的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, k, v</span>):</span></span><br><span class="line">        ident =self.get_ident()<span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        origin = self.storage.get(ident)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> origin:</span><br><span class="line">            origin=&#123;&#125;</span><br><span class="line">        origin[k] = v</span><br><span class="line">        self.storage[ident] = origin</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        ident = self.get_ident() <span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        v= self.storage[ident].get(k)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">locals_values = Local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="comment"># get_ident() 获取当前线程的唯一标记</span></span><br><span class="line">    locals_values.KEY=num</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(locals_values.KEY,current_thread().name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><h2 id="05-每个对象有自己的存储空间字典"><a class="markdownIt-Anchor" href="#05-每个对象有自己的存储空间字典"></a> 05 每个对象有自己的存储空间（字典）</h2><p>我们可以自定义实现了threading.local的功能，但是现在存在一个问题，如果我们想生成多个Local对象，但是会导致多个Local对象所管理的线程设置的内容都放到了类属性storage = {}里面，所以我们如果想实现每一个Local对象所对应的线程设置的内容都放到自己的storage里面，就需要重新设计代码。</p><p><strong>实例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> get_ident,Thread,current_thread</span><br><span class="line"><span class="comment"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 千万不要按照注释里这么写，否则会造成递归死循环，死循环在__getattr__中,不理解的话可以全程使用debug测试。</span></span><br><span class="line">        <span class="comment"># self.storage = &#123;&#125;</span></span><br><span class="line">        <span class="comment"># self.get_ident =get_ident</span></span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self,<span class="string">&quot;storage&quot;</span>,&#123;&#125;)</span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self,<span class="string">&quot;get_ident&quot;</span>,get_ident) <span class="comment">#借用父类设置对象的属性，避免递归死循环。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, k, v</span>):</span></span><br><span class="line">        ident =self.get_ident()<span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        origin = self.storage.get(ident)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> origin:</span><br><span class="line">            origin=&#123;&#125;</span><br><span class="line">        origin[k] = v</span><br><span class="line">        self.storage[ident] = origin</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, k</span>):</span></span><br><span class="line">        ident = self.get_ident() <span class="comment"># 获取当前线程的唯一标记</span></span><br><span class="line">        v= self.storage[ident].get(k)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">locals_values = Local()</span><br><span class="line">locals_values2 = Local()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="comment"># get_ident() 获取当前线程的唯一标记</span></span><br><span class="line">    <span class="comment"># locals_values.set(&#x27;KEY&#x27;,num)</span></span><br><span class="line">    locals_values.KEY=num</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(locals_values.KEY,current_thread().name)</span><br><span class="line">    <span class="comment"># print(&#x27;locals_values2.storage：&#x27;,locals_values2.storage) #查看locals_values2.storage的私有的storage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = Thread(target=func,args=(i,),name=<span class="string">&#x27;线程%s&#x27;</span>%i)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>显示效果我们就不做演示了，和前几个案例演示效果一样。</p><h2 id="06-如果是你会如何设计flask的请求并发"><a class="markdownIt-Anchor" href="#06-如果是你会如何设计flask的请求并发"></a> 06 如果是你会如何设计flask的请求并发？</h2><ul><li><p>情况一：单进程单线程，基于全局变量就可以做</p></li><li><p>情况二：单进程多线程，基于threading.local对象做</p></li><li><p>情况三：单进程多线程多协程，如何做？</p><p><em>提示：协程属于应用级别的，协程会替代操作系统自动切换遇到 <code>IO</code>的任务或者运行级别低的任务，而应用级别的切换速度远高于操作系统的切换</em></p><p>当然如果是自己来设计框架，为了提升程序的并发性能，一定是上诉的情况三，不光考虑多线程并且要多协程，那么该如何设计呢？</p><p>在我们的flask中为了这种并发需求，依赖于底层的<code>werkzeug</code>外部包，<code>werkzeug</code>实现了保证多线程和多携程的安全，<code>werkzeug</code>基本的设计理念和上一个案例一致，唯一的区别就是在导入的时候做了一步处理，且看<code>werkzeug</code>源码。</p><p><strong><code>werkzeug.local.py</code>部分源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> greenlet <span class="keyword">import</span> getcurrent <span class="keyword">as</span> get_ident <span class="comment"># 拿到携程的唯一标识</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> thread <span class="keyword">import</span> get_ident <span class="comment">#线程的唯一标识</span></span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="keyword">from</span> _thread <span class="keyword">import</span> get_ident</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self, <span class="string">&#x27;__storage__&#x27;</span>, &#123;&#125;)</span><br><span class="line">        <span class="built_in">object</span>.__setattr__(self, <span class="string">&#x27;__ident_func__&#x27;</span>, get_ident)</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, name, value</span>):</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br></pre></td></tr></table></figure><p>讲解：</p><p>原理就是在最开始导入线程和协程的唯一标识的时候统一命名为<code>get_ident</code>，并且先导入协程模块的时候如果报错说明不支持协程，就会去导入线程的<code>get_ident</code>，这样无论是只有线程运行还是协程运行都可以获取唯一标识，并且把这个标识的线程或协程需要设置的内容都分类存放于<code>__storage__</code>字典中。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;01-思考每个请求之间的关系&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#01-思考每个请求之间的关系&quot;&gt;&lt;/a&gt; 01 思考：每个请求之间的关系&lt;/h2&gt;
&lt;p&gt;我们每一个请求进来的时候都开一个进程肯定不合理，那么如果每一个请求进来</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>8-1 flask高级</title>
    <link href="http://example.com/2021/01/18/flask/8-1%20flask%E9%AB%98%E7%BA%A7/"/>
    <id>http://example.com/2021/01/18/flask/8-1%20flask%E9%AB%98%E7%BA%A7/</id>
    <published>2021-01-18T11:39:27.097Z</published>
    <updated>2021-01-18T14:11:21.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-请求扩展"><a class="markdownIt-Anchor" href="#01-请求扩展"></a> 01 请求扩展</h2><h3 id="01-before_first_request-项目启动后第一次请求的时候执行"><a class="markdownIt-Anchor" href="#01-before_first_request-项目启动后第一次请求的时候执行"></a> 01 before_first_request ：项目启动后第一次请求的时候执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_first_request</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;第一次请求的时候执行&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="02-before_request每次请求之前执行"><a class="markdownIt-Anchor" href="#02-before_request每次请求之前执行"></a> 02 before_request：每次请求之前执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;每次请求之前执行&#x27;</span>)</span><br><span class="line">    <span class="comment"># return &#x27;直接return&#x27;    # 如果有一个写了return返回值，那么其他的before_request不会执行，视图也不会执行。</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>可以写多个</li><li>如果有一个写了return返回值，那么其他的before_request不会执行，视图也不会执行。</li></ul><h3 id="03-after_request每次请求之后执行请求出现异常不会执行"><a class="markdownIt-Anchor" href="#03-after_request每次请求之后执行请求出现异常不会执行"></a> 03 after_request：每次请求之后执行，请求出现异常不会执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span>(<span class="params">result</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;每次请求之后执行，请求出现异常不会执行&#x27;</span>)</span><br><span class="line">    <span class="comment"># 这个result是封装的响应对象，需要return否则报错</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="04-errorhandler可以自定义监听响应的状态码并处理"><a class="markdownIt-Anchor" href="#04-errorhandler可以自定义监听响应的状态码并处理"></a> 04 errorhandler：可以自定义监听响应的状态码并处理：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errorhandler</span>(<span class="params">error</span>):</span></span><br><span class="line">    print(error)  <span class="comment"># 是具体的错误信息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;404页面跑到了火星上面去了&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">errorhandler</span>(<span class="params">error</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;errorhandler的错误信息&#x27;</span>)</span><br><span class="line">    print(error)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;服务器内部错误500&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="05-teardown_request每次请求之后绑定了一个函数在非debug模式下即使遇到了异常也会执行"><a class="markdownIt-Anchor" href="#05-teardown_request每次请求之后绑定了一个函数在非debug模式下即使遇到了异常也会执行"></a> 05 teardown_request：每次请求之后绑定了一个函数，在<code>非debug</code>模式下即使遇到了异常也会执行。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">terardown_reqquest</span>(<span class="params">error</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;无论视图函数是否有错误，视图函数执行完都会执行&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;想要此函数生效，debug不能为True&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;error 是具体的错误信息&#x27;</span>)</span><br><span class="line">    print(error)</span><br></pre></td></tr></table></figure><h3 id="06-template_global全局模板标签"><a class="markdownIt-Anchor" href="#06-template_global全局模板标签"></a> 06 template_global()：全局模板标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1+a2</span><br><span class="line"><span class="comment">#&#123;&#123;add(1,2)&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这个可以在模板中作为全局的标签使用,在模板中可以直接调用，调用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;add(1,2)&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="07-template_filter全局模板过滤器"><a class="markdownIt-Anchor" href="#07-template_filter全局模板过滤器"></a> 07 template_filter：全局模板过滤器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_filter</span>(<span class="params">a1, a2, a3</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br></pre></td></tr></table></figure><p>这个可以在模板中作为全局过滤器使用，在模板中可以直接调用，调用方式(<em>注意同template_global的区别</em>) ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="number">1</span>|add_filter(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>优势：</strong></p><p>全局模板标签和全局模板过滤器简化了需要手动传一个函数给模板调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a1,a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1+a2</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,test=test)</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment"># index.html</span></span><br><span class="line">```</span><br><span class="line">&#123;&#123;test(<span class="number">22</span>,<span class="number">22</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure><h2 id="02-flask中间件"><a class="markdownIt-Anchor" href="#02-flask中间件"></a> 02 flask中间件</h2><p>Flask的中间件的性质，就是可以理解为在整个请求的过程的前后定制一些个性化的功能。</p><h5 id="flask的中间件的实现案例"><a class="markdownIt-Anchor" href="#flask的中间件的实现案例"></a> flask的中间件的实现案例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;视图函数中&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my_middle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,wsgi_app</span>):</span></span><br><span class="line">        self.wsgi_app = wsgi_app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;中间件的代码上&#x27;</span>)</span><br><span class="line">        obj = self.wsgi_app( *args, **kwargs)</span><br><span class="line">        print(<span class="string">&#x27;中间件的代码下&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   </span><br><span class="line">    app.wsgi_app = my_middle(app.wsgi_app)</span><br><span class="line">     <span class="comment"># app.wsgi_app(environ, start_response)</span></span><br><span class="line">    app.run()</span><br><span class="line">    <span class="comment"># 梳理一下 根据werkzeug我们可以知道 每次请求必然经历了app（）</span></span><br><span class="line">    <span class="comment"># 所以我们要查看Flask的源码找到__call__方法</span></span><br><span class="line">    <span class="comment"># 找到了__call__方法后发现执行了return self.wsgi_app(environ, start_response)</span></span><br><span class="line">    <span class="comment"># 然后flask里面所有的内容调度都是基于这个self.wsgi_app(environ, start_response)，这就是就是flask的入口</span></span><br><span class="line">    <span class="comment"># 如何实现中间件呢？ 原理上就是重写app.wsgi_app，然后在里面添加上一些自己想要实现的功能。</span></span><br><span class="line">    <span class="comment"># 首先分析  app.wsgi_app需要加括号执行  所以我们把app.wsgi_app做成一个对象，并且这个对象需要加括号运行</span></span><br><span class="line">    <span class="comment"># 也就是会触发这个对象的类的__call__()方法</span></span><br><span class="line">    <span class="comment"># 1 那么就是app.wsgi_app=对象=自己重写的类(app.wsgi_app) ，我们需要在自己重写的类里面实现flask源码中的app.wsgi_app,在实例化的过程把原来的app.wsgi_app变成对象的属性</span></span><br><span class="line">    <span class="comment"># 2         app.wsgi_app() =对象() = 自己重写的类.call()方法</span></span><br><span class="line">    <span class="comment"># 3         那么上面的代码就可以理解了，在自己重写的类中实现了原有的__call__方法</span></span><br></pre></td></tr></table></figure><h5 id="梳理"><a class="markdownIt-Anchor" href="#梳理"></a> 梳理：</h5><ul><li>根据<code>werkzeug</code>我们可以知道 每次请求必然经历了<code>app（）</code></li><li>所以我们要查看Flask的源码找到<code>__call__</code>方法</li><li>找到了Flask的<code>__call__</code>方法后发现执行了<code>return self.wsgi_app(environ, start_response)</code></li><li>flask里面所有的内容调度都是基于这个<code>self.wsgi_app(environ, start_response)</code>，这就是就是<code>flask</code>的入口，也就是selef是app，也就是<code>app.wsgi_app（environ, start_response）</code>为程序的入口。</li><li>如何实现中间件呢？ 原理上就是重写app.wsgi_app，然后在里面添加上一些自己想要实现的功能。</li><li>首先分析 app.wsgi_app需要加括号执行 所以我们把app.wsgi_app做成一个对象，并且这个对象需要加括号运行。</li><li>也就是会触发这个对象的类的<code>__call__()</code>方法。</li></ul><h5 id="实操理解"><a class="markdownIt-Anchor" href="#实操理解"></a> 实操理解：</h5><ol><li><p><strong>app.wsgi_app=对象=自己重写的类(app.wsgi_app)</strong></p><p><em>提示：我们需要在自己重写的类里面实现flask源码中的app.wsgi_app,在实例化的过程把原来的 app.wsgi_app变成对象的属性</em></p></li><li><p><strong>app.wsgi_app(） =对象() = 自己重写的类.call()方法</strong></p></li></ol><p>app.wsgi_app(实参） =对象(实参) = 自己重写的类.call(实参)方法</p><ol start="3"><li><strong>那么上面的代码就可以理解了，在自己重写的类中实现了原有的call方法，并且重新调用了原有的app.wsgi_app</strong></li></ol><h2 id="03-蓝图"><a class="markdownIt-Anchor" href="#03-蓝图"></a> 03 蓝图：</h2><h3 id="31-蓝图的基本使用"><a class="markdownIt-Anchor" href="#31-蓝图的基本使用"></a> 3.1 蓝图的基本使用</h3><p>在我的flask中，我们可以利用蓝图对程序目录的划分。</p><p>思考如果我们有很多个视图函数，比如下面这样我们是不是应该抽取出来专门的py文件进行管理呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;logout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;add_order&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;modify_order&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;modify_order&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>上面的这种是不是会显得主运行文件特别乱，这个时候我们的蓝图就闪亮登场了。</p><h5 id="311实例"><a class="markdownIt-Anchor" href="#311实例"></a> <strong>3.1.1实例：</strong></h5><p>项目目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-templates</span><br><span class="line">-static</span><br><span class="line">-views</span><br><span class="line">    -user.py</span><br><span class="line">    -order.py</span><br><span class="line">-app.py</span><br></pre></td></tr></table></figure><p>views/user.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 创建蓝图</span></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 利用蓝图创建路由关系</span></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;logout&quot;</span></span><br></pre></td></tr></table></figure><p>views/order.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">order_bp = Blueprint(<span class="string">&#x27;order&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;add_order&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/modify_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;modify_order&quot;</span></span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> views.user <span class="keyword">import</span> user_bp</span><br><span class="line"><span class="keyword">from</span> views.order <span class="keyword">import</span> order_bp</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 3 注册蓝图</span></span><br><span class="line">app.register_blueprint(user_bp)</span><br><span class="line">app.register_blueprint(order_bp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>访问：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215474-577184084..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215474-577184084..png" alt="1552424766233" /></a></p><p>其他的几条路由也是直接访问，在此就不做展示了。</p><p><strong>讲解：</strong></p><p>观察views/user.py</p><ul><li><p>我们可以把所有的视图函数抽出来多个文件。</p></li><li><p>在这里我们通过<code>user_bp = Blueprint('user',__name__)</code>创建一个蓝图对象</p><p>参数讲解：</p><ul><li>user_bp ：是用于指向创建出的蓝图对象，可以自由命名。</li><li>Blueprint的第一个参数自定义命名的<code>‘user’</code>用于<code>url_for</code>翻转<code>url</code>时使用。</li><li><code>__name__</code>用于寻找蓝图自定义的模板和静态文件使用。</li></ul></li><li><p>蓝图对象的用法和之前实例化出来的app对象用法很像，可以进行注册路由。</p></li></ul><p><a href="http://xn--app-jn0fj93r.py">观察app.py</a></p><ul><li>这里我们需要手动的去注册一下蓝图，才会建立上url和视图函数的映射关系。</li></ul><p><strong>关键词：</strong></p><ol><li><p>创建蓝图</p><p><code>user_bp = Blueprint('user',__name__)</code></p></li><li><p>利用蓝图创建路由关系</p><p>@bp.route(’/login/’)<br />def login():<br />return “login”</p></li><li><p>注册蓝图<br />app.register_blueprint(bp)</p></li></ol><h3 id="32-蓝图的高级使用重点备课内容"><a class="markdownIt-Anchor" href="#32-蓝图的高级使用重点备课内容"></a> 3.2 蓝图的高级使用（重点备课内容）</h3><h4 id="321-蓝图中实现path部分的url前缀"><a class="markdownIt-Anchor" href="#321-蓝图中实现path部分的url前缀"></a> 3.2.1 蓝图中实现path部分的url前缀</h4><p>创建蓝图的时候填写<code>url_prefix</code>可以为增加url的path部分的前缀，可以更方便的去管理访问视图函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 创建蓝图</span></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line"><span class="comment"># 注意斜杠跟视图函数的url连起来时候不要重复了。</span></span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215854-919173490..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215854-919173490..png" alt="1552425130691" /></a></p><p><strong>注意：</strong></p><ol><li><p>斜杠跟视图函数的url连起来时候不要重复了。</p><p>图解：</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216014-1683480120..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216014-1683480120..png" alt="1552426158515" /></a></p></li></ol><p>2.url加前缀的时候也可以再注册蓝图的时候加上，更推荐这么做，因为代码的可读性更强。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.register_blueprint(user_bp,url_prefix=<span class="string">&#x27;/order&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="332-蓝图中自定义模板路径"><a class="markdownIt-Anchor" href="#332-蓝图中自定义模板路径"></a> 3.3.2 蓝图中自定义模板路径</h4><p>创建蓝图的时候填写<code>template_folder</code>可以指定自定义模板路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 创建蓝图                                           #所对应的参数路径是相对于蓝图文件的</span></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>,template_folder=<span class="string">&#x27;views_templates&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li><p>蓝图虽然指定了自定义的模板查找路径，但是查找顺序还是会先找主app规定的模板路径(templates)，找不到再找蓝图自定义的模板路径。</p></li><li><p><code>Blueprint</code>的<code>template_folder</code>参数指定的自定义模板路径是相对于蓝图文件的路径。</p><p>图解：</p><p><strong>(01)</strong></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216222-141055298..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216222-141055298..png" alt="1552425776786" /></a></p><p><strong>(02)</strong></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216436-1555848420..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216436-1555848420..png" alt="1552425616132" /></a></p></li></ol><h4 id="333-蓝图中自定义静态文件路径"><a class="markdownIt-Anchor" href="#333-蓝图中自定义静态文件路径"></a> 3.3.3 蓝图中自定义静态文件路径</h4><p>创建蓝图的时候填写<code>static_folder</code>可以指定自定义静态文件的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>,template_folder=<span class="string">&#x27;views_templates&#x27;</span>,</span><br><span class="line">                    static_folder=<span class="string">&#x27;views_static&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>在模板中使用自定义的静态文件路径需要依赖<code>url_for()</code></li><li>下节讲解如何在模板中应用蓝图自定义的静态文件。</li></ol><h4 id="334-url_for翻转蓝图"><a class="markdownIt-Anchor" href="#334-url_for翻转蓝图"></a> 3.3.4 url_for()翻转蓝图</h4><h5 id="视图中翻转url"><a class="markdownIt-Anchor" href="#视图中翻转url"></a> 视图中翻转url:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;创建蓝图时第一个参数.蓝图下的函数名&#x27;</span>)</span><br><span class="line"><span class="comment"># 如：</span></span><br><span class="line">url_for(<span class="string">&#x27;user.login&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="模板中翻转url"><a class="markdownIt-Anchor" href="#模板中翻转url"></a> 模板中翻转url:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&#39;创建蓝图时第一个参数.蓝图下的函数名&#39;) &#125;&#125;</span><br><span class="line"># 如：</span><br><span class="line">&#123;&#123; url_for(&#39;user.login&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="模板中应用蓝图自定义路径的静态文件"><a class="markdownIt-Anchor" href="#模板中应用蓝图自定义路径的静态文件"></a> 模板中应用蓝图自定义路径的静态文件：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; url_for(&#39;创建蓝图时第一个参数.static&#39;,filename&#x3D;&#39;蓝图自定义静态文件路径下的文件&#39;) &#125;&#125;</span><br><span class="line"># 如：</span><br><span class="line">&#123;&#123; url_for(&#39;user.static&#39;,filename&#x3D;&#39;login.css&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="335-蓝图子域名的实现"><a class="markdownIt-Anchor" href="#335-蓝图子域名的实现"></a> 3.3.5 蓝图子域名的实现</h4><p>创建蓝图的时候填写<code>subdomain</code>可以指定子域名，可以参考之前注册路由中实现子域名。</p><p><strong>（1）</strong> 配置C:\Windows\System32\drivers\etc\hosts</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> bookmanage.com</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> admin.bookmanage.com</span><br></pre></td></tr></table></figure><p>**（2）**给app增加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SERVER_NAME&#x27;</span>] = <span class="string">&#x27;bookmanage.com:5000&#x27;</span></span><br></pre></td></tr></table></figure><p>**（3）**创建蓝图的时候添加子域名 <code>subdomain='admin'</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1 创建蓝图                                           </span></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__,url_prefix=<span class="string">&#x27;/user&#x27;</span>,template_folder=<span class="string">&#x27;views_templates&#x27;</span>,</span><br><span class="line">                    static_folder=<span class="string">&#x27;views_static&#x27;</span>,subdomain=<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 利用蓝图创建路由关系</span></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login_master.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>（4）</strong> <a href="http://xn--admin-6u8oj48c.bookmanage.com:5000/user/login/">访问admin.bookmanage.com:5000/user/login/</a></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216641-888219773..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216641-888219773..png" alt="1552428071447" /></a></p><h4 id="336-蓝图中使用自己请求扩展"><a class="markdownIt-Anchor" href="#336-蓝图中使用自己请求扩展"></a> 3.3.6 蓝图中使用自己请求扩展</h4><p>在蓝图中我们可以利用创建好的蓝图对象，设置访问蓝图的视图函数的时候触发蓝图独有的请求扩展。</p><p><strong>例如：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">order_bp = Blueprint(<span class="string">&#x27;order&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;add_order&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_bp_before_request</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;请登录&#x27;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>只有访问该蓝图下的视图函数时候才会触发该蓝图的请求扩展。</li><li>可以这么理解：相当app的请求扩展是全局的，而蓝图的请求扩展是局部的只对本蓝图下的视图函数有效。</li></ul><h3 id="33-使用蓝图之中小型系统"><a class="markdownIt-Anchor" href="#33-使用蓝图之中小型系统"></a> 3.3 使用蓝图之中小型系统</h3><p>目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-flask_small_pro</span><br><span class="line">-app01</span><br><span class="line">    -__init__.py</span><br><span class="line">    -static</span><br><span class="line">        -templates</span><br><span class="line">        -views</span><br><span class="line">        -order.py</span><br><span class="line">            -user.py</span><br><span class="line">     -manage.py </span><br><span class="line">        </span><br><span class="line">__init__.py</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> app01.views.user <span class="keyword">import</span> user_bp</span><br><span class="line"><span class="keyword">from</span> app01.views.order <span class="keyword">import</span> order_bp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.register_blueprint(user_bp,url_prefix=<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line">app.register_blueprint(order_bp)</span><br></pre></td></tr></table></figure><p><a href="http://user.py">user.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;login&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@user_bp.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;logout&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="http://order.py">order.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">order_bp = Blueprint(<span class="string">&#x27;order&#x27;</span>,__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;buy_order&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@order_bp.route(<span class="params"><span class="string">&#x27;/modify_order/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_order</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;modify_order&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="http://manage.py">manage.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="34-使用蓝图之使用大型系统"><a class="markdownIt-Anchor" href="#34-使用蓝图之使用大型系统"></a> 3.4 使用蓝图之使用大型系统</h3><p>这里所谓的大型系统并不是绝对的大型系统，而是相对规整的大型系统，相当于提供了一个参考，在真实的生成环境中会根据公司的项目以及需求，规划自己的目录结构。</p><p>文件路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">│  run.py  </span><br><span class="line">│</span><br><span class="line">│</span><br><span class="line">└─pro_flask  <span class="comment"># 文件夹</span></span><br><span class="line">    │  __init__.py </span><br><span class="line">    │</span><br><span class="line">    ├─admin <span class="comment"># 文件夹</span></span><br><span class="line">    │  │  views.py</span><br><span class="line">    │  │  __init__.py</span><br><span class="line">    │  │</span><br><span class="line">    │  ├─static <span class="comment"># 文件夹</span></span><br><span class="line">    │  └─templates  <span class="comment"># 文件夹</span></span><br><span class="line">    │</span><br><span class="line">    └─web<span class="comment"># 文件夹</span></span><br><span class="line">       │  views.py</span><br><span class="line">       │  __init__.py</span><br><span class="line">       │</span><br><span class="line">       ├─static  <span class="comment"># 文件夹</span></span><br><span class="line">       └─templates <span class="comment"># 文件夹</span></span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><a href="http://run.py">run.py</a> 启动app</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pro_flask <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><code>__init__.py</code> 实例化核心类，导入蓝图对象，注册蓝图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> .admin <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .web <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app.register_blueprint(admin, url_prefix=<span class="string">&#x27;/admin&#x27;</span>)</span><br><span class="line">app.register_blueprint(web)</span><br></pre></td></tr></table></figure><p><a href="http://admin.views.py">admin.views.py</a> 完成注册路由以及视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Admin.Index&#x27;</span></span><br></pre></td></tr></table></figure><p><code>admin.__init__.py</code> 生成蓝图对象导入views，使得views的代码运行完成注册路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">admin = Blueprint(</span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    __name__,</span><br><span class="line">    template_folder=<span class="string">&#x27;templates&#x27;</span>,</span><br><span class="line">    static_folder=<span class="string">&#x27;static&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br></pre></td></tr></table></figure><p>web文件夹下和admin文件夹下目录构成完全一致，这里就不举例子了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;01-请求扩展&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#01-请求扩展&quot;&gt;&lt;/a&gt; 01 请求扩展&lt;/h2&gt;
&lt;h3 id=&quot;01-before_first_request-项目启动后第一次请求的时候执行&quot;&gt;&lt;a class=&quot;m</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>6 flask脚本</title>
    <link href="http://example.com/2021/01/18/flask/6%20flask%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2021/01/18/flask/6%20flask%E8%84%9A%E6%9C%AC/</id>
    <published>2021-01-18T11:39:27.089Z</published>
    <updated>2021-01-18T14:11:30.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="61-集成python-shell"><a class="markdownIt-Anchor" href="#61-集成python-shell"></a> 6.1 集成Python shell</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在实际的开发中，不免有一些任务需要在`shell`下完成。如：</span><br><span class="line">- 为cms后台添加超级管理员的需求，</span><br><span class="line">    - 如迁移数据库的需求，定时任务等等，</span><br><span class="line">诸如这类需求更适合在shell中去操作（大部分需要在shell中去操作的都是权限比较高的任务）。 </span><br></pre></td></tr></table></figure><p><em>提示：迁移数据库就是用来解决数据库更新问题，解决之前我们学的<code>db.create_all()</code>和<code>db.drop_all()</code>更新数据库的时候丢失数据的问题。</em></p><p>flask官方提供了一个扩展组件<code>flask-script</code>可以实现在<code>shell</code>下操作我们的<code>Flask</code>项目。</p><h3 id="611-flask-script的用法"><a class="markdownIt-Anchor" href="#611-flask-script的用法"></a> 6.1.1 flask-script的用法：</h3><p>1 由于<code>flask-script</code>是Flask的一个扩展组件，同往常一样首先在虚拟环境中安装我们的<code>flask_script</code>包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-script</span><br></pre></td></tr></table></figure><h4 id="6111-示例flask-script的简单实现"><a class="markdownIt-Anchor" href="#6111-示例flask-script的简单实现"></a> 6.1.1.1 示例：flask-script的简单实现</h4><ul><li>项目目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">│  manage.py</span><br><span class="line">│  server.py</span><br><span class="line">│</span><br><span class="line">├─static  <span class="comment"># 文件夹</span></span><br><span class="line">├─templates <span class="comment"># 文件夹</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://server.py">server.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><ul><li><a href="http://manage.py">manage.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p><strong>解读：<a href="http://manage.py">manage.py</a></strong></p><p><strong>（1）</strong> 从<code>flask_script</code>模块中导入<code>flask_script</code>的核心类<code>Manager</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from flask_script import Manager </span><br></pre></td></tr></table></figure><p><strong>（2）</strong> 从<code>server.py</code>模块中把<code>app</code>对象导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> app</span><br></pre></td></tr></table></figure><p><strong>（3）</strong> 从<code>Manager()</code>类传入<code>app</code>对象实例化出<code>manager</code>对象，<code>manager</code>对象用于以后所有添加命令相关操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager = Manager(app)</span><br></pre></td></tr></table></figure><p>**（4）**利用<code>@manager.command</code>装饰器添加<code>以被装饰函数的名字命名的一条命令</code>与<code>被装饰函数的映射</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@manager.command   </span><span class="comment"># 相当于添加了一条hello命令，可以调用到hello函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>（5）</strong><code>manager</code>调用<code>run</code>方法之前定义的命令才会生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></table></figure><p><strong>在<code>shell</code>下操作命令</strong></p><p>在<code>shell</code>中切入到该<code>manage.py</code>的目录下，并且进入虚拟环境。输入命令<code>python manage.py hello</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;python manage.py hello</span><br></pre></td></tr></table></figure><p>命令中的<code>hello</code>是<code>@manager.command</code>装饰器装饰的函数名</p><p>执行命令后会调用<code>hello</code>函数</p><p>如图所示实现了调用<code>hello</code>函数</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155049684-1372091286..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155049684-1372091286..png" alt="1549965903321" /></a></p><h4 id="6111命令添加方式"><a class="markdownIt-Anchor" href="#6111命令添加方式"></a> 6.1.1.1命令添加方式：</h4><h5 id="第一种无参命令"><a class="markdownIt-Anchor" href="#第一种无参命令"></a> 第一种（无参命令）：</h5><p>使用<code>manager.commad</code>方式添加命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;无参命令&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;python manage.py demo</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050107-2129786014..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050107-2129786014..png" alt="1549967813932" /></a></p><h5 id="第二种有参命令"><a class="markdownIt-Anchor" href="#第二种有参命令"></a> 第二种（有参命令）:</h5><p>使用<code>manager.option('-简写的命令'，‘--全写的命令’，dest=‘传给函数的形参’)</code>添加命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@manager.option(<span class="params"><span class="string">&quot;-u&quot;</span>,<span class="string">&quot;--username&quot;</span>,dest=<span class="string">&quot;username&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@manager.option(<span class="params"><span class="string">&quot;-p&quot;</span>,<span class="string">&quot;--password&quot;</span>,dest=<span class="string">&quot;password&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">username, password</span>):</span></span><br><span class="line">    print(<span class="string">&quot;用户名:&#123;&#125;  密码: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(username,password))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;python manage.py login -u mark -p <span class="number">123</span></span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050295-237683571..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050295-237683571..png" alt="1549968703583" /></a></p><h5 id="第三种子命令"><a class="markdownIt-Anchor" href="#第三种子命令"></a> 第三种（子命令）：</h5><p>比如一个功能对应着很多个命令，这个时候就可以用子命令来实现，可以将这些命令的映射单独放到一个文件方便管理。在这个放着很多命令映射的文件中实例化Manager类出一个新的对象，并在<code>manage.py</code>文件中通过<code>manager.add_command(&quot;子命令&quot;,Manager对象)</code>来添加子命令</p><p><strong>示例：</strong></p><p>在之前的6.1.1.1实例的项目目录中新建文件<code>db_script.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">│  manage.py</span><br><span class="line">│  server.py</span><br><span class="line">│  db_script.py</span><br><span class="line">│</span><br><span class="line">├─static  <span class="comment"># 文件夹</span></span><br><span class="line">├─templates <span class="comment"># 文件夹</span></span><br></pre></td></tr></table></figure><ul><li>db_script.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line">db_Manager = Manager()</span><br><span class="line"></span><br><span class="line"><span class="meta">@db_Manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;初始迁移仓库&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@db_Manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">migrate</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;生成迁移脚本&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@db_Manager.command</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgrade</span>():</span></span><br><span class="line">    print(<span class="string">&quot;迁移脚本映射到数据库&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><a href="http://manage.py">manage.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> db_script <span class="keyword">import</span> db_Manager <span class="comment"># 导入子命令文件的Manager类实例化出的对象</span></span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line">manager.add_command(<span class="string">&quot;db&quot;</span>,db_Manager) <span class="comment"># 添加子命令</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py db init</span><br><span class="line">python manage.py db migrate</span><br><span class="line">python manage.py db upgrade</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050820-1276211128..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050820-1276211128..png" alt="1549969697643" /></a></p><h2 id="62-项目重构"><a class="markdownIt-Anchor" href="#62-项目重构"></a> 6.2 项目重构</h2><h3 id="621-解耦配置信息以及模型文件信息触发循环导入问题"><a class="markdownIt-Anchor" href="#621-解耦配置信息以及模型文件信息触发循环导入问题"></a> 6.2.1 解耦配置信息以及模型文件信息触发循环导入问题</h3><p>随着项目代码的增多 我们再把连接数据库的信息放到主<code>app</code>文件当中会应影响我们代码的可读性，那么我们相关数据库配置的信息应该放到一个<code>config</code>文件当中去，像我们当时加载debug配置一样使用<code>app.config.from_object(config)</code>一样加载我们的数据库连接信息。</p><p>新建<code>config.py</code>文件,把连接数据库相关的信息放到<code>config.py</code>中去</p><p>然后在主<code>app</code>文件中加载配置信息<code>app.config.from_object(config)</code></p><ul><li><a href="http://config.py">config.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">DATABASE_NAME = <span class="string">&#x27;01_db&#x27;</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line">DB_URI = <span class="string">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\</span><br><span class="line">    .<span class="built_in">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URI = DB_URI</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>那么主<code>app</code>中的模型的文件也十分影响代码易读性，也应该新开一个<code>modles</code>文件夹，把我们的模型表放到<code>modles</code>中去</p><ul><li><a href="http://models.py">models.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>,nullable=<span class="literal">False</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>),server_default=<span class="string">&#x27;&#x27;</span>,comment=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    tel = db.Column(db.String(<span class="number">16</span>),server_default=<span class="string">&#x27;&#x27;</span>,comment=<span class="string">&quot;电话&quot;</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://app.py">app.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> UserInfo</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>这是代码易读性提高了，但是新的问题随之出现了，出现了一个循环导入的问题。</p><p><code>app.py</code> 文件导入了<code>models</code>，我们<code>python</code>中而导入文件必然会把需要导入的文件从上到下执行一遍，那么就触发了<code>models</code>的执行，而models执行的时候需要从<code>app</code>导入<code>db</code>，出现了一个死循环如下图，这就是python循环导入的问题。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051193-1643881132..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051193-1643881132..png" alt="1549982777399" /></a></p><h3 id="622-重构项目解决循环导入问题"><a class="markdownIt-Anchor" href="#622-重构项目解决循环导入问题"></a> 6.2.2 重构项目解决循环导入问题</h3><p>为了解耦配置信息以及模型表信息，导致了<code>models.py</code>和<code>app.py</code>出现了循环导入问题，我们的解决方案是新开启一个文件<code>exts.py</code>，在<code>exts.py</code>中生成db对象，解决循环导入问题。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051362-794772624..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051362-794772624..png" alt="1549982940543" /></a></p><h4 id="实例6221解决循环导入问题之后重构项目"><a class="markdownIt-Anchor" href="#实例6221解决循环导入问题之后重构项目"></a> <strong>实例6.2.2.1：解决循环导入问题之后重构项目</strong></h4><ul><li>项目目录：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">│  app.py</span><br><span class="line">│  config.py</span><br><span class="line">│  exts.py</span><br><span class="line">│  models.py</span><br><span class="line">│</span><br><span class="line">├─static <span class="comment"># 文件夹</span></span><br><span class="line">├─templates  <span class="comment"># 文件夹</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://config.py">config.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">DATABASE_NAME = <span class="string">&#x27;01_db&#x27;</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line">DB_URI = <span class="string">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\</span><br><span class="line">    .<span class="built_in">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URI = DB_URI</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://exts.py">exts.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br></pre></td></tr></table></figure><ul><li><a href="http://models.py">models.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user_info&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>),nullable=<span class="literal">False</span>,server_default=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><a href="http://app.py">app.py</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> UserInfo</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line"></span><br><span class="line">db.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="63-使用flask-migrate迁移数据库"><a class="markdownIt-Anchor" href="#63-使用flask-migrate迁移数据库"></a> 6.3 使用Flask-Migrate迁移数据库</h2><p>之前我们更新数据库的方式是先删除表然后再创建表简单粗暴，但是会丢失掉所有原来表中的数据。做web开发的我们应该深知数据无价，所以这个时候需要数据库迁移工具来完成这个工作，<code>SQLAlcheme</code>的开发者<code>Michael Bayer</code>开发了一个数据库迁移工具—<code>Alembic</code>来实现数据库的迁移，<code>SQLAlchemy</code>翻译成汉语是炼金术，而蒸馏器（<code>Alembic</code>）正是炼金术士最需要的工具。</p><p>我们的<code>flask-sqlalchmy</code>扩展组件正是基于<code>SQLAlchemy</code>，当然<code>Flask</code>也有专门做数据库迁移的扩展组件<code>Flask-Migrate</code>，同样<code>Flask-Migrate</code>正是基于<code>Alembic</code>。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051827-500166934..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051827-500166934..png" alt="img" /></a></p><h3 id="631-flask-migrate的用法"><a class="markdownIt-Anchor" href="#631-flask-migrate的用法"></a> 6.3.1 Flask-Migrate的用法：</h3><p>1 由于<code>flask-migrate</code>是Flask的一个扩展组件，同往常一样首先在虚拟环境中安装我们的<code>flask_migrate</code>包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-migrate</span><br></pre></td></tr></table></figure><p>为了导出数据库迁移命令，Flask-Migrate提供了一个MigrateCommand类，可附加到Flask-Script的manager对象上。在这个例子中，MigrateCommand类使用db命令附加。</p><p>我们的<code>Flask_Migrate</code>的操作是在<code>shell</code>下完成的，所以要基于<code>Flask-script</code>，<code>Flask-Migrate</code>提供了一个<code>MigrateCommand</code>类，需要附加到<code>Flask-Script</code>的<code>manager</code>对象上，完成命令的创建，并且<code>Flask_Migrate</code>同时体统了<code>Migrate</code>类，需要加载核心对象<code>app</code>和数据库对象<code>db</code>。完成迁移工具的配置。</p><h4 id="示例6311配置flask_migrate"><a class="markdownIt-Anchor" href="#示例6311配置flask_migrate"></a> 示例6.3.1.1：配置Flask_Migrate</h4><p>首先在<code>实例6.2.2.1</code><a href="http://xn--manage-9v7ii2ykk5a.py">中创建manage.py</a></p><ul><li>manage.py代码如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate,MigrateCommand</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"><span class="keyword">from</span> server <span class="keyword">import</span> app</span><br><span class="line">manager = Manager(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Migrate(app,db)</span><br><span class="line"></span><br><span class="line">manager.add_command(<span class="string">&#x27;db&#x27;</span>,MigrateCommand)</span><br></pre></td></tr></table></figure><p><strong>解读：</strong></p><p><strong>（1）</strong> 首先从<code>flask_migrate</code>中导入 <code>Migrate，MigrateCommand</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate,MigrateCommand</span><br></pre></td></tr></table></figure><p><strong>（2）</strong><code>Migrate</code>加载<code>app</code>对象和<code>db</code>对象获取数据库的配置信息以及模型表信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Migrate(app,db)</span><br></pre></td></tr></table></figure><p>**（3）**把<code>MigrateCommand</code>附加到<code>manager</code>创建迁移数据库的子命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.add_command(<span class="string">&#x27;db&#x27;</span>,MigrateCommand)</span><br></pre></td></tr></table></figure><h4 id="迁移脚本命令"><a class="markdownIt-Anchor" href="#迁移脚本命令"></a> <strong>迁移脚本命令</strong></h4><p><strong>（1）</strong> <strong>创建迁移仓库</strong></p><p>首先切换到项目目录下并且切入到虚拟环境中输入命令<code>python manage.py db init</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; python manage.py db init</span><br></pre></td></tr></table></figure><p>该命令初始化我们的迁移仓库，并且在我们的项目目录中创建迁移仓库文件</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051992-1462678497..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051992-1462678497..png" alt="1549988156697" /></a></p><p><strong>（2）</strong> <strong>创建迁移脚本</strong></p><p>依然在我们的<code>shell</code>中输入命令<code>python manage.py db migrate</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; python manage.py db migrate</span><br></pre></td></tr></table></figure><p>该命令会在数据库创建一张 <code>alembic_version</code> 表，存放着数据库迁移脚本的版本信息，该命令会搜集到需要迁移的模型表信息，写入到脚本中，但是并没有真正的映射到数据库中。</p><p><strong>（3）更新数据库</strong></p><p>依然在我们的<code>shell</code>中输入命令<code>python manage.py db upgrade</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py db upgrade</span><br></pre></td></tr></table></figure><p>对于第一次迁移来说，其作用和db.create_all()方法一样，但是在随后的迁移中，upgrade命令可以把模型表改动的部分映射到数据库中，实现了一个更新的效果，并且不影响之前保存的数据。</p><p><em>提示：在首次执行这个命令之前如果该数据库的库内已经有了一些表，并且这些表没有与我们的模型映射，会自动删除掉这些表。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;61-集成python-shell&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#61-集成python-shell&quot;&gt;&lt;/a&gt; 6.1 集成Python shell&lt;/h2&gt;
&lt;figure class=&quot;highlight pyth</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>5 数据库</title>
    <link href="http://example.com/2021/01/18/flask/5%20%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://example.com/2021/01/18/flask/5%20%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2021-01-18T11:39:27.081Z</published>
    <updated>2021-01-18T14:11:37.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="51-orm"><a class="markdownIt-Anchor" href="#51-orm"></a> 5.1 ORM</h2><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222009447-565965275.gif" alt="img" /></p><p>对象关系映射（英语：<strong>(Object Relational Mapping</strong>，简称<strong>ORM</strong>，或<strong>O/RM</strong>，或<strong>O/R mapping</strong>），是一种程序技术，<strong>用于实现面向对象编程语言里不同类型系统的数据之间的转换</strong> 。</p><p>ORM是“对象-关系-映射”的简称。在我们的web应用开发中<strong>ORM把底层的SQL数据实体转化成高层的Python对象</strong>。只需要<strong>通过Python代码即可完成数据库操作</strong>。</p><h2 id="52-在flask中应用orm"><a class="markdownIt-Anchor" href="#52-在flask中应用orm"></a> 5.2 在Flask中应用ORM</h2><p>选择ORM框架时，在我们Flask中更推荐使用Flask的扩展组件<code>Flask-SQLchemy</code> 。</p><p>Python实现的ORM有<code>SQLAlchemy</code>、<code>Peewee</code>、<code>PonyORM</code>等，</p><p>其中<code>SQLAlchemy</code>是Python社区使用最广泛的ORM之一，Flask-<code>SQLchemy</code>正是基于<code>SQLchemy</code>。</p><h3 id="521-连接数据库"><a class="markdownIt-Anchor" href="#521-连接数据库"></a> 5.2.1 连接数据库</h3><p>安装 <code>Flask-SQLchemy</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><p>这里我们的<code>DBMS</code>以<code>mysql</code>数据库为例， 连接数据库</p><p><strong>示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">PORT = <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">DATABASE_NAME = <span class="string">&#x27;01_db&#x27;</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;root&#x27;</span></span><br><span class="line"></span><br><span class="line">DB_URI = <span class="string">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\</span><br><span class="line">.<span class="built_in">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]= <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><p><strong>解读：</strong></p><ol><li>从<code>flask_sqlalchemy</code>模块中导入<code>SQLAlchemy</code>类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br></pre></td></tr></table></figure><ol start="2"><li>app对象通过变量<code>SQLALCHEMY_DATABASE_URI</code>加载配置好的<code>URI</code>(统一资源标识符)，URI内包含了各种用于连接数据库的信息，指向一个具体的库。</li></ol><p><strong>常用数据库的URI格式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HOST = <span class="string">&#x27;127.0.0.1&#x27;</span>   <span class="comment"># ip</span></span><br><span class="line">PORT = <span class="string">&#x27;3306&#x27;</span>     <span class="comment"># 端口</span></span><br><span class="line">USERNAME = <span class="string">&#x27;root&#x27;</span>     <span class="comment"># 数据库账号</span></span><br><span class="line">PASSWORD = <span class="string">&#x27;root&#x27;</span>        <span class="comment"># 密码</span></span><br><span class="line">DATABASE_NAME = <span class="string">&#x27;01_db&#x27;</span>  <span class="comment"># 具体的一个库名</span></span><br><span class="line">DB_URI = <span class="string">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\</span><br><span class="line">.<span class="built_in">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br></pre></td></tr></table></figure><p><strong>3</strong> <code>SQLALCHEMY_TRACK_MODIFICATIONS</code>这个配置变量决定是否追踪对象的修改，这用于<code>FLask- SQLALchemy</code>的事件通知系统。这个配置键默认值为<code>None</code>，如果没有特殊需要我们把它设置为<code>Flase</code>, 避免造成一些没必要的性能浪费。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]= <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>4</strong> <code>SQLAlchemy</code>类传入<code>app</code>类，引用<code>app</code>配置定位到具体的数据库，并且实例化出<code>db</code>对象，这个db对象代表我们的数据库，并且通过这个对象操作我们的<code>ORM</code></p><h2 id="-code5-"><a class="markdownIt-Anchor" href="#-code5-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure></h2><h3 id="522-数据库模型"><a class="markdownIt-Anchor" href="#522-数据库模型"></a> 5.2.2 数据库模型</h3><p><strong>数据库模型</strong>： 继承了<code>db.Model</code>的python类，并且这个python类映射到数据库为一个表 。 每个数据库模型都对应着数据库中的一个表。</p><h4 id="5221-数据库模型示例"><a class="markdownIt-Anchor" href="#5221-数据库模型示例"></a> 5.2.2.1 数据库模型示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user_info&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>),nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>__tablename__</code>：</p><p>可以直接指定表名（推荐使用）。如果没有写<code>__tablename__</code></p><p>指定表名，此类名可以自动转化为表名（不推荐使用）。</p><ul><li>类名自动转化表名的方式为<code>User</code>–&gt; <code>user</code># 单个单词转换为小写<br /><code>UserInfo</code>–&gt; <code>user_info</code># 多个单词转换为小写并使用下划线分隔</li><li>如UserInfo类在没有<code>__tablename__</code>指定表名时候，UserInfo类会自动映射到数据库的表名为<code>user_info</code>。</li></ul></li><li><p><code>db.Column</code></p><p>类实例化表示字段（表示数据库中的列），该类实例化出的对象被一个变量接受，该变量表示字段名。该类实例化时传入的参数表示字段的约束。</p><ul><li>如：<code>id = db.Column(db.Integer,primary_key=True,autoincrement=True)</code>表示该表内id字段为主键并且自动增长。</li></ul></li></ul><h4 id="5223-常见的字段类型表"><a class="markdownIt-Anchor" href="#5223-常见的字段类型表"></a> 5.2.2.3 常见的字段类型表</h4><table><thead><tr><th>字段</th><th>说明</th><th>映射到数据库对应类型</th></tr></thead><tbody><tr><td>Integer</td><td>整数</td><td>int类型</td></tr><tr><td>String</td><td>字符串，<code>String</code>类内可选择<code>length</code>参数的值用于设置最大字符个数</td><td>varchar类型</td></tr><tr><td>Text</td><td>用于储存较长的Unicode文本，,理论上可以储存65535个字节</td><td>text类型</td></tr><tr><td>Date</td><td>日期，存储<code>Python</code>的<code>datetime.date</code> 对象</td><td>date类型</td></tr><tr><td>Time</td><td>时间，存储<code>Python</code>的<code>datetime.time</code> 对象</td><td>time类型</td></tr><tr><td>DateTime</td><td>时间和日期，存储<code>Python</code> 的<code>datetime</code> 对象</td><td>datetime类型</td></tr><tr><td>Float</td><td>浮点类型</td><td>float类型</td></tr><tr><td>Double</td><td>双精度浮点类型，比浮点类型小数位精度更高。</td><td>double类型，占据64位。</td></tr><tr><td>Boolean</td><td>布尔值</td><td>tinyint类型</td></tr><tr><td>Enum</td><td>枚举类型</td><td>enum类型</td></tr></tbody></table><h4 id="5224-column常用参数表"><a class="markdownIt-Anchor" href="#5224-column常用参数表"></a> 5.2.2.4 Column常用参数表</h4><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>primary_key</td><td>如果设为True，该列就是表的主键</td></tr><tr><td>unique</td><td>如果设为True，该列每个值唯一，也就是该字段不允许出现重复值</td></tr><tr><td>index</td><td>如果设为True，为这列创建索引，用于提升查询效率</td></tr><tr><td>nullable</td><td>如果设为True，这列允许使用空值，反之则不允许使用空值。</td></tr><tr><td>server_default</td><td>为这列定义默认值, 默认值只支持字符串，其他类型需要db.text()方法指定</td></tr><tr><td>default</td><td>为这列定义默认值，但是该约束并不会真正映射到表结构中，该约束只会在ORM层面实现(不推荐使用)</td></tr><tr><td>comment</td><td>该字段的注释</td></tr><tr><td>name</td><td>可以使用该参数直接指定字段名</td></tr><tr><td>autoincrement</td><td>设置这个字段为自动增长的。</td></tr></tbody></table><h5 id="server_default常用配置"><a class="markdownIt-Anchor" href="#server_default常用配置"></a> <strong>server_default常用配置</strong></h5><table><thead><tr><th>配置默认值类型</th><th>代码</th></tr></thead><tbody><tr><td>更新datatime时间</td><td>server_default = db.text(“CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP”)</td></tr><tr><td>当前的datatime时间</td><td>server_default = db.text(“CURRENT_TIMESTAMP”)</td></tr><tr><td>数字</td><td>server_default=“数字”</td></tr><tr><td>布尔</td><td>server_default=db.text(‘True’) / server_default=db.text(‘False’)/ server_default=‘数字’</td></tr></tbody></table><h4 id="5225-将写好的模型映射到数据库"><a class="markdownIt-Anchor" href="#5225-将写好的模型映射到数据库"></a> 5.2.2.5 将写好的模型映射到数据库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;user_info&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p>如果你已经定义好了模型：一个继承<code>db.Model</code>的类</p><p>想把这个模型映射到数据库中（在数据库中创建这个模型所描述的一张表）：使用<code>db.create_all()</code>可以实现把继承了该<code>db.model</code>的所有模型创建到数据库中。查看数据库的时候我们会发现多了一张<code>user_info</code>表。</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222012642-1301719010..png" alt="1549800892083" /></p><h4 id="5226-更新模型"><a class="markdownIt-Anchor" href="#5226-更新模型"></a> 5.2.2.6 更新模型</h4><p>对已存在的表的模型，使用<code>db.create_all()</code>无效</p><ol><li>先<code>db.drop_all()</code>删除该库下的所有继承了<code>db.model</code>的模型表，</li><li>然后再<code>db.create_all()</code>使得继承了<code>db.model</code>的所有模型表映射到数据库中，从而创建我们更新的表。</li></ol><p>弊端：会销毁原有的数据</p><p>解决弊端：看下一章</p><hr /><h3 id="523-数据库操作"><a class="markdownIt-Anchor" href="#523-数据库操作"></a> 5.2.3 数据库操作</h3><h4 id="5231-增"><a class="markdownIt-Anchor" href="#5231-增"></a> 5.2.3.1 增</h4><p><strong>模型表 映射到数据中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">&quot;school&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,nullable=<span class="literal">False</span>,autoincrement=<span class="literal">True</span>,comment=<span class="string">&quot;ID&quot;</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">30</span>),nullable=<span class="literal">False</span>,server_default=<span class="string">&#x27;&#x27;</span>,comment=<span class="string">&quot;学校名称&quot;</span>)</span><br><span class="line">    area = db.Column(db.String(<span class="number">30</span>),nullable=<span class="literal">False</span>,server_default=<span class="string">&#x27;&#x27;</span>,comment=<span class="string">&quot;所属地区&quot;</span>)</span><br><span class="line">    score = db.Column(db.Integer,nullable=<span class="literal">False</span>,server_default=<span class="string">&#x27;600&#x27;</span>,comment=<span class="string">&quot;录取分数线&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;School(name:&#123;&#125;)&gt;&quot;</span>.<span class="built_in">format</span>(self.name)</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure><p><strong>示例</strong> — <strong>新增四条记录映射到数据库中</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">school_01 =School(name=<span class="string">&quot;北京大学&quot;</span>,area=<span class="string">&quot;北京&quot;</span>,score=<span class="number">658</span>)  <span class="comment"># 实例化模型类作为一条记录</span></span><br><span class="line">school_02 =School(name=<span class="string">&quot;清华大学&quot;</span>,area=<span class="string">&quot;北京&quot;</span>,score=<span class="number">667</span>)</span><br><span class="line">school_03 =School(name=<span class="string">&quot;中山大学&quot;</span>,area=<span class="string">&quot;广东&quot;</span>,score=<span class="number">645</span>)</span><br><span class="line">school_04 =School(name=<span class="string">&quot;复旦大学&quot;</span>,area=<span class="string">&quot;上海&quot;</span>,score=<span class="number">650</span>)</span><br><span class="line"></span><br><span class="line">db.session.add(school_01)   <span class="comment"># 把新创建的记录添加到数据库会话</span></span><br><span class="line">db.session.add(school_02)</span><br><span class="line">db.session.add(school_03)</span><br><span class="line">db.session.add(school_04)</span><br><span class="line"></span><br><span class="line">db.session.commit()  <span class="comment"># 提交数据库会话</span></span><br></pre></td></tr></table></figure><p><em>提示：数据库会话db.session和后面介绍的Flasksession对象没有关系。db.session是数据库会话也称为事务。</em></p><ol><li>实例化模型类创建对象，该对象作为一条记录，实例化的过程传入的参数为字段内容。</li><li>把新创建的记录添加到数据库会话。</li><li>提交数据库会话</li></ol><p><strong>查看数据库</strong></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014255-1197439633..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014255-1197439633..png" alt="1549869497823" /></a></p><p><em>提示1 ：如果add多条记录可以使用add_all()一次添加包含多条记录的列表</em></p><p><em>如：<code>db.session.add_all([school_01,school_02,school_03，school_04])</code></em></p><h4 id="5232-查"><a class="markdownIt-Anchor" href="#5232-查"></a> 5.2.3.2 查</h4><p>在我们的flask中 <code>db.session</code> 出的对象调用<code>query</code>属性，可以通过query属性调用各种过滤方法完成查询。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模型类.&lt;过滤方法&gt;.&lt;查询方法&gt;</span><br></pre></td></tr></table></figure><p><strong>常用过滤器表：</strong></p><table><thead><tr><th>过滤器</th><th>说明</th></tr></thead><tbody><tr><td>filter()</td><td>使用指定的规则过滤记录相当于sql的where约束条件，返回一个新查询</td></tr><tr><td>filter_by()</td><td>同filter原理，不同的是查询的时要使用关键字参数，返回一个新查询</td></tr><tr><td>limit()</td><td>使用指定的值限制原查询返回的结果的数量，返回一个新查询</td></tr><tr><td>offset()</td><td>偏移原查询返回的结果，返回一个新查询</td></tr><tr><td>order_by()</td><td>根据指定条件对原查询结构进行排序，返回一个新查询</td></tr><tr><td>group_by()</td><td>根据指定条件对原来查询结构进行分组，返回一个新查询</td></tr></tbody></table><p><strong>示例</strong></p><p><em>下面几个查询案例需要在<code>示例 5.2.3.1</code>完成的基础上操作</em></p><p><strong>all()</strong> 返回一个列表，列表里存放所有符合条件的记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">all_school = School.query.<span class="built_in">all</span>()</span><br><span class="line">print(all_school) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：[&lt;School(name:北京大学)&gt;, &lt;School(name:清华大学)&gt;, &lt;School(name:中山大学)&gt;, &lt;School(name:复旦大学)&gt;]</span></span><br></pre></td></tr></table></figure><p>**first() **返回符合条件的第一条记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">school_01 =School.query.first()</span><br><span class="line">print(school_01)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：&lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure><p><strong>get()</strong> 返回指定主键值（id字段）的记录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">school_01 = School.query.get(<span class="number">1</span>)</span><br><span class="line">print(school_01)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：&lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure><p><strong>filter()</strong> 使用指定的规则过滤记录相当于 sql 的where约束条件，返回新产生的查询对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">beijing_all = School.query.<span class="built_in">filter</span>(School.area == <span class="string">&quot;北京&quot;</span>).<span class="built_in">all</span>()</span><br><span class="line">beijing_first = School.query.<span class="built_in">filter</span>(School.area == <span class="string">&quot;北京&quot;</span>).first()</span><br><span class="line">print(beijing_all)</span><br><span class="line">print(beijing_first)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：[&lt;School(name:北京大学)&gt;, &lt;School(name:清华大学)&gt;]</span></span><br><span class="line"><span class="comment">#       &lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure><p><strong>filter_by</strong>：同filter()效果一样，查询的时候使用关键字参数查询（无法进行多表复杂查询，不推荐使用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhongshan_school = School.query.filter_by(name=<span class="string">&#x27;中山大学&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line">print(zhongshan_school)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：[&lt;School(name:中山大学)&gt;]</span></span><br></pre></td></tr></table></figure><p><strong><code>db.session.qury(模型类)</code>等价于<code>模型类.query</code>，db.session.query功能更强大一些，可以进行多表查询。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fudan_school = School.query.<span class="built_in">filter</span>(School.name == <span class="string">&#x27;复旦大学&#x27;</span>).first()</span><br><span class="line">print(fudan_school)  </span><br><span class="line"><span class="comment"># 输出：&lt;School(name:复旦大学)&gt;</span></span><br><span class="line"></span><br><span class="line">fudan_school = db.session.query(School).<span class="built_in">filter</span>(School.name == <span class="string">&#x27;复旦大学&#x27;</span>).first()</span><br><span class="line">print(fudan_school)</span><br><span class="line"><span class="comment"># 输出：&lt;School(name:复旦大学)&gt;</span></span><br></pre></td></tr></table></figure><p><em>提示：其他的过滤器会在接下来的章节具体根据实际案例讲解</em></p><h4 id="5233-改"><a class="markdownIt-Anchor" href="#5233-改"></a> 5.2.3.3 改</h4><p><strong>示例</strong></p><p><strong>修改北京大学的录取成绩</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beida = School.query.<span class="built_in">filter</span>(School.name==<span class="string">&#x27;北京大学&#x27;</span>).first()</span><br><span class="line">beida.score = <span class="number">630</span></span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014677-1830233725..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014677-1830233725..png" alt="1549872535950" /></a></p><p>更新一条记录分为一下几部：</p><ol><li><p>找到对应的记录对象</p></li><li><p>修改记录对象的属性</p></li><li><p>直接调用<code>db.session.commit()</code>提交会话</p><p><em>提示：只有要插入新的记录或要将现有的记录添加到会话中时才需要使用add（）方法。只是更新现有记录的时可以修改记录对象属性后直接提交会话</em></p></li></ol><h4 id="5234-删"><a class="markdownIt-Anchor" href="#5234-删"></a> 5.2.3.4 删</h4><p><strong>示例</strong></p><p><strong>从数据库中删除清华大学相关信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qinghua = School.query.<span class="built_in">filter</span>(School.name==<span class="string">&#x27;清华大学&#x27;</span>).first()</span><br><span class="line">db.session.delete(qinghua)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222015098-425693015..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222015098-425693015..png" alt="1549872948198" /></a></p><p>删除一条记录分为以下几步：</p><ol><li>找到对应的记录对象</li><li>需要调用<code>delete()</code>方法在会话中标识需要删除的记录，具体是把该记录对象传入<code>db.session.delete(记录对象)</code>实现标识。</li><li>调用<code>db.session.commit()</code>提交会话。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;51-orm&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#51-orm&quot;&gt;&lt;/a&gt; 5.1 ORM&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/1825659/201910/1</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>3 flask视图</title>
    <link href="http://example.com/2021/01/18/flask/3%20flask%E8%A7%86%E5%9B%BE/"/>
    <id>http://example.com/2021/01/18/flask/3%20flask%E8%A7%86%E5%9B%BE/</id>
    <published>2021-01-18T11:39:27.076Z</published>
    <updated>2021-01-18T14:11:54.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="31-http请求"><a class="markdownIt-Anchor" href="#31-http请求"></a> 3.1 HTTP请求</h2><h3 id="311-请求报文-和-响应报文"><a class="markdownIt-Anchor" href="#311-请求报文-和-响应报文"></a> 3.1.1 请求报文 和 响应报文</h3><ul><li>请求报文：请求时浏览器发送的数据称为请求报文</li><li>响应报文：服务器收到了请求返回给浏览器的数据称为响应报文</li></ul><p>报文中的GET请求 和 POST请求</p><ul><li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如<code>EditBook?name=test1&amp;id=123456</code></li><li>POST方法是把提交的数据放在HTTP包的请求体中.</li><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制）</li><li>POST方法提交的数据没有限制。</li><li>GET与POST请求在服务端获取请求数据方式不同。</li></ul><p>报文示例：</p><h2 id="-code0-"><a class="markdownIt-Anchor" href="#-code0-"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">GET请求报文</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 请求首行</span></span><br><span class="line">GET / HTTP/<span class="number">1.1</span>\r\n</span><br><span class="line"><span class="comment"># get请求后面的参数</span></span><br><span class="line">GET /?name=lqz&amp;age=18 HTTP/1.1\r\n</span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8008</span>\r\n</span><br><span class="line">Connection: keep-alive\r\n</span><br><span class="line">Cache-Control: <span class="built_in">max</span>-age=<span class="number">0</span>\r\n</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span>\r\n</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">6.1</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">65.0</span><span class="number">.3325</span><span class="number">.181</span> Safari/<span class="number">537.36</span>\r\n</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*/*;q=<span class="number">0.8</span>\r\nAccept-Encoding: gzip, deflate, br\r\n</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>\r\n</span><br><span class="line">Cookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\r\n\r\n<span class="string">&#x27;</span></span><br><span class="line"><span class="string"># 请求体（get请求，请求体为空）    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">POST请求报文</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 请求首行</span></span><br><span class="line"><span class="string">POST /?name=lqz&amp;age=18 HTTP/1.1\r\n</span></span><br><span class="line"><span class="string"># 请求头</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:8008\r\nConnection: keep-alive\r\n</span></span><br><span class="line"><span class="string">Content-Length: 21\r\nCache-Control: max-age=0\r\n      </span></span><br><span class="line"><span class="string">Origin: http://127.0.0.1:8008\r\nUpgrade-Insecure-Requests: 1\r\n</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded\r\n</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\r\n        Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nReferer: http://127.0.0.1:8008/?name=lqz&amp;age=18\r\n</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate, br\r\nAccept-Language: zh-CN,zh;q=0.9\r\nCookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\r\n\r\n</span></span><br><span class="line"><span class="string"># 请求体</span></span><br><span class="line"><span class="string">name=lqz&amp;password=123&#x27;</span></span><br><span class="line"><span class="string">    </span></span><br></pre></td></tr></table></figure></h2><h3 id="312-request对象"><a class="markdownIt-Anchor" href="#312-request对象"></a> 3.1.2 request对象</h3><p>request对象封装解析了请求报文中的数据，其大部分功能是由依赖包werkzeug完成的，并且<strong>每个request对象都是线程隔离的，保证了数据的安全性</strong>。</p><h4 id="3121-request对象常用方法"><a class="markdownIt-Anchor" href="#3121-request对象常用方法"></a> 3.1.2.1 request对象常用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br></pre></td></tr></table></figure><h4 id="3122-使用request属性获取url"><a class="markdownIt-Anchor" href="#3122-使用request属性获取url"></a> 3.1.2.2 使用request属性获取url</h4><p>​访问: <a href="http://127.0.0.1:5000/student_list/?name=mark">http://127.0.0.1:5000/student_list/?name=mark</a> :</p><p>​ <strong>表2-1 使用request</strong>的属性获取<strong>url</strong></p><table><thead><tr><th>属性</th><th>解析值</th><th>属性</th><th>解析值</th></tr></thead><tbody><tr><td>path</td><td>u‘/student_list/’</td><td>base_url</td><td>u’<a href="http://127.0.0.1:5000/student_list/">http://127.0.0.1:5000/student_list/</a>’</td></tr><tr><td>full_path</td><td>u‘/student_list/?name=mark’</td><td>url</td><td>u’<a href="http://127.0.0.1:5000/student_list/?name=mark">http://127.0.0.1:5000/student_list/?name=mark</a>’</td></tr><tr><td>host</td><td>u’127.0.0.1:5000’</td><td>url_root</td><td>u’<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>’</td></tr><tr><td>host_url</td><td>u’<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>’</td><td></td><td></td></tr></tbody></table><p>request的解析结果如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_list/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_list</span>():</span></span><br><span class="line">    print(request.path)          <span class="comment"># 输出 /student_list/</span></span><br><span class="line">    print(request.full_path)     <span class="comment"># 输出 /student_list/?name=mark</span></span><br><span class="line">    print(request.host)          <span class="comment"># 输出 127.0.0.1:5000</span></span><br><span class="line">    print(request.host_url)      <span class="comment"># 输出 http://127.0.0.1:5000/</span></span><br><span class="line">    print(request.base_url)      <span class="comment"># 输出 http://127.0.0.1:5000/student_list/</span></span><br><span class="line">    print(request.url)           <span class="comment"># 输出 http://127.0.0.1:5000/student_list/?name=mark</span></span><br><span class="line">    print(request.url_root)      <span class="comment"># 输出 http://127.0.0.1:5000/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;request.urldemo测试&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3123-其他request对象常用的属性和方法"><a class="markdownIt-Anchor" href="#3123-其他request对象常用的属性和方法"></a> 3.1.2.3  其他request对象常用的属性和方法。</h4><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222230423-1742169751.png" alt="" /></p><h3 id="313-get-和-post"><a class="markdownIt-Anchor" href="#313-get-和-post"></a> 3.1.3 GET 和 POST：</h3><h4 id="3131-常见的http方法"><a class="markdownIt-Anchor" href="#3131-常见的http方法"></a> 3.1.3.1 常见的HTTP方法</h4><table><thead><tr><th>请求</th><th>说明</th><th>请求</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>获取服务器资源</td><td>DELETE</td><td>删除服务器资源</td></tr><tr><td>POST</td><td>处理服务器资源</td><td>PATCH</td><td>在服务器更新资源（客户端提供改变的属性）</td></tr><tr><td>PUT</td><td>在服务器更新资源（客户端提供改变后的完整资源）</td><td></td><td></td></tr></tbody></table><p>一般常用的请求为GET和POST</p><h4 id="3132-get请求"><a class="markdownIt-Anchor" href="#3132-get请求"></a> 3…1.3.2 <code>GET</code>请求</h4><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222432221-608582097.jpg" alt="" /></p><p><strong>GET请求一般用于在服务器上获取资源，不会更改服务器的状态。</strong></p><p><strong>GET示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)  </span><span class="comment"># 不写methods也可以 默认就接收get请求</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_get</span>():</span></span><br><span class="line">    print(request.args.get(<span class="string">&#x27;name&#x27;</span>))  <span class="comment"># 输出 mark</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;请求&#x27;</span>.<span class="built_in">format</span>(request.method)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li>使用request.args属性获取get传来的参数</li><li>@app.route(’/’, methods=[‘GET’]) 指定浏览器只能以GET方法访问服务端。</li></ul><hr /><h4 id="3133-post请求"><a class="markdownIt-Anchor" href="#3133-post请求"></a> 3.1.3.3 <code>POST</code>请求：</h4><p><strong>POST 请求: 会给服务器提交一些数据或者文件，会对服务器的状态产生影响。</strong></p><p>在了解POST请求之前我们先了解一下render_termplate</p><h5 id="31331-render_template的简单使用"><a class="markdownIt-Anchor" href="#31331-render_template的简单使用"></a> 3.1.3.3.1 render_template的简单使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br></pre></td></tr></table></figure><p>我们暂时只简单的理解render_template模块可以把html文件返回给浏览器并渲染。</p><p>如：</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222510737-1061015223.png" alt="" /></p><p><strong><a href="http://server.py">server.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li><p>render_template()会去flask根目录下的templates里面寻找文件，所以给的参数路径是相对路径。</p></li><li><p>render_template()中放的文件路径是与templates文件夹相对的路径</p></li></ul><p><strong>templates/login.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login_request/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>:</p><ul><li><p>form标签的<code>action</code>指定的是跳转的页面。并且会自动拼接成http://127.0.0.1:5000/login_request/</p><p>也就是本项目的: ip地址+端口+/login_request/</p></li><li><p>form标签的<code>method</code>指定的是以什么方法请求服务端，此案例中请求的方法为POST方法。</p></li></ul><p>访问127.0.0.1:5000/login/ 后如下图</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222556143-340794981.png" alt="" /></p><h5 id="31332-post案例"><a class="markdownIt-Anchor" href="#31332-post案例"></a> 3.1.3.3.2 POST案例：</h5><p><strong>项目目录：</strong></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222621609-1621658602.png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222621609-1621658602.png" alt="img" /></a></p><p><strong><a href="http://server.py">server.py</a></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login_request/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_request</span>():</span></span><br><span class="line">    print(request.form.get(<span class="string">&#x27;username&#x27;</span>))  <span class="comment"># &#x27;mark&#x27;</span></span><br><span class="line">    print(request.form.get(<span class="string">&#x27;password&#x27;</span>))  <span class="comment"># &#x27;123&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.form.get(<span class="string">&#x27;username&#x27;</span>) == <span class="string">&#x27;mark&#x27;</span> <span class="keyword">and</span> request.form.get(<span class="string">&#x27;password&#x27;</span>) == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li>request.form是专门用来针对表单取数据的，在这里如果前端是以表单的形式提交的，我们可以使用request.form来取值</li><li>@app.route() 中的 methods=[‘POST’] 代表只接收浏览器的POST请求</li></ul><p><strong>templates/login.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login_request/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222657669-1682091996.png" alt="" /></p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222717747-459163041.png" alt="" /></p><p>总体的逻辑是 :</p><ol><li>首先访问127.0.0.1:5000/login/，默认是get请求。</li><li>然后<code>return render_template('login.html')</code> 返回给浏览器页面。</li><li>然后填写内容点击提交，以post方式请求 <a href="http://127.0.0.1:5000/login_request/%E3%80%82">http://127.0.0.1:5000/login_request/。</a></li><li>然后进入<code>def login_request()</code>视图函数 进行逻辑判断返回成功与否。</li></ol><h3 id="314-一个视图函数同时可以接收get和post请求"><a class="markdownIt-Anchor" href="#314-一个视图函数同时可以接收get和post请求"></a> 3.1.4 一个视图函数同时可以接收GET和POST请求</h3><p>我们的案例和3.3.2案例完成的业务逻辑是一样的，相当于简化了3.3.2的案例，把两个视图函数合并到一起，利用<code>request.method</code>属性可以获取字符串格式的请求方法。来区分本次请求是GET还是POST</p><p><strong><a href="http://server.py">server.py</a></strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login_inner/&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_inner</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>: <span class="comment">#判断本次请求是否为get请求</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.form.get(<span class="string">&#x27;username&#x27;</span>) == <span class="string">&#x27;mark&#x27;</span> <span class="keyword">and</span> request.form.get(<span class="string">&#x27;password&#x27;</span>) == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ul><li><code>@app.route()</code>的<code>methods</code>方法 指定该视图函数接收浏览器传过来的请求方法，可以指定多个。</li><li><code>request.method</code>获取字符串格式的请求方法</li></ul><p><strong>templates/login.html</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录界面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span>  </span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其展示效果</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222809137-31438223.png" alt="" /></p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222826146-1144854374.png" alt="" /></p><h2 id="32-视图函数-和-视图类"><a class="markdownIt-Anchor" href="#32-视图函数-和-视图类"></a> 3.2 视图函数 和 视图类</h2><h3 id="321-视图函数"><a class="markdownIt-Anchor" href="#321-视图函数"></a> 3.2.1 视图函数</h3><h4 id="3211-endpoint-别名"><a class="markdownIt-Anchor" href="#3211-endpoint-别名"></a> 3.2.1.1 endpoint 别名</h4><p><code>endpint</code>参数是写在注册路由的装饰器中的一个参数，学名叫端点，我们可以理解为函数的别名。</p><p>原来我们翻转视图函数的<code>url</code>的时候是直接通过是如函数的名字，如<code>url_for('函数名')</code>，</p><p>现在我们可以指定一个<code>endpoint='fbv'</code>参数来进行翻转<code>url</code>。如果不指定endpoint,默认就以函数名作为端点名。</p><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/fbvtest/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>],endpoint=<span class="string">&#x27;fbv&#x27;</span></span>)  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fbvtest</span>():</span></span><br><span class="line">    url_demo = url_for(<span class="string">&#x27;fbv&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;利用视图函数别名翻转的url为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(url_demo)</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223137828-581237383.png" alt="" /></p><p><strong>注</strong>：</p><ul><li>利用<code>@app.route()</code> 的<code>endpoint='fbv'</code>参数可以自由指定端点名，url_for可以根据指定的端点名进行翻转。</li></ul><h4 id="3212-装饰器注册路由源码浅析"><a class="markdownIt-Anchor" href="#3212-装饰器注册路由源码浅析"></a> 3.2.1.2 装饰器注册路由源码浅析</h4><p><strong>（1）</strong> 首先写一个小视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册装饰器的原理</span></span><br><span class="line"><span class="comment">#1 v = app.route(&#x27;/source_code_demo/&#x27;,endpoint=&#x27;source_code&#x27;)</span></span><br><span class="line"><span class="comment">#2 v(source_code_demo)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source_code_demo/&#x27;</span>,endpoint=<span class="string">&#x27;source_code&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">source_code_demo</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;source_code_demo&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>（2）</strong> 查看<code>app.route()</code>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">... </span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">route</span>(<span class="params">self, rule, **options</span>):</span></span><br><span class="line">   ...</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">f</span>):</span></span><br><span class="line">               endpoint = options.pop(<span class="string">&#x27;endpoint&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">               self.add_url_rule(rule, endpoint, f, **options)</span><br><span class="line">               <span class="keyword">return</span> f</span><br><span class="line">           <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure><p>解析：</p><ul><li>，发现<code>route()</code>返回的是<code>decorator</code>函数地址，然后基于语法糖和装饰器的原理，decorator会加括号运行，像这样<code>decorator(source_code_demo)</code></li><li><code>decorator</code>函数中首先取出<code>endpoint</code>，然后运行<code>self.add_url_rule(rule, endpoint, f, **options)</code></li><li><strong>所以</strong> <code>self.add_url_rule(rule, endpoint, f, **options)</code><strong>就是注册路由的核心</strong></li></ul><p><strong>（3）</strong> 点进<code>self.add_url_rule(rule, endpoint, f, **options)</code>查看源码,</p><p>再点进<code>_endpoint_from_view_func(view_func)</code>查看源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line"><span class="meta">@setupmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_url_rule</span>(<span class="params">self, rule, endpoint=<span class="literal">None</span>, view_func=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                   provide_automatic_options=<span class="literal">None</span>, **options</span>):</span></span><br><span class="line">      </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> endpoint <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          endpoint = _endpoint_from_view_func(view_func)</span><br><span class="line">      options[<span class="string">&#x27;endpoint&#x27;</span>] = endpoint</span><br><span class="line">      methods = options.pop(<span class="string">&#x27;methods&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># if the methods are not given and the view_func object knows its</span></span><br><span class="line">      <span class="comment"># methods we can use that instead.  If neither exists, we go with</span></span><br><span class="line">      <span class="comment"># a tuple of only ``GET`` as default.</span></span><br><span class="line">      <span class="keyword">if</span> methods <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          methods = <span class="built_in">getattr</span>(view_func, <span class="string">&#x27;methods&#x27;</span>, <span class="literal">None</span>) <span class="keyword">or</span> (<span class="string">&#x27;GET&#x27;</span>,)</span><br><span class="line">          </span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_endpoint_from_view_func</span>(<span class="params">view_func</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Internal helper that returns the default endpoint for a given</span></span><br><span class="line"><span class="string">    function.  This always is the function name.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> view_func <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, <span class="string">&#x27;expected view func if endpoint &#x27;</span> \</span><br><span class="line">                                  <span class="string">&#x27;is not provided.&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> view_func.__name__</span><br></pre></td></tr></table></figure><p>解析：</p><ul><li>由上述代码我们可以直到如果没有指定<code>endpoint</code>，我们调用了 <code>_endpoint_from_view_func（）</code></li><li>观察<code>_endpoint_from_view_func</code>函数我们可以知道，返回了视图函数的名字给了<code>endpoint</code>赋值</li><li><code>methos</code>没有指定会给methos赋默认值<code>('GET',)</code></li></ul><p><strong>小结：</strong></p><ol><li><code>self.add_url_rule(rule, endpoint, f, options)</code>就是注册路由的核心</li><li>观察<code>_endpoint_from_view_func</code>函数我们可以知道，返回了视图函数的名字给了<code>endpoint</code>赋值</li><li><code>methos</code>没有指定会给<code>methods</code>赋默认值<code>('GET',)</code></li></ol><h4 id="3213-另一种注册路由的方式-appadd_url_rule"><a class="markdownIt-Anchor" href="#3213-另一种注册路由的方式-appadd_url_rule"></a> 3.2.1.3 另一种注册路由的方式 —— app.add_url_rule()</h4><p>通过看上一个小节写的源码，现在我们知道了app.route() 的核心就是<code>self.add_url_rule(rule, endpoint, f, options)</code>就是注册路由的核心。所以我们可以直接使用<code>app.add_url_rule()</code>的方式来注册路由。</p><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_url_test</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;实现了add_url方式注册路由&#x27;</span></span><br><span class="line">                 <span class="comment"># url                       端点                 函数地址</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/add_url_test/&#x27;</span>,endpoint=<span class="string">&#x27;add_demo&#x27;</span>,view_func=add_url_test)</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223409813-960893827.png" alt="" /></p><h4 id="3214-视图函数中添加自定义装饰器"><a class="markdownIt-Anchor" href="#3214-视图函数中添加自定义装饰器"></a> 3.2.1.4 视图函数中添加自定义装饰器</h4><p>我们在平时的开发的过程中，很多需要权限验证的功能需要用到装饰器，下面的代码是如何在flask中实现一个装饰器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span>  wraps</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_verify</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        user_name = request.args.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_name == <span class="string">&#x27;mark&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;请登录&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/my_info/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_info</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;个人信息页面&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：</p><ol><li><p>装饰器一定要写在注册路由的下面，写在视图函数的上面。</p></li><li><p>装饰器内部一定要使用<code>@wraps(func)</code>方法，用于保护被装饰函数的属性。</p><p><em><strong>它能保留原有函数的名称和docstring</strong></em></p></li></ol><h3 id="322-视图类"><a class="markdownIt-Anchor" href="#322-视图类"></a> 3.2.2 视图类</h3><h4 id="3221-视图类的基本写法"><a class="markdownIt-Anchor" href="#3221-视图类的基本写法"></a> 3.2.2.1 视图类的基本写法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, views, request, url_for</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_verify</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        user_name = request.args.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_name == <span class="string">&#x27;mark&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;请登录&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBVTest</span>(<span class="params">views.MethodView</span>):</span></span><br><span class="line">    methods = [<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]  <span class="comment"># 指定可以接收的方法有什么,可传list(),set()类型</span></span><br><span class="line">    decorators = [login_verify,]  <span class="comment"># 指定自定义的装饰器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(url_for(<span class="string">&#x27;cbvtest&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;cbv_get&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;cbv_post&#x27;</span></span><br><span class="line">    </span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/cbvtest&#x27;</span>,view_func=CBVTest.as_view(name=<span class="string">&#x27;cbvtest&#x27;</span>),endpoint=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>讲解：</p><ol><li><p>首先从flask中导入 <code>views</code></p></li><li><p>写一个类一定要继承 <code>views.MethodView</code></p></li><li><p>在类中写<code>methods = ['GET','POST']</code> 可以指定可接受的请求类型</p></li><li><p>在类中写<code>decorators = [login_verify,]</code>可以指定装饰器，第一个装饰器是最里层函数依次往后包裹</p></li><li><p>在类中写<code>def get(self):</code>用于获取get请求</p></li><li><p>在类中写<code>def post(self):</code>用于获取post请求</p></li><li><p>添加路由的方法使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.add_url_rule(<span class="string">&#x27;路由&#x27;</span>,view_func=CBVTest.as_view(name=<span class="string">&#x27;自定义一个端点名字&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol><p>其原理是<code>CBVTest.as_view(name='自定义一个端点名字')</code>会返回一个函数，name是为这个函数命的名字，可以通过这个函数进行分发请求等操作。</p><h4 id="323-详解注册路由的参数"><a class="markdownIt-Anchor" href="#323-详解注册路由的参数"></a> 3.2.3 详解注册路由的参数</h4><h4 id="常用的参数"><a class="markdownIt-Anchor" href="#常用的参数"></a> 常用的参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route和app.add_url_rule参数:</span></span><br><span class="line">    </span><br><span class="line">rule, URL规则</span><br><span class="line">view_func, 视图函数名称</span><br><span class="line">endpoint = <span class="literal">None</span>, 名称，用于反向生成URL，即： url_for(<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">methods = <span class="literal">None</span>, 允许的请求方式，如：[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="不常用的参数"><a class="markdownIt-Anchor" href="#不常用的参数"></a> 不常用的参数</h4><p><strong>（1）</strong> 对URL最后的 / 符号是否严格要求 <code>strict_slashes = False</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">strict_slashes = <span class="literal">False</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index&#x27;, strict_slashes=False)</span></span><br><span class="line"><span class="string">        #访问http://www.xx.com/index/ 或http://www.xx.com/index均可</span></span><br><span class="line"><span class="string">        @app.route(&#x27;/index&#x27;, strict_slashes=True)</span></span><br><span class="line"><span class="string">        #仅访问http://www.xx.com/index</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>（2）</strong> 重定向到指定地址<code>redirect_to=“ ”</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>,redirect_to=<span class="string">&#x27;/home/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;根路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/home/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_demo</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;home路径&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>（3）</strong> 为函数提供默认参数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults = <span class="literal">None</span>, 默认值, 当URL中无参数，函数需要参数时，使用defaults = &#123;<span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;v&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>**（4）**子域名设置<code>subdomain=“ ”</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">先在hosts设置域名解析(就是在本机的hosts文件上编辑上域名对应ip的关系) </span></span><br><span class="line"><span class="string">域名解析会先解析本地如果没有再解析dns服务器</span></span><br><span class="line"><span class="string">C:\Windows\System32\drivers\etc\hosts</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">127.0.0.1 mark.com</span></span><br><span class="line"><span class="string">127.0.0.1 admin.mark.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SERVER_NAME&#x27;</span>] = <span class="string">&#x27;mark.com:5000&#x27;</span> <span class="comment"># 这个代表访问这个域名的时候要访问5000端口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;设置域名成功&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin_demo/&quot;</span>,subdomain=<span class="string">&#x27;admin&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin_demo</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;设置子域名成功&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">在浏览器中访问主域名</span></span><br><span class="line"><span class="string">mark.com:5000/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在浏览器中访问子域名</span></span><br><span class="line"><span class="string">admin.mark.com:5000/admin_demo/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：后面跟的path路径部分正常写</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">5000</span>) <span class="comment"># 测试服务器不稳定，尽量手动制定ip和端口</span></span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223624037-1211906551.png" alt="" /></p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223643974-105951200.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;31-http请求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#31-http请求&quot;&gt;&lt;/a&gt; 3.1 HTTP请求&lt;/h2&gt;
&lt;h3 id=&quot;311-请求报文-和-响应报文&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>2 flask注册路由</title>
    <link href="http://example.com/2021/01/18/flask/2%20flask%E6%B3%A8%E5%86%8C%E8%B7%AF%E7%94%B1/"/>
    <id>http://example.com/2021/01/18/flask/2%20flask%E6%B3%A8%E5%86%8C%E8%B7%AF%E7%94%B1/</id>
    <published>2021-01-18T11:39:27.072Z</published>
    <updated>2021-01-18T14:12:01.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="21-url的组成"><a class="markdownIt-Anchor" href="#21-url的组成"></a> 2.1 URL的组成</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scheme:// host:port/      path/         ?parameter=xxx#anchor</span><br><span class="line">https://  www.baidu.com/  Public/linux/ ?fr=aladdin#23</span><br></pre></td></tr></table></figure><ul><li>scheme：代表的是访问的协议，一般为http或者https以及ftp等。</li><li>host：主机名，域名，<a href="http://xn--www-eo8er22f.baidu.com">比如www.baidu.com</a>。</li><li>port：端口号。当你访问一个网站的时候，浏览器默认使用80端口。</li><li>path：路径。比如：<a href="http://www.baidu.com/Public/linux/?python=aladdin#23%EF%BC%8Cwww.baidu.com%E5%90%8E%E9%9D%A2%E7%9A%84Public/linux%E5%B0%B1%E6%98%AFpath%E3%80%82">www.baidu.com/Public/linux/?python=aladdin#23，www.baidu.com后面的Public/linux就是path。</a></li><li>query-string：查询字符串，比如：<a href="http://www.baidu.com/s?wd=python%EF%BC%8C%EF%BC%9F%E5%90%8E%E9%9D%A2%E7%9A%84python=aladdin%E5%B0%B1%E6%98%AF%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82">www.baidu.com/s?wd=python，？后面的python=aladdin就是查询字符串。</a></li><li>anchor：锚点，后台一般不用管，前端用来做页面定位的。比如：<a href="https://www.oldboyedu.com/Public/linux/?fr=aladdin#23">https://www.oldboyedu.com/Public/linux/?fr=aladdin#23</a> ,#后面的23就是锚点</li></ul><h2 id="22-url与路由的区别"><a class="markdownIt-Anchor" href="#22-url与路由的区别"></a> 2.2 URL与路由的区别</h2><p>路由是根据url定位到具体的pyhon类或python函数的程序，这段程序我们称之为路由。</p><p>在Flask程序中使用路由我们称之为<strong>注册路由</strong>，是使用程序实例提供的<strong>app.route（）<strong>装饰器注册路由，而</strong>括号内</strong>的字符串就是<strong>url</strong>，<strong>注册路由的过程就是完成了 url和python类或函数映射的过程</strong>，可以理解为会有一张表保存了url与python类或函数的对应关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="23-url传参的两种"><a class="markdownIt-Anchor" href="#23-url传参的两种"></a> 2.3  url传参的两种</h2><h3 id="231-动态路由传参"><a class="markdownIt-Anchor" href="#231-动态路由传参"></a> 2.3.1 动态路由传参</h3><p>URL中包含可变的部分，如：</p><p>​根据学生的id找到具体的学生，<a href="http://127.0.0.1:5000/student_list/">http://127.0.0.1:5000/student_list/</a>&lt;student_id&gt;/</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_list/&lt;student_id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_list</span>(<span class="params">student_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;学生&#123;&#125;号的信息&#x27;</span>.<span class="built_in">format</span>(student_id)</span><br></pre></td></tr></table></figure><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009220908482-1110597384.png" alt="" /></p><h4 id="2311-动态路由过滤"><a class="markdownIt-Anchor" href="#2311-动态路由过滤"></a> 2.3.1.1 动态路由过滤**</h4><p>可以对参数限定数据类型，比如上面的文章详情，限定student_id必须为整数类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_list/&lt;int:student_id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_detail</span>(<span class="params">student_id</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;学生&#123;&#125;号的信息&#x27;</span>.<span class="built_in">format</span>(student_id)</span><br></pre></td></tr></table></figure><p><strong>主要有这几种类型过滤：</strong></p><p><code>string</code>: 默认的数据类型，接收没有任何斜杠&quot;\ /&quot;的字符串</p><p><code>int</code>: 整型</p><p><code>float</code>: 浮点型</p><p><code>path</code>: 和string类型相似，但是接受斜杠，如：可以接受参数/aa/bb/cc/多条放在一起</p><p><code>uuid</code>: 只接受uuid格式的字符串字符串，</p><p><strong>注</strong>：uuid为全宇宙唯一的串</p><p><code>any</code>: 可以<strong>指定多种路径</strong></p><p>​url_path的变量名是自己定义的，可选：student，class</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可访问 127.0.0.1/student/1/ 或 127.0.0.1/class/1/ </span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;any(student,class):url_path&gt;/&lt;id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">item</span>(<span class="params">url_path, <span class="built_in">id</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> url_path == <span class="string">&#x27;student&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;学生&#123;&#125;详情&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;班级&#123;&#125;详情&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><h3 id="232-查询字符串传参"><a class="markdownIt-Anchor" href="#232-查询字符串传参"></a> 2.3.2 查询字符串传参</h3><p>查询字符串：</p><p><a href="http://xn--www-eo8e.baidu.com/s?wd=python&amp;ad=flask%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C">如www.baidu.com/s?wd=python&amp;ad=flask的参数，</a> <code>？</code> 后的key=value便是查询字符串， 可以写多个key=value用<code>&amp;</code>相连</p><p>从<code>flask</code>模块里面导入<code>request</code>对象，用<code>request.args</code>属性在我们的程序中根据查询字符串的<code>key</code>取出查询字符串的<code>value</code>。</p><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求url: 127.0.0.1:5000/student_name/?name=mark&amp;age=18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_name/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">school_name_list</span>():</span></span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    age = request.args.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;学生的姓名为&#123;&#125;，年龄为&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, age)</span><br></pre></td></tr></table></figure><h2 id="24-url_for的使用"><a class="markdownIt-Anchor" href="#24-url_for的使用"></a> 2.4 url_for的使用</h2><h3 id="241-url_for的作用"><a class="markdownIt-Anchor" href="#241-url_for的作用"></a> 2.4.1 url_for()的作用：</h3><p>url的反向查询</p><p>应对：即便改动url，也能追踪到改URL</p><h3 id="242-url_for的原理"><a class="markdownIt-Anchor" href="#242-url_for的原理"></a> 2.4.2 url_for()的原理：</h3><p>利用视图函数名字一般不会改变的特性，利用视图函数的<code>名字</code>去动态精准的获取url，以便于开发使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for(<span class="string">&#x27;视图函数名字&#x27;</span>)   <span class="comment"># 输出该视图函数url</span></span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.update(DEBUG=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo1</span>():</span></span><br><span class="line">    print(url_for(<span class="string">&quot;book&quot;</span>))  <span class="comment"># 注意这个引用的是视图函数的名字 为字符串格式</span></span><br><span class="line">    print(<span class="built_in">type</span>(url_for(<span class="string">&quot;book&quot;</span>)))</span><br><span class="line">    <span class="keyword">return</span> url_for(<span class="string">&quot;book&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/book_list/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">book</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;flask_book&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ ==  <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h3 id="243-url_for-处理动态的视图函数动态路由"><a class="markdownIt-Anchor" href="#243-url_for-处理动态的视图函数动态路由"></a> 2.4.3 url_for 处理动态的视图函数（动态路由）</h3><p>想获取动态路由，必须<strong>以关键字实参的形式 为动态的path部分赋值</strong>，注意动态的path部分必须被赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo2/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo2</span>():</span></span><br><span class="line">    student_url = url_for(<span class="string">&#x27;student&#x27;</span>, <span class="built_in">id</span>=<span class="number">5</span>, name=<span class="string">&#x27;mark&#x27;</span>) <span class="comment"># id 就是动态path的key 必须赋值，# name 将作为查询字符串传入</span></span><br><span class="line">    print(student_url)</span><br><span class="line">    <span class="keyword">return</span> student_url</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student/&lt;int:id&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;student &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制台输出：</span></span><br><span class="line">/student/5/?name=mark</span><br></pre></td></tr></table></figure><h3 id="244-url_for为url添加查询字符串"><a class="markdownIt-Anchor" href="#244-url_for为url添加查询字符串"></a> 2.4.4  url_for为url添加查询字符串</h3><p>想在路径后面拼出来查询字符串，以关键字实参的形式放到url_for()里面作为参数，会自动拼成路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo3/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo3</span>():</span></span><br><span class="line">    school_url = url_for(<span class="string">&#x27;school&#x27;</span>, school_level=<span class="string">&#x27;high&#x27;</span>, name=<span class="string">&#x27;college&#x27;</span>) </span><br><span class="line">    <span class="comment"># 具体要拼接的查询参数 以关键字实参的形式写在url_for里</span></span><br><span class="line">    print(school_url)</span><br><span class="line">    <span class="keyword">return</span> school_url</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/school/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">school</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;school message&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制台输出：</span></span><br><span class="line">/school/?school_level=high&amp;name=college</span><br></pre></td></tr></table></figure><h3 id="245-自定义动态路由过滤器之正则匹配"><a class="markdownIt-Anchor" href="#245-自定义动态路由过滤器之正则匹配"></a> 2.4.5  自定义动态路由过滤器之正则匹配</h3><p>通过继承<code>werkzeug.routing 的BaseConverter</code>类从而自己定义一个动态路由过滤器的规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug =<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TelephoneConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line">    regex = <span class="string">&#x27;1[3857]\d&#123;9&#125;&#x27;</span> <span class="comment">#右下斜杠d</span></span><br><span class="line"></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;tel&#x27;</span>] = TelephoneConverter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student/&lt;tel:telenum&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_detail</span>(<span class="params">telenum</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;学生的手机号码是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(telenum)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ol><li><p>自定义动态路由过滤器类，该类必须继承<code>werkzeug.routing</code> 的<code>BaseConverter</code>类</p></li><li><p>通过<code>regex</code>属性指定路由规则</p></li><li><p>讲自定义的类映射到<code>app.url_map.converters</code>中（其本质是一个字典）</p><p><code>app.url_map.converters['tel'] = TelephoneConverter</code></p></li><li><p>app.url_map下的默认的路由规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#: the default converter mapping for the map.</span></span><br><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">&quot;default&quot;</span>: UnicodeConverter,</span><br><span class="line">    <span class="string">&quot;string&quot;</span>: UnicodeConverter,</span><br><span class="line">    <span class="string">&quot;any&quot;</span>: AnyConverter,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: PathConverter,</span><br><span class="line">    <span class="string">&quot;int&quot;</span>: IntegerConverter,</span><br><span class="line">    <span class="string">&quot;float&quot;</span>: FloatConverter,</span><br><span class="line">    <span class="string">&quot;uuid&quot;</span>: UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2451-自定义动态路由过滤器之处理动态路由"><a class="markdownIt-Anchor" href="#2451-自定义动态路由过滤器之处理动态路由"></a> 2.4.5.1 自定义动态路由过滤器之处理动态路由</h4><p>自定义一个类，该通过继承<code>werkzeug.routing 的BaseConverter</code>类不光可以实现正则匹配，我们介绍一下以下两个方法：</p><ul><li><p>在该类中实现 <code>to_python</code> 方法：</p><p>这个方法的返回值，将会传递给视图函数的形参。我们可以利用这个方法实现处理url中动态路由部分。</p></li><li><p>在该类中实现 <code>to_url</code> 方法：</p><p>翻转url的时候也就是使用url_for函数的时候，我们传入指定的动态路由部分，触发to_url方法，这个方法的返回值，会拼接在非动态路由上，从而实现生成符合要求的url格式。</p></li></ul><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,url_for</span><br><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug =<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListConverter</span>(<span class="params">BaseConverter</span>):</span></span><br><span class="line">    regex = <span class="string">&#x27;.*&#x27;</span>     <span class="comment"># 这个regex代表都匹配的意思，可以根据自己的需求制定url规则</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;这个函数用于拿到了路由里的动态参数赋值给value，</span></span><br><span class="line"><span class="string">          可以在to_python进行操作动态参数，</span></span><br><span class="line"><span class="string">          返回操作完的的结果给视图函数的形参&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> value.split(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;这个函数用于和url_for连用，</span></span><br><span class="line"><span class="string">           url_for通过指定给动态参数(以关键字实参的形式)赋值给value</span></span><br><span class="line"><span class="string">           我们可以根据我们的需求操作url_for传进来的参数，</span></span><br><span class="line"><span class="string">           然后返回一个理想的动态路由内容拼接在url上&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;+&#x27;</span>.join(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;list&#x27;</span>] = ListConverter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/student_list/&lt;list:students&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student_list</span>(<span class="params">students</span>):</span></span><br><span class="line">    print(url_for(<span class="string">&#x27;student_list&#x27;</span>,students=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])) <span class="comment"># 输出 /student_list/a+b/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(students)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>证明<code>to_python()</code>方法把访问时候动态路由部分被处理成列表了。</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221628236-97482956.png" alt="" /></p><p>证明我们的 <code>to_url()</code> 方法把<code>url_for()</code>函数传入的动态路由部分由列表转换成拼接字符串了。</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221642997-497647337.png" alt="" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;21-url的组成&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#21-url的组成&quot;&gt;&lt;/a&gt; 2.1 URL的组成&lt;/h2&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>1 初识flask</title>
    <link href="http://example.com/2021/01/18/flask/1%20%E5%88%9D%E8%AF%86flask/"/>
    <id>http://example.com/2021/01/18/flask/1%20%E5%88%9D%E8%AF%86flask/</id>
    <published>2021-01-18T11:39:27.067Z</published>
    <updated>2021-01-18T14:12:08.711Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.cnblogs.com/xiaoyuanqujing/p/11637949.html">小猿取经</a></p><p>视频：<a href="https://www.bilibili.com/video/av73329405/">五天从入门到熟练flask框架</a></p><p>flask性能上基本满足一般web开发的需求, 并且灵活性以及可扩展性上要优于其他web框架, 对各种数据库的契合度都非常高</p><p><strong>关键词</strong>：</p><ol><li><p>性能基本满足需求</p></li><li><p>灵活性可拓展性强</p></li><li><p>对各种数据库的契合度都比较高。</p></li><li><p>在真实的生产环境下，小项目开发快，大项目设计灵活</p></li></ol><h2 id="1-在虚拟环境中安装flask模块"><a class="markdownIt-Anchor" href="#1-在虚拟环境中安装flask模块"></a> 1 在虚拟环境中安装Flask模块</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip installflask</span><br></pre></td></tr></table></figure><p>从上面成功安装的输出内容可以看出，除了Flask包外，同时被安装的还有5个依赖包，它们的主要介绍如表（1-1）所示。</p><table><thead><tr><th>包名及版本</th><th>功能</th></tr></thead><tbody><tr><td>Jinja2-2.10</td><td>渲染模板引擎工具集</td></tr><tr><td>MarkupSafe-1.1.0</td><td>可以识别HTML转义规则。HTML字符转义工具集</td></tr><tr><td>Werkzeug-0.14.1</td><td>Web 框架的底层库，提供了请求及响应以及开发服务器的功能，简称WSGI工具集</td></tr><tr><td>click-7.0</td><td>命令行工具集</td></tr><tr><td>itsdangerous-1.1.0</td><td>加密工具集</td></tr></tbody></table><h2 id="2-开始第一个flask程序"><a class="markdownIt-Anchor" href="#2-开始第一个flask程序"></a> 2 开始第一个Flask程序</h2><h3 id="21-项目目录"><a class="markdownIt-Anchor" href="#21-项目目录"></a> <strong>2.1 项目目录</strong></h3><ul><li><p>“<strong>static文件夹</strong>”用于存放各种静态文件 css、js、图片等等</p></li><li><p>“<strong>templates文件夹</strong>”用于存放html模板文件</p></li><li><p>“<strong><a href="http://app.py">app.py</a></strong>”为我们的主文件 ，启动项目需要启动该文件</p></li></ul><h3 id="22-apppy-代码解读"><a class="markdownIt-Anchor" href="#22-apppy-代码解读"></a> <strong>2.2 <a href="http://app.py">app.py</a> 代码解读</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)  <span class="comment"># 实例化这个Flask类的到一个实例化对象app； __name__变量指代 当前py文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)     </span><span class="comment"># 以装饰器实现 —— 匹配url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span>  <span class="comment"># 视图函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  <span class="comment"># 保证代码只用于开发环境</span></span><br><span class="line">    app.run()   <span class="comment"># 内部定义了默认的 ip+端口为127.0.0.1:5000，并且调用了werkzeug.serving为我们创建了一个开发服务器（由依赖包Werkzeug提供）</span></span><br></pre></td></tr></table></figure><p>app.run()底层代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, host=<span class="literal">None</span>, port=<span class="literal">None</span>, debug=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            load_dotenv=<span class="literal">True</span>, **options</span>):</span></span><br><span class="line">     ...        </span><br><span class="line">         _host =<span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">         _port = <span class="number">5000</span>        </span><br><span class="line">         ...            </span><br><span class="line">         host = host <span class="keyword">or</span> sn_host <span class="keyword">or</span> _host</span><br><span class="line">         port = <span class="built_in">int</span>(port <span class="keyword">or</span> sn_port <span class="keyword">or</span> _port)          </span><br><span class="line">         ...</span><br><span class="line">         <span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                run_simple(host, port, self, **options)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="comment"># reset the first request information if the development server</span></span><br><span class="line">                <span class="comment"># reset normally.  This makes it possible to restart the server</span></span><br><span class="line">                <span class="comment"># without reloader and that stuff from an interactive shell.</span></span><br><span class="line">                self._got_first_request = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="221-werkzeug简介"><a class="markdownIt-Anchor" href="#221-werkzeug简介"></a> <strong>2.2.1 Werkzeug简介</strong></h4><ul><li>Werkzeug是一个WSGI工具包，他可以作为一个Web框架的底层库。内部封装了例如 Request，Response 等等 。</li><li>flask基于Werkzeug,flask只保留了web开发的核心功能。</li></ul><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> Request, Response</span><br><span class="line"></span><br><span class="line"><span class="meta">@Request.application</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Response(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line">    run_simple(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">4000</span>, hello)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原理：</p><p>1 app.run() 调用 werkzeug.serving的run_simple(host, port, self, **options)</p><p>2 self()等价于app(), app()调用Flask类的__call__方法</p><p>3 Flask类的__call__方法返回了 self.wsgi_app(environ, start_response)</p><p>4 flask程序的执行过程都在 self.wsgi_app(environ, start_response)中</p><p>具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, host=<span class="literal">None</span>, port=<span class="literal">None</span>, debug=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            load_dotenv=<span class="literal">True</span>, **options</span>):</span></span><br><span class="line">       </span><br><span class="line">     ...</span><br><span class="line">        </span><br><span class="line">         _host =<span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">         _port = <span class="number">5000</span></span><br><span class="line">        </span><br><span class="line">         ...</span><br><span class="line">            </span><br><span class="line">         host = host <span class="keyword">or</span> sn_host <span class="keyword">or</span> _host</span><br><span class="line">         port = <span class="built_in">int</span>(port <span class="keyword">or</span> sn_port <span class="keyword">or</span> _port)</span><br><span class="line">            </span><br><span class="line">         ...</span><br><span class="line">    </span><br><span class="line">         <span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                run_simple(host, port, self, **options)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                <span class="comment"># reset the first request information if the development server</span></span><br><span class="line">                <span class="comment"># reset normally.  This makes it possible to restart the server</span></span><br><span class="line">                <span class="comment"># without reloader and that stuff from an interactive shell.</span></span><br><span class="line">                self._got_first_request = <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, environ, start_response</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;The WSGI server calls the Flask application object as the</span></span><br><span class="line"><span class="string">        WSGI application. This calls :meth:`wsgi_app` which can be</span></span><br><span class="line"><span class="string">        wrapped to applying middleware.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.wsgi_app(environ, start_response)</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span>(<span class="params">self, environ, start_response</span>):</span></span><br><span class="line">        </span><br><span class="line">        ctx = self.request_context(environ)</span><br><span class="line">        error = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ctx.push()</span><br><span class="line">                response = self.full_dispatch_request()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                error = e</span><br><span class="line">                response = self.handle_exception(e)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">                error = <span class="literal">None</span></span><br><span class="line">            ctx.auto_pop(error)</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><h4 id="222-运行项目"><a class="markdownIt-Anchor" href="#222-运行项目"></a> <strong>2.2.2 运行项目</strong></h4><p>在app.py中右键run启动项目</p><p><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009215339123-953412299.png" alt="img" /></p><p>浏览器访问：<a href="http://127.0.0.1:5000">http://127.0.0.1:5000</a><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009215353326-119321491.png" alt="img" /></p><h4 id="223-debug模式"><a class="markdownIt-Anchor" href="#223-debug模式"></a> <strong>2.2.3 DEBUG模式</strong></h4><p><strong>DEBUG模式解决了两个问题。</strong></p><ol><li>flask代码中如果出现了异常，我们在浏览器中不会提示具体的错误信息，开启debug模式后会把具体的错误信息发送到浏览器上。</li><li>flask代码如果被修改了，必须要重启项目修改的代码才会有效，开启debug模式后我们修改了代码只要<code>ctrl+s</code>我们的flask项目就会自动重新加载，不需要手动加载整个网站。</li></ol><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    print(a[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)   <span class="comment"># 开启debug模式</span></span><br></pre></td></tr></table></figure><h5 id="四种开启debug的方式"><a class="markdownIt-Anchor" href="#四种开启debug的方式"></a> <strong>四种开启DEBUG的方式</strong></h5><p>第一种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    print(a[<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)  <span class="comment"># 设置</span></span><br></pre></td></tr></table></figure><p><strong>第二种</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = <span class="literal">True</span>  <span class="comment"># 设置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    print(a[<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>第三种</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.update(DEBUG=<span class="literal">True</span>)  <span class="comment"># 设置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    print(a[<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>第四种</strong></p><p>需要在<code>app.py</code>所在的目录里 再创建一个<code>config.py</code>，随着我们的学习会越来越多的用到这个配置文件，来配置我们的<code>flask</code>项目，注意配置的信息一般为大写。</p><p><a href="http://config.py">config.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> config  <span class="comment"># 导入</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config.from_object(config)  <span class="comment"># 设置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    print(a[<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>注</strong>： app.config 本质上继承的字典，是字典的子类的一个对象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考：&lt;a href=&quot;https://www.cnblogs.com/xiaoyuanqujing/p/11637949.html&quot;&gt;小猿取经&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;视频：&lt;a href=&quot;https://www.bilibili.com/video/av73329405</summary>
      
    
    
    
    <category term="python框架" scheme="http://example.com/categories/python%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/01/18/hello-world/"/>
    <id>http://example.com/2021/01/18/hello-world/</id>
    <published>2021-01-18T10:38:44.606Z</published>
    <updated>2021-01-18T10:38:44.607Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>7 flask小点补充</title>
    <link href="http://example.com/2021/01/18/flask/7%20flask%E5%B0%8F%E7%82%B9%E8%A1%A5%E5%85%85/"/>
    <id>http://example.com/2021/01/18/flask/7%20flask%E5%B0%8F%E7%82%B9%E8%A1%A5%E5%85%85/</id>
    <published>2021-01-18T09:01:48.487Z</published>
    <updated>2021-01-18T14:31:19.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-cookie"><a class="markdownIt-Anchor" href="#1-cookie"></a> 1 cookie</h1><h2 id="11-什么是cookie"><a class="markdownIt-Anchor" href="#11-什么是cookie"></a> 1.1 什么是cookie？</h2><p><code>cookie</code>技术产生源于<code>HTTP</code>协议在互联网上的急速发展，在浏览器发展初期，为了适应用户的需求，技术上推出了各种保持web浏览状态的手段，为什么要保持web浏览器的状态呢？</p><p>一般<code>web</code>通信是基于<code>HTTP</code>的，<code>HTTP</code>是无状态的协议，也就是说，在一次请求响应结束后，服务器不会留下任何有关于对方状态信息，所以需要保持web浏览器的状态。</p><p>比如：对于有些web应用来说，客户端的某些信息必须被记住。比如用户登录过后跳转页面依然要保持登录的状态，进行其他的业务访问，而当这个登录过的用户再次访问web服务器的时候，web服务器并不知道这个用户已经登录过了，所以无法进行其他需要权限的业务访问。所以<code>cookie</code>技术的出现就是为了解决这个问题。</p><p><code>cookie</code>的具体实现过程：当一个用户访问<code>web</code>服务器后，<code>web</code>服务器会获取用户的状态并且返回一些数据（cookie）给浏览器，浏览器会自动储存这些数据（cookie），当用户再次访问web服务器，浏览器会把cookie放到请求报文中发送给web服务器，web服务器就会获取到了用户的状态。基于这次用户的状态方便用户进行其他业务的访问，并且web服务器可以设置浏览器保存cookie的时间，cookie是有域名的概念，只有访问同一个域名的时候才会把之前相同域名返回的cookie携带给该web服务器。</p><p><em>附注：1993年，网景公司雇员<code>Lou Montulli</code>为了提升用户体验，进一步实现了个人化网络。发明了今天广泛使用的<code>Cookie</code>。</em></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133265-1996976369..jpg"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133265-1996976369..jpg" alt="img" /></a></p><p><strong>关键词</strong>：</p><ul><li><code>web</code>通讯一般基于<code>HTTP</code>协议，<code>HTTP</code>是无状态协议。</li><li><code>Cookie</code>技术是用来保持<code>web</code>访问状态，<code>Cookie</code>技术通过在请求和响应报文中添加<code>Cookie</code>数据来保存客户端的状态信息</li><li>服务器可以设置<code>cookie</code>的有效期，浏览器会自动清除过期的<code>cookie</code>。</li><li><code>cookie</code>有域名的概念，只有访问同一个域名，才会把之前相同域名返回的cookie携带给该服务器。</li></ul><h2 id="12-如何在flask中使用cookie"><a class="markdownIt-Anchor" href="#12-如何在flask中使用cookie"></a> 1.2 如何在flask中使用cookie？</h2><h3 id="121-设置cookie"><a class="markdownIt-Anchor" href="#121-设置cookie"></a> 1.2.1 设置cookie</h3><p>设置<code>cookie</code>的时候是由我们<code>web</code>服务器设置，也就是在<code>Flask</code>项目中生成<code>cookie</code>，经由响应报文返回给浏览器保存<code>cookie</code>，下次浏览器再访问<code>web</code>服务器的时会在请求报文中把<code>cookie</code>携带过来，所以<code>cookie</code>产生的起点是在web服务器中，也就是我们的Flask项目中。</p><p>在Flask中如果想要在响应中添加一个cookie，最方便的做法是使用内置的<code>Response</code>类提供的<code>set_cookie()</code>方法。</p><p><strong>表-2.2.1.1 set_cookie()方法的参数</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td><code>cookie</code>的键（名称）</td></tr><tr><td>value</td><td><code>cookie</code>的值</td></tr><tr><td>max_age</td><td><code>cookie</code>被保存的时间数，单位为秒。</td></tr><tr><td>expires</td><td>具体的过期时间，一个<code>datetime</code>对象或UNIX时间戳</td></tr><tr><td>path</td><td>限制<code>cookie</code>只在给定的路径可用，默认为整个域名下路径都可用</td></tr><tr><td>domain</td><td>设置<code>cookie</code>可用的域名，默认是当前域名，子域名需要利用通配符<code>domain=.当前域名</code></td></tr><tr><td>secure</td><td>如果设为<code>True</code>，只有通过<code>HTTPS</code>才可以用</td></tr><tr><td>httponly</td><td>如果设为<code>True</code>，进制客户端<code>JavaScript</code>获取<code>cookie</code></td></tr></tbody></table><h4 id="1212-示例设置cookie"><a class="markdownIt-Anchor" href="#1212-示例设置cookie"></a> 1.2.1.2 示例：设置cookie</h4><p>项目目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">│  app.py</span><br><span class="line">│</span><br><span class="line">├─static<span class="comment"># 文件夹</span></span><br><span class="line">└─templates <span class="comment"># 文件夹</span></span><br></pre></td></tr></table></figure><p><a href="http://app.py">app.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    resp = Response(<span class="string">&#x27;设置cookie给浏览器&#x27;</span>)</span><br><span class="line">    resp.set_cookie(<span class="string">&#x27;user_name&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>解读 <a href="http://app.py">app.py</a></strong>：</p><p><strong>(1)</strong> 首先导入<code>Flask</code>内置的<code>Response</code>类，用于在响应报文中设置<code>cookie</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request, Response</span><br></pre></td></tr></table></figure><p><strong>(2)</strong> 在视图函数实例化<code>Response</code>类并传入返回的内容，<code>Response</code>类实例化出的对象调用<code>set_cookie()</code>方 法，set_cookie内的第一个参数是设置cookie的<code>key</code>，第二个参数是用来设置cookie的<code>value</code>，然后返回该对象，就会携带着设置好的<code>cookie</code>返回给浏览器保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    resp = Response(<span class="string">&#x27;设置cookie给浏览器&#x27;</span>)</span><br><span class="line">    resp.set_cookie(<span class="string">&#x27;user_name&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h4 id="1213-在浏览器中查看cookie的三种方式以chrome浏览器为例"><a class="markdownIt-Anchor" href="#1213-在浏览器中查看cookie的三种方式以chrome浏览器为例"></a> 1.2.1.3 在浏览器中查看cookie的三种方式（以Chrome浏览器为例）**</h4><p><strong>基于2.2.1.2实例</strong></p><p><strong>第一种</strong>: 右键检查-----&gt;Network----&gt;找到访问的域名----&gt;找到Response Headers----&gt;Set-Cookie</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133532-1177892422..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133532-1177892422..png" alt="1550736406457" /></a></p><p><strong>第二种</strong>：点击url输入框左边的信息icon，然后找到响应的域名，展开查看cookie。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133751-1539354373..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133751-1539354373..png" alt="1550736586670" /></a></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133940-1885846214..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133940-1885846214..png" alt="1550736643161" /></a></p><p><strong>第三种</strong>：设置----&gt;高级----&gt;内容设置----&gt;Cookie----&gt;查看所有cookie设置-----&gt;根据域名搜索对应的cookie信息</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134138-1836502968..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134138-1836502968..png" alt="1550740317286" /></a></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134340-896718454..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134340-896718454..png" alt="1550740351876" /></a></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134529-315038539..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134529-315038539..png" alt="1550740399039" /></a></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134741-2012530184..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134741-2012530184..png" alt="1550740431743" /></a></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134936-1531826233..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134936-1531826233..png" alt="1550740461224" /></a></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135123-1069381446..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135123-1069381446..png" alt="1550740533491" /></a></p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135301-180033248..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135301-180033248..png" alt="1550740558622" /></a></p><h3 id="122-设置cookie的有效期"><a class="markdownIt-Anchor" href="#122-设置cookie的有效期"></a> 1.2.2 设置cookie的有效期</h3><p><strong>注意：Flask服务器默认设置cookie有效期为关闭浏览器后cookie失效</strong>。</p><h4 id="1221-基于max_age参数设置cookie有效期"><a class="markdownIt-Anchor" href="#1221-基于max_age参数设置cookie有效期"></a> 1.2.2.1 基于max_age参数设置cookie有效期</h4><p>再设置<code>cookie</code>的调用<code>set_cookie()</code>时候传入关键字实参 <code>max_age= 值</code>，这个<code>值</code>代表多少秒后过期。</p><p><em>注意：max_age参数设置过期时间不兼容IE8一下的浏览器</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    resp = Response(<span class="string">&#x27;设置cookie给浏览器&#x27;</span>)</span><br><span class="line">    resp.set_cookie(<span class="string">&#x27;user_name&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>,max_age=<span class="number">60</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135784-444930551..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135784-444930551..png" alt="1550743936736" /></a></p><h4 id="1222-基于expires参数设置cookie有效期"><a class="markdownIt-Anchor" href="#1222-基于expires参数设置cookie有效期"></a> 1.2.2.2 基于expires参数设置cookie有效期</h4><p>再设置<code>cookie</code>的调用<code>set_cookie()</code>时候传入关键字实参 <code>expires= 值</code>，这个<code>值</code>代具体的过期时间，一个<code>datetime</code>对象或UNIX时间戳。</p><p><em>使用expires参数，就必须会用格林尼治时间（也就是相对北京时间少8个小时，因为浏览器会默认把服务器传来的时间值当做标准格林尼治时间，并根据当地的时区做调整</em> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/expires_demo/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expires_demo</span>():</span></span><br><span class="line">    resp = Response(<span class="string">&#x27;设置cookie给浏览器, cookie设置过期时间为一个月后&#x27;</span>)</span><br><span class="line">    expires = datetime.now()+timedelta(days=<span class="number">30</span>, hours=<span class="number">16</span>)</span><br><span class="line">    resp.set_cookie(<span class="string">&#x27;user_name&#x27;</span>, <span class="string">&#x27;mark&#x27;</span>, expires=expires)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135938-1085978225..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135938-1085978225..png" alt="1550886456558" /></a></p><h3 id="123-在flask中查询cookie"><a class="markdownIt-Anchor" href="#123-在flask中查询cookie"></a> 1.2.3 在Flask中查询cookie</h3><p>基于2.2.1.2 示例</p><p>查询<code>cookie</code> 是通过请求对象的<code>cookies</code>属性读取，读取的过程是使用设置<code>cookie</code>时的<code>key</code>来读取到设置<code>cookie</code>的<code>value</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_cookie/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span>():</span></span><br><span class="line">    user_name = request.cookies.get(<span class="string">&#x27;user_name&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_name == <span class="string">&#x27;mark&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125;的信息&#x27;</span>.<span class="built_in">format</span>(user_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;cookie验证失败&#x27;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136144-1923310819..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136144-1923310819..png" alt="1550741843996" /></a></p><h3 id="124删除cookie"><a class="markdownIt-Anchor" href="#124删除cookie"></a> 1.2.4删除cookie</h3><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136359-420093650..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136359-420093650..png" alt="img" /></a></p><p>基于2.2.1.2实例</p><p>删除<code>cookie</code>是通过<code>Flask</code>内置的<code>Response</code>类实例化出的对象调用<code>delete_cookie('key')</code>，删除的过程是使用设置<code>cookie</code>时的<code>key</code>来删除<code>cookie</code>信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/del/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_cookie</span>():</span></span><br><span class="line">    resp = Response(<span class="string">&#x27;删除cookie&#x27;</span>)</span><br><span class="line">    resp.delete_cookie(<span class="string">&#x27;user_name&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h1 id="2-session"><a class="markdownIt-Anchor" href="#2-session"></a> 2 session</h1><h2 id="21-什么是session"><a class="markdownIt-Anchor" href="#21-什么是session"></a> 2.1 什么是session？</h2><p><strong>session的基本概念</strong>：session又称之为安全的cookie，session是一个思路、是一个概念、一个服务器存储授权信息的解决方案，不同的服务器，不同的框架，不同的语言有不同的实现，session的目的和cookie完全一致，cookie在客户端和服务端处理的非常粗糙，cookie在浏览器保存的时候以及传输的过程均使用明文，导致了很多安全隐患问题，session的出现就是为了解决cookie存储数据不安全的问题。</p><p><em>注意：session是一个思路一个概念，session的实现是基于cookie的，session并不像cookie是一项真实存在的技术，可以简单的理解为把粗糙的cookie在服务端通过加密，永久化等方式提高cookie的安全级别。</em></p><h2 id="22-实现session的两种思路"><a class="markdownIt-Anchor" href="#22-实现session的两种思路"></a> 2.2 实现session的两种思路</h2><p><strong>第一种</strong></p><ol><li>客户端携带用户信息请求服务端验证。</li><li>服务端验证成功后生成随机的session_id与用户信息建立映射后存储到数据库中（注意：数据库可以是任意永久化保存数据的机制，如redis、memcached、mysql、甚至是文件等等）。</li><li>服务端把刚刚生成的session_id作为cookie信息返回给客户端。</li><li>客户端收到以session_id为内容的cookie信息保存到本地。</li><li>客户端再次请求的时候会携带以session_id为内容的cookie去访问服务端，服务端取出session_id去数据库校验得到用户信息。</li></ol><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136681-1046277379..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136681-1046277379..png" alt="1550917260707" /></a></p><p><strong>第二种</strong></p><ol><li>客户端携带用户信息请求服务端验证。</li><li>服务端收到用户信息验证成功后，服务端再把用户信息经过严格的加密加盐生成session信息。并且把刚刚生成的session信息作为cookie的内容返回给客户端。</li><li>客户端收到以session信息为内容的cookie保存到本地。</li><li>客户端再次请求的时候会携带以session信息为内容的cookie去访问服务端，服务端取出session信息经过解密得到用户的信息。</li></ol><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136850-2054093429..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136850-2054093429..png" alt="1550918351048" /></a></p><p><em>注意：flask使用的就是第二种思路，利用加密解密的方式实现session，实现安全的cookie，服务端并不会做永久化的储存。</em></p><h2 id="23-如何在flask中实现session"><a class="markdownIt-Anchor" href="#23-如何在flask中实现session"></a> 2.3 如何在flask中实现session？</h2><h3 id="231-设置session"><a class="markdownIt-Anchor" href="#231-设置session"></a> 2.3.1 设置session</h3><p>Flask提供了session对象用来将cookie加密储存，session通过秘钥对数据进行签名以加密数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="number">24</span>) <span class="comment"># 配置session使用的秘钥</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_session_info</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;mark&#x27;</span> <span class="comment"># 使用用户信息配置sesion信息作为cookie，并添加到响应体中</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;设置session信息&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>解读</strong></p><p>通过app对象 通过<code>SECRET_KEY</code>配置session使用的加密秘钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="number">24</span>) <span class="comment"># 配置session使用的秘钥</span></span><br></pre></td></tr></table></figure><p>session对象像可以字典一样操作，内部是把字典的信息进行加密操作然后添加到相应体中作为cookie，响应的时候会自动返回给浏览器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;mark&#x27;</span></span><br><span class="line">session[<span class="string">&#x27;userphone&#x27;</span>] = <span class="string">&#x27;123456&#x27;</span>  <span class="comment"># 可以指定多条session信息，统一放到响应的cookie中返回给浏览器</span></span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137020-1828638087..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137020-1828638087..png" alt="1550929913778" /></a></p><h3 id="232-设置session有效期"><a class="markdownIt-Anchor" href="#232-设置session有效期"></a> 2.3.2 设置session有效期</h3><p>后端<code>Flask</code>跟浏览器交互默认情况下，session cookie会在用户关闭浏览器时清除。通过将session.permanent属性设为True可以将session的有效期延长为31天，也可以通过操作<code>app</code>的配置<code>PERMANENT_SESSION_LIFETIME</code>来设置<code>session</code>过期时间。</p><p><strong>案例 3.3.2.1:开启指定session过期时间模式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_session_info</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;mark&#x27;</span></span><br><span class="line">    session[<span class="string">&#x27;userphone&#x27;</span>] = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    session.permanent = <span class="literal">True</span> <span class="comment"># 开启设置有效期，默认为31天后过期</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137209-326713179..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137209-326713179..png" alt="1550931605863" /></a></p><p><strong>案例 3.3.2.1:开启session指定过期时间模式后指定具体的过期时间</strong></p><p>基于案例3.3.2.1，通过设置<code>PERMANENT_SESSION_LIFETIME</code>指定具体的过期时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">app.config[<span class="string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>] = timedelta(hours=<span class="number">1</span>) <span class="comment"># 设置为1小时候过期</span></span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137356-1128605837..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137356-1128605837..png" alt="1550932150978" /></a></p><h3 id="233-获取session"><a class="markdownIt-Anchor" href="#233-获取session"></a> 2.3.3 获取session</h3><p>在Flask中获取设置的session信息通过session对象获取，session对象是继承了字典类，所以获取的时候是字典的取值方式。其内部会把浏览器传过来的session信息解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_session/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span>():</span></span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    userphone = session.get(<span class="string">&#x27;userphone&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">or</span> userphone:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>.<span class="built_in">format</span>(username, userphone)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;session为空&quot;</span></span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137512-1371028199..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137512-1371028199..png" alt="1550930691065" /></a></p><h3 id="234-删除session"><a class="markdownIt-Anchor" href="#234-删除session"></a> 2.3.4 删除session</h3><p><code>session</code>对象调用<code>pop()</code>可以根据具体的<code>session</code>的key清除掉指定的session信息。</p><p>session对象调用<code>clear()</code>可以清除此次请求的浏览器关于本域名的所有session信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/del_session/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_session</span>():</span></span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    <span class="comment"># session.clear()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;删除成功&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="3-flask模板上下文处理器"><a class="markdownIt-Anchor" href="#3-flask模板上下文处理器"></a> 3 flask模板上下文处理器</h1><p><code>app</code>对象调用<code>context_processor</code>作为模板上下文处理器，视图函数在每一次调用render_template(’’)的时候都会为模板传入<code>@app.context_processor</code>装饰器所装饰函数的返回值，该返回值作为模板变量，但是返回值一定要为字典，如果不想返回任何值，可以返回空字典，否则会报错，返回值可以设置为模板经常要使用的变量，减少了代码的冗余，提高了代码的可维护性。</p><p><strong>示例 4.1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    context_dict = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;马克&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, **context_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/detail/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>():</span></span><br><span class="line">    context_dict = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;马克&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;detail.html&#x27;</span>, **context_dict)</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>示例4.2</strong></p><p>示例4.2 利用模板上下文处理器避免了一些代码的冗余，利用该处理器，可以为视图函数每一次返回模板的时候传入设置好的变量，<code>示例4.2</code>实现的效果同<code>示例4.1</code>完全一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/detail/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;detail.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.context_processor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">context_processor</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;马克&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><em>适用场景：比如登录网站后用户信息始终显示在页面的右上角，我们可以利用模板上下文处理器，做到每次返回模板的时候都为其传入用户信息，减少了代码的冗余，提高了代码的可维护性。</em></p><h1 id="4-闪现"><a class="markdownIt-Anchor" href="#4-闪现"></a> 4 闪现</h1><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137970-224747758..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137970-224747758..png" alt="1554289488442" /></a></p><h2 id="41-在模板中获取闪现信息"><a class="markdownIt-Anchor" href="#41-在模板中获取闪现信息"></a> 4.1 在模板中获取闪现信息</h2><p>Flask 提供了一个非常简单的方法来使用闪现系统向用户反馈信息。闪现系统使得在一个请求结束的时候记录一个信息，<code>然后在且仅仅在下一个请求中访问这个数据</code>，强调flask闪现是基于<code>flask</code>内置的<code>session</code>的，利用浏览器的<code>session</code>缓存闪现信息。所以必须设置<code>secret_key</code>。</p><h3 id="411-简单的在模板中实现获取闪现信息"><a class="markdownIt-Anchor" href="#411-简单的在模板中实现获取闪现信息"></a> 4.1.1 简单的在模板中实现获取闪现信息</h3><p><strong>示例：</strong></p><p><a href="http://server.py">server.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, flash, redirect, render_template, \</span><br><span class="line">     request, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;some_secret&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> \</span><br><span class="line">                request.form[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">            error = <span class="string">&#x27;登录失败&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&#x27;恭喜您登录成功&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, error=error)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><em><strong>注意：这个 <code>flash()</code> 就可以实现在下一次请求时候，将括号内的信息做一个缓存。不要忘记设置secret_key</strong></em></p><p>这里是 index.html 模板:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with messages &#x3D; get_flashed_messages() %&#125;  # 获取所有的闪现信息返回一个列表</span><br><span class="line">  &#123;% if messages %&#125;</span><br><span class="line">    &lt;ul class&#x3D;flashes&gt;</span><br><span class="line">    &#123;% for message in messages %&#125;</span><br><span class="line">      &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;主页&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;p&gt;跳转到登录页面&lt;a href&#x3D;&quot;&#123;&#123; url_for(&#39;login&#39;) &#125;&#125;&quot;&gt;登录?&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p><em><strong>注意：<code>&#123;% with messages = get_flashed_messages() %&#125;</code>  获取所有的闪现信息返回一个列表</strong></em></p><p>这里是login.html 模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;% if error %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">error</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> &#123;&#123; error &#125;&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">post</span>&gt;</span></span><br><span class="line">    用户名:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">username</span>&gt;</span></span><br><span class="line">    密码:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Login</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1552036299625"><a class="markdownIt-Anchor" href="#1552036299625"></a> <a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155138240-12907379..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155138240-12907379..png" alt="1552036299625" /></a></h4><p><strong>简单的在模板中实现获取闪现信息小结：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置闪现内容：flash(<span class="string">&#x27;恭喜您登录成功&#x27;</span>)</span><br><span class="line">模板取出闪现内容：&#123;% <span class="keyword">with</span> messages = get_flashed_messages() %&#125; </span><br></pre></td></tr></table></figure><h3 id="412-模板中的分类闪现"><a class="markdownIt-Anchor" href="#412-模板中的分类闪现"></a> 4.1.2 模板中的分类闪现</h3><p>当闪现一个消息时，是可以提供一个分类的。未指定分类时默认的分类为 <code>'message'</code> 。 可以使用分类来提供给用户更好的反馈，可以给用户更精准的提示信息体验。</p><p>要使用一个自定义的分类，只要使用 <code>flash()</code> 函数的第二个参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flash(<span class="string">&#x27;恭喜您登录成功&#x27;</span>,<span class="string">&quot;status&quot;</span>)</span><br><span class="line">flash(<span class="string">&#x27;您的账户名为admin&#x27;</span>,<span class="string">&quot;username&quot;</span>)</span><br></pre></td></tr></table></figure><p>在使用<code>get_flashed_messages()</code>时候需要传入<code>with_categories=true</code>便可以渲染出来类别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with messages &#x3D; get_flashed_messages(with_categories&#x3D;true) %&#125;</span><br><span class="line">  &#123;% if messages %&#125;</span><br><span class="line">    &lt;ul class&#x3D;flashes&gt;</span><br><span class="line">    &#123;% for category, message in messages %&#125;</span><br><span class="line">      &lt;li class&#x3D;&quot;&#123;&#123; category &#125;&#125;&quot;&gt;&#123;&#123; category &#125;&#125;：&#123;&#123; message &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155139453-249225863..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155139453-249225863..png" alt=" 1552041915121" /></a></p><p><strong>模板中的分类闪现小结：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">分类设置闪现内容：flash(<span class="string">&#x27;恭喜您登录成功&#x27;</span>,<span class="string">&quot;status&quot;</span>)</span><br><span class="line">    flash(<span class="string">&#x27;您的账户名为admin&#x27;</span>,<span class="string">&quot;username&quot;</span>)</span><br><span class="line">模板取值：   &#123;% <span class="keyword">with</span> messages = get_flashed_messages(with_categories=true) %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> messages %&#125;</span><br><span class="line">            &lt;ul class=flashes&gt;</span><br><span class="line">            &#123;% <span class="keyword">for</span> category, message <span class="keyword">in</span> messages %&#125;</span><br><span class="line">            ...</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="413-模板中过滤闪现消息"><a class="markdownIt-Anchor" href="#413-模板中过滤闪现消息"></a> 4.1.3 模板中过滤闪现消息</h3><p>同样要使用一个自定义的分类，只要使用 <code>flash()</code> 函数的第二个参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flash(<span class="string">&#x27;恭喜您登录成功&#x27;</span>,<span class="string">&quot;status&quot;</span>)</span><br><span class="line">flash(<span class="string">&#x27;您的账户名为admin&#x27;</span>,<span class="string">&quot;username&quot;</span>)</span><br></pre></td></tr></table></figure><p>在使用<code>get_flashed_messages()</code>时候需要传入<code>category_filter=[&quot;username&quot;]</code>便可根据类别取出闪现信息。中括号内可以传入的值就是类别，可以传入多个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with messages &#x3D; get_flashed_messages(category_filter&#x3D;[&quot;username&quot;]) %&#125;</span><br><span class="line">&#123;% if messages %&#125;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &#123;%- for message in messages %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">    &#123;% endfor -%&#125;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155140542-1156156426..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155140542-1156156426..png" alt="1552041362576" /></a></p><p><strong>小结：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">分类设置闪现内容：flash(<span class="string">&#x27;恭喜您登录成功&#x27;</span>,<span class="string">&quot;status&quot;</span>)</span><br><span class="line">    flash(<span class="string">&#x27;您的账户名为admin&#x27;</span>,<span class="string">&quot;username&quot;</span>)</span><br><span class="line">模板取值：  % <span class="keyword">with</span> messages = get_flashed_messages(category_filter=[<span class="string">&quot;username&quot;</span>]) %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> messages %&#125;</span><br><span class="line">              &lt;ul&gt;</span><br><span class="line">                &#123;%- <span class="keyword">for</span> message <span class="keyword">in</span> messages %&#125;</span><br></pre></td></tr></table></figure><h2 id="42-在视图中获取闪现信息"><a class="markdownIt-Anchor" href="#42-在视图中获取闪现信息"></a> 4.2 在视图中获取闪现信息</h2><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155141774-1627594844..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155141774-1627594844..png" alt="1554289560305" /></a></p><h3 id="421-简单的在是视图中获取闪现信息"><a class="markdownIt-Anchor" href="#421-简单的在是视图中获取闪现信息"></a> 4.2.1 简单的在是视图中获取闪现信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-设置: flash(<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">-取值：get_flashed_message() <span class="comment"># 注意这个不同于模板取值，这个是从flask中导入的</span></span><br><span class="line">-注意：在视图中获取闪现信息不必非得是两次连续的请求，只要保证是第一次取相应的闪现信息，就可以取得到。</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, flash, get_flashed_messages</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = os.urandom(<span class="number">4</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;name&#x27;</span>) == <span class="string">&#x27;rocky&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    flash(<span class="string">&#x27;第一条闪现信息：用户名不是rocky填写的是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(request.args.get(<span class="string">&#x27;name&#x27;</span>)))</span><br><span class="line">    <span class="comment"># flash(&#x27;第二条闪现信息：用户名不是rocky填写的是&#123;&#125;&#x27;.format(request.args.get(&#x27;name&#x27;)))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;error,设置了闪现&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_flash/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flash</span>():</span></span><br><span class="line">    <span class="comment">#get_flashed_messages()是一个列表列表可以取出闪现信息，该条闪现信息只要被取出就会删除掉。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;闪现的信息是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(get_flashed_messages())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/demo/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;demo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>**（1）**会触发设置闪现内容</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155142726-1681318289..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155142726-1681318289..png" alt="1552048742450" /></a></p><p>**（2）**取出闪现内容</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143713-1931514309..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143713-1931514309..png" alt="1552052193446" /></a></p><p>**（3）**再次取出闪现内容，发现闪现内容取出一次后就为空了</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143887-2108757345..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143887-2108757345..png" alt="1552052104889" /></a></p><p><strong>小结：</strong></p><ul><li>get_flashed_messages()是一个列表，该列表可以取出闪现信息，该条闪现信息只要被取出就会删除掉。</li></ul><h3 id="422-在视图中实现分类获取闪现信息"><a class="markdownIt-Anchor" href="#422-在视图中实现分类获取闪现信息"></a> 4.2.2 在视图中实现分类获取闪现信息。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-设置：flash(<span class="string">&#x27;用户名错误&#x27;</span>, <span class="string">&quot;username_error&quot;</span>)</span><br><span class="line">      flash(<span class="string">&#x27;用户密码错误&#x27;</span>, <span class="string">&quot;password_error&quot;</span>) <span class="comment"># 第二个参数为闪现信息的分类。</span></span><br><span class="line"></span><br><span class="line">-取所有闪现信息的类别和闪现内容：get_flashed_messages(with_categories=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">-针对分类过滤取值：get_flashed_messages(category_filter=[<span class="string">&#x27;username_error&#x27;</span>]) </span><br><span class="line"><span class="comment"># 中括号内可以写多个分类。</span></span><br><span class="line">    </span><br><span class="line">-注意：如果flash()没有传入第二个参数进行分类，默认分类是 <span class="string">&#x27;message&#x27;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><strong>示例1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;name&#x27;</span>) == <span class="string">&#x27;rocky&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    flash(<span class="string">&#x27;用户名错误&#x27;</span>, category=<span class="string">&quot;username_error&quot;</span>)</span><br><span class="line">    flash(<span class="string">&#x27;用户密码错误&#x27;</span>, <span class="string">&quot;password_error&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;error,设置了闪现&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_flash/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flash</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;闪现的信息是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(get_flashed_messages(with_categories=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>把所有的闪现类别和闪现信息返回。</p><p><a href="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144215-1937103247..png"><img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144215-1937103247..png" alt="1552051297253" /></a></p><p><strong>示例2</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;name&#x27;</span>) == <span class="string">&#x27;rocky&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    flash(<span class="string">&#x27;用户名错误&#x27;</span>, category=<span class="string">&quot;username_error&quot;</span>)</span><br><span class="line">    flash(<span class="string">&#x27;用户密码错误&#x27;</span>, <span class="string">&quot;password_error&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;error,设置了闪现&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_flash/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flash</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;闪现的信息是&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(get_flashed_messages(category_filter=[<span class="string">&#x27;username_error&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>返回页面只显示了 <code>&quot;username_error&quot;</code>的分类内容。</p><p>[<img src="https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144365-2146703891..png" alt="1552050949373" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-cookie&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-cookie&quot;&gt;&lt;/a&gt; 1 cookie&lt;/h1&gt;
&lt;h2 id=&quot;11-什么是cookie&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;</summary>
      
    
    
    
    
    <category term="flask" scheme="http://example.com/tags/flask/"/>
    
  </entry>
  
</feed>
