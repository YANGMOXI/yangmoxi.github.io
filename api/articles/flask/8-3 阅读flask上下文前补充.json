{"title":"8-3 阅读flask上下文前补充","slug":"flask/8-3 阅读flask上下文前补充","date":"2021-01-18T11:39:27.107Z","updated":"2021-01-18T15:02:46.973Z","comments":true,"path":"api/articles/flask/8-3 阅读flask上下文前补充.json","excerpt":null,"covers":["https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420400-1230142937..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420787-1693929097..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421124-1086324095..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421277-1702083091..png"],"content":"<h2 id=\"0-预读源码必要了解的知识点\"><a class=\"markdownIt-Anchor\" href=\"#0-预读源码必要了解的知识点\"></a> 0 预读源码必要了解的知识点</h2>\n<p>在阅读源码之前，源码中会涉及到很多python类的特殊的用法以及类写好的功能组件，所以这里我们做一个补充，以便于接下来源码的阅读</p>\n<h2 id=\"01-偏函数\"><a class=\"markdownIt-Anchor\" href=\"#01-偏函数\"></a> 01 偏函数</h2>\n<p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> partial</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">a1,a2,a3</span>):</span></span><br><span class=\"line\">    print(a1,a2,a3)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new_func1 = partial(func,a1=<span class=\"number\">1</span>,a2=<span class=\"number\">2</span>)</span><br><span class=\"line\">new_func1(a3=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">new_func2 = partial(func,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">new_func2(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">new_func3 = partial(func,a1=<span class=\"number\">1</span>)</span><br><span class=\"line\">new_func3(a2=<span class=\"number\">2</span>,a3=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：partial括号内第一个参数是原函数，其余参数是需要固定的参数</p>\n<p><strong>效果图</strong>：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420400-1230142937..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420400-1230142937..png\" alt=\"1553002020199\" /></a></p>\n<h2 id=\"02-__add__的使用\"><a class=\"markdownIt-Anchor\" href=\"#02-__add__的使用\"></a> 02 <code>__add__</code>的使用</h2>\n<p>如果一个类里面定义了 <code>__add__</code>方法，如果这个类的对象 <code>+</code>另一个对象，会触发这个类的<code>__add__</code>方法，换个说法如果 <code>对象1+对象2</code> 则会触发<code>对象1</code>的 <code>__add__</code>方法，python在类中有很多类似的方法，对象会在不同情况下出发对应的方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.num = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span>(<span class=\"params\">self, other</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(other,Foo):</span><br><span class=\"line\">            result = self.num + other.num</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = self.num + other</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">fo1 = Foo()</span><br><span class=\"line\">fo2 = Foo()</span><br><span class=\"line\">v1 = fo1 + fo2</span><br><span class=\"line\">v2 = fo1 + <span class=\"number\">4</span></span><br><span class=\"line\">print(v1,v2)</span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420787-1693929097..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420787-1693929097..png\" alt=\"1553002690004\" /></a></p>\n<h2 id=\"03-chain函数\"><a class=\"markdownIt-Anchor\" href=\"#03-chain函数\"></a> 03 chain函数</h2>\n<p>chain函数来自于itertools库，itertools库提供了非常有用的基于迭代对象的函数，而chain函数则是可以串联多个迭代对象来形成一个更大的迭代对象 。</p>\n<p><strong>示例1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"></span><br><span class=\"line\">l1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">l2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">new_iter = chain(l1,l2) <span class=\"comment\"># 参数必须为可迭代对象</span></span><br><span class=\"line\">print(new_iter)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> new_iter:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421124-1086324095..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421124-1086324095..png\" alt=\"1553003580254\" /></a></p>\n<p><strong>示例2</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+<span class=\"number\">3</span></span><br><span class=\"line\">list_4 = [f1, f2]</span><br><span class=\"line\">new_iter2 = chain([f3], list_4)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> new_iter2:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421277-1702083091..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421277-1702083091..png\" alt=\"1553003696355\" /></a></p>\n<p>作者： 小猿取经</p>\n","more":"<h2 id=\"0-预读源码必要了解的知识点\"><a class=\"markdownIt-Anchor\" href=\"#0-预读源码必要了解的知识点\"></a> 0 预读源码必要了解的知识点</h2>\n<p>在阅读源码之前，源码中会涉及到很多python类的特殊的用法以及类写好的功能组件，所以这里我们做一个补充，以便于接下来源码的阅读</p>\n<h2 id=\"01-偏函数\"><a class=\"markdownIt-Anchor\" href=\"#01-偏函数\"></a> 01 偏函数</h2>\n<p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> partial</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">a1,a2,a3</span>):</span></span><br><span class=\"line\">    print(a1,a2,a3)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">new_func1 = partial(func,a1=<span class=\"number\">1</span>,a2=<span class=\"number\">2</span>)</span><br><span class=\"line\">new_func1(a3=<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">new_func2 = partial(func,<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">new_func2(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">new_func3 = partial(func,a1=<span class=\"number\">1</span>)</span><br><span class=\"line\">new_func3(a2=<span class=\"number\">2</span>,a3=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：partial括号内第一个参数是原函数，其余参数是需要固定的参数</p>\n<p><strong>效果图</strong>：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420400-1230142937..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420400-1230142937..png\" alt=\"1553002020199\" /></a></p>\n<h2 id=\"02-__add__的使用\"><a class=\"markdownIt-Anchor\" href=\"#02-__add__的使用\"></a> 02 <code>__add__</code>的使用</h2>\n<p>如果一个类里面定义了 <code>__add__</code>方法，如果这个类的对象 <code>+</code>另一个对象，会触发这个类的<code>__add__</code>方法，换个说法如果 <code>对象1+对象2</code> 则会触发<code>对象1</code>的 <code>__add__</code>方法，python在类中有很多类似的方法，对象会在不同情况下出发对应的方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.num = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span>(<span class=\"params\">self, other</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(other,Foo):</span><br><span class=\"line\">            result = self.num + other.num</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result = self.num + other</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">fo1 = Foo()</span><br><span class=\"line\">fo2 = Foo()</span><br><span class=\"line\">v1 = fo1 + fo2</span><br><span class=\"line\">v2 = fo1 + <span class=\"number\">4</span></span><br><span class=\"line\">print(v1,v2)</span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420787-1693929097..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155420787-1693929097..png\" alt=\"1553002690004\" /></a></p>\n<h2 id=\"03-chain函数\"><a class=\"markdownIt-Anchor\" href=\"#03-chain函数\"></a> 03 chain函数</h2>\n<p>chain函数来自于itertools库，itertools库提供了非常有用的基于迭代对象的函数，而chain函数则是可以串联多个迭代对象来形成一个更大的迭代对象 。</p>\n<p><strong>示例1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"></span><br><span class=\"line\">l1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">l2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">new_iter = chain(l1,l2) <span class=\"comment\"># 参数必须为可迭代对象</span></span><br><span class=\"line\">print(new_iter)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> new_iter:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421124-1086324095..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421124-1086324095..png\" alt=\"1553003580254\" /></a></p>\n<p><strong>示例2</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> chain</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f3</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+<span class=\"number\">3</span></span><br><span class=\"line\">list_4 = [f1, f2]</span><br><span class=\"line\">new_iter2 = chain([f3], list_4)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> new_iter2:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>效果图：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421277-1702083091..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155421277-1702083091..png\" alt=\"1553003696355\" /></a></p>\n<p>作者： 小猿取经</p>\n","categories":[{"name":"flask","path":"api/categories/flask.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"flask","path":"api/tags/flask.json"}]}