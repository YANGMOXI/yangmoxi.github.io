{"title":"2 flask注册路由","slug":"flask/2 flask注册路由","date":"2021-01-18T11:39:27.072Z","updated":"2021-01-18T14:52:00.817Z","comments":true,"path":"api/articles/flask/2 flask注册路由.json","excerpt":null,"covers":["https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009220908482-1110597384.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221628236-97482956.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221642997-497647337.png"],"content":"<h2 id=\"21-url的组成\"><a class=\"markdownIt-Anchor\" href=\"#21-url的组成\"></a> 2.1 URL的组成</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheme:// host:port/      path/         ?parameter=xxx#anchor</span><br><span class=\"line\">https://  www.baidu.com/  Public/linux/ ?fr=aladdin#23</span><br></pre></td></tr></table></figure>\n<ul>\n<li>scheme：代表的是访问的协议，一般为http或者https以及ftp等。</li>\n<li>host：主机名，域名，<a href=\"http://xn--www-eo8er22f.baidu.com\">比如www.baidu.com</a>。</li>\n<li>port：端口号。当你访问一个网站的时候，浏览器默认使用80端口。</li>\n<li>path：路径。比如：<a href=\"http://www.baidu.com/Public/linux/?python=aladdin#23%EF%BC%8Cwww.baidu.com%E5%90%8E%E9%9D%A2%E7%9A%84Public/linux%E5%B0%B1%E6%98%AFpath%E3%80%82\">www.baidu.com/Public/linux/?python=aladdin#23，www.baidu.com后面的Public/linux就是path。</a></li>\n<li>query-string：查询字符串，比如：<a href=\"http://www.baidu.com/s?wd=python%EF%BC%8C%EF%BC%9F%E5%90%8E%E9%9D%A2%E7%9A%84python=aladdin%E5%B0%B1%E6%98%AF%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82\">www.baidu.com/s?wd=python，？后面的python=aladdin就是查询字符串。</a></li>\n<li>anchor：锚点，后台一般不用管，前端用来做页面定位的。比如：<a href=\"https://www.oldboyedu.com/Public/linux/?fr=aladdin#23\">https://www.oldboyedu.com/Public/linux/?fr=aladdin#23</a> ,#后面的23就是锚点</li>\n</ul>\n<h2 id=\"22-url与路由的区别\"><a class=\"markdownIt-Anchor\" href=\"#22-url与路由的区别\"></a> 2.2 URL与路由的区别</h2>\n<p>路由是根据url定位到具体的pyhon类或python函数的程序，这段程序我们称之为路由。</p>\n<p>在Flask程序中使用路由我们称之为<strong>注册路由</strong>，是使用程序实例提供的<strong>app.route（）<strong>装饰器注册路由，而</strong>括号内</strong>的字符串就是<strong>url</strong>，<strong>注册路由的过程就是完成了 url和python类或函数映射的过程</strong>，可以理解为会有一张表保存了url与python类或函数的对应关系。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"23-url传参的两种\"><a class=\"markdownIt-Anchor\" href=\"#23-url传参的两种\"></a> 2.3  url传参的两种</h2>\n<h3 id=\"231-动态路由传参\"><a class=\"markdownIt-Anchor\" href=\"#231-动态路由传参\"></a> 2.3.1 动态路由传参</h3>\n<p>URL中包含可变的部分，如：</p>\n<p>​\t根据学生的id找到具体的学生，<a href=\"http://127.0.0.1:5000/student_list/\">http://127.0.0.1:5000/student_list/</a>&lt;student_id&gt;/</p>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_list/&lt;student_id&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student_list</span>(<span class=\"params\">student_id</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;学生&#123;&#125;号的信息&#x27;</span>.<span class=\"built_in\">format</span>(student_id)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009220908482-1110597384.png\" alt=\"\" /></p>\n<h4 id=\"2311-动态路由过滤\"><a class=\"markdownIt-Anchor\" href=\"#2311-动态路由过滤\"></a> 2.3.1.1 动态路由过滤**</h4>\n<p>可以对参数限定数据类型，比如上面的文章详情，限定student_id必须为整数类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_list/&lt;int:student_id&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">article_detail</span>(<span class=\"params\">student_id</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;学生&#123;&#125;号的信息&#x27;</span>.<span class=\"built_in\">format</span>(student_id)</span><br></pre></td></tr></table></figure>\n<p><strong>主要有这几种类型过滤：</strong></p>\n<p><code>string</code>: 默认的数据类型，接收没有任何斜杠&quot;\\ /&quot;的字符串</p>\n<p><code>int</code>: 整型</p>\n<p><code>float</code>: 浮点型</p>\n<p><code>path</code>: 和string类型相似，但是接受斜杠，如：可以接受参数/aa/bb/cc/多条放在一起</p>\n<p><code>uuid</code>: 只接受uuid格式的字符串字符串，</p>\n<p><strong>注</strong>：uuid为全宇宙唯一的串</p>\n<p><code>any</code>: 可以<strong>指定多种路径</strong></p>\n<p>​\turl_path的变量名是自己定义的，可选：student，class</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可访问 127.0.0.1/student/1/ 或 127.0.0.1/class/1/ </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&lt;any(student,class):url_path&gt;/&lt;id&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">item</span>(<span class=\"params\">url_path, <span class=\"built_in\">id</span></span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> url_path == <span class=\"string\">&#x27;student&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;学生&#123;&#125;详情&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;班级&#123;&#125;详情&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"232-查询字符串传参\"><a class=\"markdownIt-Anchor\" href=\"#232-查询字符串传参\"></a> 2.3.2 查询字符串传参</h3>\n<p>查询字符串：</p>\n<p><a href=\"http://xn--www-eo8e.baidu.com/s?wd=python&amp;ad=flask%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C\">如www.baidu.com/s?wd=python&amp;ad=flask的参数，</a> <code>？</code> 后的key=value便是查询字符串， 可以写多个key=value用<code>&amp;</code>相连</p>\n<p>从<code>flask</code>模块里面导入<code>request</code>对象，用<code>request.args</code>属性在我们的程序中根据查询字符串的<code>key</code>取出查询字符串的<code>value</code>。</p>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 请求url: 127.0.0.1:5000/student_name/?name=mark&amp;age=18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_name/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">school_name_list</span>():</span></span><br><span class=\"line\">    name = request.args.get(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">    age = request.args.get(<span class=\"string\">&#x27;age&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;学生的姓名为&#123;&#125;，年龄为&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(name, age)</span><br></pre></td></tr></table></figure>\n<h2 id=\"24-url_for的使用\"><a class=\"markdownIt-Anchor\" href=\"#24-url_for的使用\"></a> 2.4 url_for的使用</h2>\n<h3 id=\"241-url_for的作用\"><a class=\"markdownIt-Anchor\" href=\"#241-url_for的作用\"></a> 2.4.1 url_for()的作用：</h3>\n<p>url的反向查询</p>\n<p>应对：即便改动url，也能追踪到改URL</p>\n<h3 id=\"242-url_for的原理\"><a class=\"markdownIt-Anchor\" href=\"#242-url_for的原理\"></a> 2.4.2 url_for()的原理：</h3>\n<p>利用视图函数名字一般不会改变的特性，利用视图函数的<code>名字</code>去动态精准的获取url，以便于开发使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(<span class=\"string\">&#x27;视图函数名字&#x27;</span>)   <span class=\"comment\"># 输出该视图函数url</span></span><br></pre></td></tr></table></figure>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, url_for</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.update(DEBUG=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo1</span>():</span></span><br><span class=\"line\">    print(url_for(<span class=\"string\">&quot;book&quot;</span>))  <span class=\"comment\"># 注意这个引用的是视图函数的名字 为字符串格式</span></span><br><span class=\"line\">    print(<span class=\"built_in\">type</span>(url_for(<span class=\"string\">&quot;book&quot;</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_for(<span class=\"string\">&quot;book&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/book_list/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">book</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;flask_book&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ ==  <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<h3 id=\"243-url_for-处理动态的视图函数动态路由\"><a class=\"markdownIt-Anchor\" href=\"#243-url_for-处理动态的视图函数动态路由\"></a> 2.4.3 url_for 处理动态的视图函数（动态路由）</h3>\n<p>想获取动态路由，必须<strong>以关键字实参的形式 为动态的path部分赋值</strong>，注意动态的path部分必须被赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/demo2/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo2</span>():</span></span><br><span class=\"line\">    student_url = url_for(<span class=\"string\">&#x27;student&#x27;</span>, <span class=\"built_in\">id</span>=<span class=\"number\">5</span>, name=<span class=\"string\">&#x27;mark&#x27;</span>) <span class=\"comment\"># id 就是动态path的key 必须赋值，# name 将作为查询字符串传入</span></span><br><span class=\"line\">    print(student_url)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> student_url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student/&lt;int:id&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student</span>(<span class=\"params\"><span class=\"built_in\">id</span></span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;student &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 控制台输出：</span></span><br><span class=\"line\">/student/5/?name=mark</span><br></pre></td></tr></table></figure>\n<h3 id=\"244-url_for为url添加查询字符串\"><a class=\"markdownIt-Anchor\" href=\"#244-url_for为url添加查询字符串\"></a> 2.4.4  url_for为url添加查询字符串</h3>\n<p>想在路径后面拼出来查询字符串，以关键字实参的形式放到url_for()里面作为参数，会自动拼成路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/demo3/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo3</span>():</span></span><br><span class=\"line\">    school_url = url_for(<span class=\"string\">&#x27;school&#x27;</span>, school_level=<span class=\"string\">&#x27;high&#x27;</span>, name=<span class=\"string\">&#x27;college&#x27;</span>) </span><br><span class=\"line\">    <span class=\"comment\"># 具体要拼接的查询参数 以关键字实参的形式写在url_for里</span></span><br><span class=\"line\">    print(school_url)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> school_url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/school/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">school</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;school message&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 控制台输出：</span></span><br><span class=\"line\">/school/?school_level=high&amp;name=college</span><br></pre></td></tr></table></figure>\n<h3 id=\"245-自定义动态路由过滤器之正则匹配\"><a class=\"markdownIt-Anchor\" href=\"#245-自定义动态路由过滤器之正则匹配\"></a> 2.4.5  自定义动态路由过滤器之正则匹配</h3>\n<p>通过继承<code>werkzeug.routing 的BaseConverter</code>类从而自己定义一个动态路由过滤器的规则</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.routing <span class=\"keyword\">import</span> BaseConverter</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug =<span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TelephoneConverter</span>(<span class=\"params\">BaseConverter</span>):</span></span><br><span class=\"line\">    regex = <span class=\"string\">&#x27;1[3857]\\d&#123;9&#125;&#x27;</span> <span class=\"comment\">#右下斜杠d</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.url_map.converters[<span class=\"string\">&#x27;tel&#x27;</span>] = TelephoneConverter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student/&lt;tel:telenum&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student_detail</span>(<span class=\"params\">telenum</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;学生的手机号码是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(telenum)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong></p>\n<ol>\n<li>\n<p>自定义动态路由过滤器类，该类必须继承<code>werkzeug.routing</code> 的<code>BaseConverter</code>类</p>\n</li>\n<li>\n<p>通过<code>regex</code>属性指定路由规则</p>\n</li>\n<li>\n<p>讲自定义的类映射到<code>app.url_map.converters</code>中（其本质是一个字典）</p>\n<p><code>app.url_map.converters['tel'] = TelephoneConverter</code></p>\n</li>\n<li>\n<p>app.url_map下的默认的路由规则</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#: the default converter mapping for the map.</span></span><br><span class=\"line\">DEFAULT_CONVERTERS = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;default&quot;</span>: UnicodeConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;string&quot;</span>: UnicodeConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;any&quot;</span>: AnyConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;path&quot;</span>: PathConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;int&quot;</span>: IntegerConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;float&quot;</span>: FloatConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;uuid&quot;</span>: UUIDConverter,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2451-自定义动态路由过滤器之处理动态路由\"><a class=\"markdownIt-Anchor\" href=\"#2451-自定义动态路由过滤器之处理动态路由\"></a> 2.4.5.1 自定义动态路由过滤器之处理动态路由</h4>\n<p>自定义一个类，该通过继承<code>werkzeug.routing 的BaseConverter</code>类不光可以实现正则匹配，我们介绍一下以下两个方法：</p>\n<ul>\n<li>\n<p>在该类中实现 <code>to_python</code> 方法：</p>\n<p>这个方法的返回值，将会传递给视图函数的形参。我们可以利用这个方法实现处理url中动态路由部分。</p>\n</li>\n<li>\n<p>在该类中实现 <code>to_url</code> 方法：</p>\n<p>翻转url的时候也就是使用url_for函数的时候，我们传入指定的动态路由部分，触发to_url方法，这个方法的返回值，会拼接在非动态路由上，从而实现生成符合要求的url格式。</p>\n</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request,url_for</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.routing <span class=\"keyword\">import</span> BaseConverter</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug =<span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListConverter</span>(<span class=\"params\">BaseConverter</span>):</span></span><br><span class=\"line\">    regex = <span class=\"string\">&#x27;.*&#x27;</span>     <span class=\"comment\"># 这个regex代表都匹配的意思，可以根据自己的需求制定url规则</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_python</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;这个函数用于拿到了路由里的动态参数赋值给value，</span></span><br><span class=\"line\"><span class=\"string\">          可以在to_python进行操作动态参数，</span></span><br><span class=\"line\"><span class=\"string\">          返回操作完的的结果给视图函数的形参&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.split(<span class=\"string\">&#x27;+&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_url</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;这个函数用于和url_for连用，</span></span><br><span class=\"line\"><span class=\"string\">           url_for通过指定给动态参数(以关键字实参的形式)赋值给value</span></span><br><span class=\"line\"><span class=\"string\">           我们可以根据我们的需求操作url_for传进来的参数，</span></span><br><span class=\"line\"><span class=\"string\">           然后返回一个理想的动态路由内容拼接在url上&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;+&#x27;</span>.join(value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.url_map.converters[<span class=\"string\">&#x27;list&#x27;</span>] = ListConverter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_list/&lt;list:students&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student_list</span>(<span class=\"params\">students</span>):</span></span><br><span class=\"line\">    print(url_for(<span class=\"string\">&#x27;student_list&#x27;</span>,students=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>])) <span class=\"comment\"># 输出 /student_list/a+b/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(students)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>证明<code>to_python()</code>方法把访问时候动态路由部分被处理成列表了。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221628236-97482956.png\" alt=\"\" /></p>\n<p>证明我们的 <code>to_url()</code> 方法把<code>url_for()</code>函数传入的动态路由部分由列表转换成拼接字符串了。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221642997-497647337.png\" alt=\"\" /></p>\n","more":"<h2 id=\"21-url的组成\"><a class=\"markdownIt-Anchor\" href=\"#21-url的组成\"></a> 2.1 URL的组成</h2>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheme:// host:port/      path/         ?parameter=xxx#anchor</span><br><span class=\"line\">https://  www.baidu.com/  Public/linux/ ?fr=aladdin#23</span><br></pre></td></tr></table></figure>\n<ul>\n<li>scheme：代表的是访问的协议，一般为http或者https以及ftp等。</li>\n<li>host：主机名，域名，<a href=\"http://xn--www-eo8er22f.baidu.com\">比如www.baidu.com</a>。</li>\n<li>port：端口号。当你访问一个网站的时候，浏览器默认使用80端口。</li>\n<li>path：路径。比如：<a href=\"http://www.baidu.com/Public/linux/?python=aladdin#23%EF%BC%8Cwww.baidu.com%E5%90%8E%E9%9D%A2%E7%9A%84Public/linux%E5%B0%B1%E6%98%AFpath%E3%80%82\">www.baidu.com/Public/linux/?python=aladdin#23，www.baidu.com后面的Public/linux就是path。</a></li>\n<li>query-string：查询字符串，比如：<a href=\"http://www.baidu.com/s?wd=python%EF%BC%8C%EF%BC%9F%E5%90%8E%E9%9D%A2%E7%9A%84python=aladdin%E5%B0%B1%E6%98%AF%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82\">www.baidu.com/s?wd=python，？后面的python=aladdin就是查询字符串。</a></li>\n<li>anchor：锚点，后台一般不用管，前端用来做页面定位的。比如：<a href=\"https://www.oldboyedu.com/Public/linux/?fr=aladdin#23\">https://www.oldboyedu.com/Public/linux/?fr=aladdin#23</a> ,#后面的23就是锚点</li>\n</ul>\n<h2 id=\"22-url与路由的区别\"><a class=\"markdownIt-Anchor\" href=\"#22-url与路由的区别\"></a> 2.2 URL与路由的区别</h2>\n<p>路由是根据url定位到具体的pyhon类或python函数的程序，这段程序我们称之为路由。</p>\n<p>在Flask程序中使用路由我们称之为<strong>注册路由</strong>，是使用程序实例提供的<strong>app.route（）<strong>装饰器注册路由，而</strong>括号内</strong>的字符串就是<strong>url</strong>，<strong>注册路由的过程就是完成了 url和python类或函数映射的过程</strong>，可以理解为会有一张表保存了url与python类或函数的对应关系。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"23-url传参的两种\"><a class=\"markdownIt-Anchor\" href=\"#23-url传参的两种\"></a> 2.3  url传参的两种</h2>\n<h3 id=\"231-动态路由传参\"><a class=\"markdownIt-Anchor\" href=\"#231-动态路由传参\"></a> 2.3.1 动态路由传参</h3>\n<p>URL中包含可变的部分，如：</p>\n<p>​\t根据学生的id找到具体的学生，<a href=\"http://127.0.0.1:5000/student_list/\">http://127.0.0.1:5000/student_list/</a>&lt;student_id&gt;/</p>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_list/&lt;student_id&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student_list</span>(<span class=\"params\">student_id</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;学生&#123;&#125;号的信息&#x27;</span>.<span class=\"built_in\">format</span>(student_id)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009220908482-1110597384.png\" alt=\"\" /></p>\n<h4 id=\"2311-动态路由过滤\"><a class=\"markdownIt-Anchor\" href=\"#2311-动态路由过滤\"></a> 2.3.1.1 动态路由过滤**</h4>\n<p>可以对参数限定数据类型，比如上面的文章详情，限定student_id必须为整数类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_list/&lt;int:student_id&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">article_detail</span>(<span class=\"params\">student_id</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;学生&#123;&#125;号的信息&#x27;</span>.<span class=\"built_in\">format</span>(student_id)</span><br></pre></td></tr></table></figure>\n<p><strong>主要有这几种类型过滤：</strong></p>\n<p><code>string</code>: 默认的数据类型，接收没有任何斜杠&quot;\\ /&quot;的字符串</p>\n<p><code>int</code>: 整型</p>\n<p><code>float</code>: 浮点型</p>\n<p><code>path</code>: 和string类型相似，但是接受斜杠，如：可以接受参数/aa/bb/cc/多条放在一起</p>\n<p><code>uuid</code>: 只接受uuid格式的字符串字符串，</p>\n<p><strong>注</strong>：uuid为全宇宙唯一的串</p>\n<p><code>any</code>: 可以<strong>指定多种路径</strong></p>\n<p>​\turl_path的变量名是自己定义的，可选：student，class</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可访问 127.0.0.1/student/1/ 或 127.0.0.1/class/1/ </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&lt;any(student,class):url_path&gt;/&lt;id&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">item</span>(<span class=\"params\">url_path, <span class=\"built_in\">id</span></span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> url_path == <span class=\"string\">&#x27;student&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;学生&#123;&#125;详情&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;班级&#123;&#125;详情&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"232-查询字符串传参\"><a class=\"markdownIt-Anchor\" href=\"#232-查询字符串传参\"></a> 2.3.2 查询字符串传参</h3>\n<p>查询字符串：</p>\n<p><a href=\"http://xn--www-eo8e.baidu.com/s?wd=python&amp;ad=flask%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C\">如www.baidu.com/s?wd=python&amp;ad=flask的参数，</a> <code>？</code> 后的key=value便是查询字符串， 可以写多个key=value用<code>&amp;</code>相连</p>\n<p>从<code>flask</code>模块里面导入<code>request</code>对象，用<code>request.args</code>属性在我们的程序中根据查询字符串的<code>key</code>取出查询字符串的<code>value</code>。</p>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 请求url: 127.0.0.1:5000/student_name/?name=mark&amp;age=18</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_name/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">school_name_list</span>():</span></span><br><span class=\"line\">    name = request.args.get(<span class=\"string\">&#x27;name&#x27;</span>)</span><br><span class=\"line\">    age = request.args.get(<span class=\"string\">&#x27;age&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;学生的姓名为&#123;&#125;，年龄为&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(name, age)</span><br></pre></td></tr></table></figure>\n<h2 id=\"24-url_for的使用\"><a class=\"markdownIt-Anchor\" href=\"#24-url_for的使用\"></a> 2.4 url_for的使用</h2>\n<h3 id=\"241-url_for的作用\"><a class=\"markdownIt-Anchor\" href=\"#241-url_for的作用\"></a> 2.4.1 url_for()的作用：</h3>\n<p>url的反向查询</p>\n<p>应对：即便改动url，也能追踪到改URL</p>\n<h3 id=\"242-url_for的原理\"><a class=\"markdownIt-Anchor\" href=\"#242-url_for的原理\"></a> 2.4.2 url_for()的原理：</h3>\n<p>利用视图函数名字一般不会改变的特性，利用视图函数的<code>名字</code>去动态精准的获取url，以便于开发使用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(<span class=\"string\">&#x27;视图函数名字&#x27;</span>)   <span class=\"comment\"># 输出该视图函数url</span></span><br></pre></td></tr></table></figure>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, url_for</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.update(DEBUG=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo1</span>():</span></span><br><span class=\"line\">    print(url_for(<span class=\"string\">&quot;book&quot;</span>))  <span class=\"comment\"># 注意这个引用的是视图函数的名字 为字符串格式</span></span><br><span class=\"line\">    print(<span class=\"built_in\">type</span>(url_for(<span class=\"string\">&quot;book&quot;</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_for(<span class=\"string\">&quot;book&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/book_list/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">book</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;flask_book&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ ==  <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<h3 id=\"243-url_for-处理动态的视图函数动态路由\"><a class=\"markdownIt-Anchor\" href=\"#243-url_for-处理动态的视图函数动态路由\"></a> 2.4.3 url_for 处理动态的视图函数（动态路由）</h3>\n<p>想获取动态路由，必须<strong>以关键字实参的形式 为动态的path部分赋值</strong>，注意动态的path部分必须被赋值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/demo2/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo2</span>():</span></span><br><span class=\"line\">    student_url = url_for(<span class=\"string\">&#x27;student&#x27;</span>, <span class=\"built_in\">id</span>=<span class=\"number\">5</span>, name=<span class=\"string\">&#x27;mark&#x27;</span>) <span class=\"comment\"># id 就是动态path的key 必须赋值，# name 将作为查询字符串传入</span></span><br><span class=\"line\">    print(student_url)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> student_url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student/&lt;int:id&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student</span>(<span class=\"params\"><span class=\"built_in\">id</span></span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;student &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 控制台输出：</span></span><br><span class=\"line\">/student/5/?name=mark</span><br></pre></td></tr></table></figure>\n<h3 id=\"244-url_for为url添加查询字符串\"><a class=\"markdownIt-Anchor\" href=\"#244-url_for为url添加查询字符串\"></a> 2.4.4  url_for为url添加查询字符串</h3>\n<p>想在路径后面拼出来查询字符串，以关键字实参的形式放到url_for()里面作为参数，会自动拼成路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/demo3/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo3</span>():</span></span><br><span class=\"line\">    school_url = url_for(<span class=\"string\">&#x27;school&#x27;</span>, school_level=<span class=\"string\">&#x27;high&#x27;</span>, name=<span class=\"string\">&#x27;college&#x27;</span>) </span><br><span class=\"line\">    <span class=\"comment\"># 具体要拼接的查询参数 以关键字实参的形式写在url_for里</span></span><br><span class=\"line\">    print(school_url)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> school_url</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/school/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">school</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;school message&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 控制台输出：</span></span><br><span class=\"line\">/school/?school_level=high&amp;name=college</span><br></pre></td></tr></table></figure>\n<h3 id=\"245-自定义动态路由过滤器之正则匹配\"><a class=\"markdownIt-Anchor\" href=\"#245-自定义动态路由过滤器之正则匹配\"></a> 2.4.5  自定义动态路由过滤器之正则匹配</h3>\n<p>通过继承<code>werkzeug.routing 的BaseConverter</code>类从而自己定义一个动态路由过滤器的规则</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.routing <span class=\"keyword\">import</span> BaseConverter</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug =<span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TelephoneConverter</span>(<span class=\"params\">BaseConverter</span>):</span></span><br><span class=\"line\">    regex = <span class=\"string\">&#x27;1[3857]\\d&#123;9&#125;&#x27;</span> <span class=\"comment\">#右下斜杠d</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.url_map.converters[<span class=\"string\">&#x27;tel&#x27;</span>] = TelephoneConverter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student/&lt;tel:telenum&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student_detail</span>(<span class=\"params\">telenum</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;学生的手机号码是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(telenum)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong></p>\n<ol>\n<li>\n<p>自定义动态路由过滤器类，该类必须继承<code>werkzeug.routing</code> 的<code>BaseConverter</code>类</p>\n</li>\n<li>\n<p>通过<code>regex</code>属性指定路由规则</p>\n</li>\n<li>\n<p>讲自定义的类映射到<code>app.url_map.converters</code>中（其本质是一个字典）</p>\n<p><code>app.url_map.converters['tel'] = TelephoneConverter</code></p>\n</li>\n<li>\n<p>app.url_map下的默认的路由规则</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#: the default converter mapping for the map.</span></span><br><span class=\"line\">DEFAULT_CONVERTERS = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;default&quot;</span>: UnicodeConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;string&quot;</span>: UnicodeConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;any&quot;</span>: AnyConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;path&quot;</span>: PathConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;int&quot;</span>: IntegerConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;float&quot;</span>: FloatConverter,</span><br><span class=\"line\">    <span class=\"string\">&quot;uuid&quot;</span>: UUIDConverter,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"2451-自定义动态路由过滤器之处理动态路由\"><a class=\"markdownIt-Anchor\" href=\"#2451-自定义动态路由过滤器之处理动态路由\"></a> 2.4.5.1 自定义动态路由过滤器之处理动态路由</h4>\n<p>自定义一个类，该通过继承<code>werkzeug.routing 的BaseConverter</code>类不光可以实现正则匹配，我们介绍一下以下两个方法：</p>\n<ul>\n<li>\n<p>在该类中实现 <code>to_python</code> 方法：</p>\n<p>这个方法的返回值，将会传递给视图函数的形参。我们可以利用这个方法实现处理url中动态路由部分。</p>\n</li>\n<li>\n<p>在该类中实现 <code>to_url</code> 方法：</p>\n<p>翻转url的时候也就是使用url_for函数的时候，我们传入指定的动态路由部分，触发to_url方法，这个方法的返回值，会拼接在非动态路由上，从而实现生成符合要求的url格式。</p>\n</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request,url_for</span><br><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.routing <span class=\"keyword\">import</span> BaseConverter</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug =<span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListConverter</span>(<span class=\"params\">BaseConverter</span>):</span></span><br><span class=\"line\">    regex = <span class=\"string\">&#x27;.*&#x27;</span>     <span class=\"comment\"># 这个regex代表都匹配的意思，可以根据自己的需求制定url规则</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_python</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;这个函数用于拿到了路由里的动态参数赋值给value，</span></span><br><span class=\"line\"><span class=\"string\">          可以在to_python进行操作动态参数，</span></span><br><span class=\"line\"><span class=\"string\">          返回操作完的的结果给视图函数的形参&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.split(<span class=\"string\">&#x27;+&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_url</span>(<span class=\"params\">self, value</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;这个函数用于和url_for连用，</span></span><br><span class=\"line\"><span class=\"string\">           url_for通过指定给动态参数(以关键字实参的形式)赋值给value</span></span><br><span class=\"line\"><span class=\"string\">           我们可以根据我们的需求操作url_for传进来的参数，</span></span><br><span class=\"line\"><span class=\"string\">           然后返回一个理想的动态路由内容拼接在url上&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;+&#x27;</span>.join(value)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.url_map.converters[<span class=\"string\">&#x27;list&#x27;</span>] = ListConverter</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_list/&lt;list:students&gt;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student_list</span>(<span class=\"params\">students</span>):</span></span><br><span class=\"line\">    print(url_for(<span class=\"string\">&#x27;student_list&#x27;</span>,students=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>])) <span class=\"comment\"># 输出 /student_list/a+b/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(students)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>证明<code>to_python()</code>方法把访问时候动态路由部分被处理成列表了。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221628236-97482956.png\" alt=\"\" /></p>\n<p>证明我们的 <code>to_url()</code> 方法把<code>url_for()</code>函数传入的动态路由部分由列表转换成拼接字符串了。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009221642997-497647337.png\" alt=\"\" /></p>\n","categories":[{"name":"python框架 - flask","path":"api/categories/python框架 - flask.json"}],"tags":[{"name":"flask","path":"api/tags/flask.json"}]}