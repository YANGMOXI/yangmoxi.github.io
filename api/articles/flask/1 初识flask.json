{"title":"1 初识flask","slug":"flask/1 初识flask","date":"2021-01-18T11:39:27.067Z","updated":"2021-01-19T08:29:41.743Z","comments":true,"path":"api/articles/flask/1 初识flask.json","excerpt":null,"covers":["https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009215339123-953412299.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009215353326-119321491.png"],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n<p>转自：<a href=\"https://www.cnblogs.com/xiaoyuanqujing/p/11637949.html\">小猿取经</a></p>\n<p>视频：<a href=\"https://www.bilibili.com/video/av73329405/\">五天从入门到熟练flask框架</a></p>\n<p>flask性能上基本满足一般web开发的需求, 并且灵活性以及可扩展性上要优于其他web框架, 对各种数据库的契合度都非常高</p>\n<p><strong>关键词</strong>：</p>\n<ol>\n<li>\n<p>性能基本满足需求</p>\n</li>\n<li>\n<p>灵活性可拓展性强</p>\n</li>\n<li>\n<p>对各种数据库的契合度都比较高。</p>\n</li>\n<li>\n<p>在真实的生产环境下，小项目开发快，大项目设计灵活</p>\n</li>\n</ol>\n<h2 id=\"1-在虚拟环境中安装flask模块\"><a class=\"markdownIt-Anchor\" href=\"#1-在虚拟环境中安装flask模块\"></a> 1 在虚拟环境中安装Flask模块</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install\tflask</span><br></pre></td></tr></table></figure>\n<p>从上面成功安装的输出内容可以看出，除了Flask包外，同时被安装的还有5个依赖包，它们的主要介绍如表（1-1）所示。</p>\n<table>\n<thead>\n<tr>\n<th>包名及版本</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Jinja2-2.10</td>\n<td>渲染模板引擎工具集</td>\n</tr>\n<tr>\n<td>MarkupSafe-1.1.0</td>\n<td>可以识别HTML转义规则。HTML字符转义工具集</td>\n</tr>\n<tr>\n<td>Werkzeug-0.14.1</td>\n<td>Web 框架的底层库，提供了请求及响应以及开发服务器的功能，简称WSGI工具集</td>\n</tr>\n<tr>\n<td>click-7.0</td>\n<td>命令行工具集</td>\n</tr>\n<tr>\n<td>itsdangerous-1.1.0</td>\n<td>加密工具集</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-开始第一个flask程序\"><a class=\"markdownIt-Anchor\" href=\"#2-开始第一个flask程序\"></a> 2 开始第一个Flask程序</h2>\n<h3 id=\"21-项目目录\"><a class=\"markdownIt-Anchor\" href=\"#21-项目目录\"></a> <strong>2.1 项目目录</strong></h3>\n<ul>\n<li>\n<p>“<strong>static文件夹</strong>”用于存放各种静态文件 css、js、图片等等</p>\n</li>\n<li>\n<p>“<strong>templates文件夹</strong>”用于存放html模板文件</p>\n</li>\n<li>\n<p>“<strong><a href=\"http://app.py\">app.py</a></strong>”为我们的主文件 ，启动项目需要启动该文件</p>\n</li>\n</ul>\n<h3 id=\"22-apppy-代码解读\"><a class=\"markdownIt-Anchor\" href=\"#22-apppy-代码解读\"></a> <strong>2.2 <a href=\"http://app.py\">app.py</a> 代码解读</strong></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)  <span class=\"comment\"># 实例化这个Flask类的到一个实例化对象app； __name__变量指代 当前py文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)     </span><span class=\"comment\"># 以装饰器实现 —— 匹配url</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span>  <span class=\"comment\"># 视图函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:  <span class=\"comment\"># 保证代码只用于开发环境</span></span><br><span class=\"line\">    app.run()   <span class=\"comment\"># 内部定义了默认的 ip+端口为127.0.0.1:5000，并且调用了werkzeug.serving为我们创建了一个开发服务器（由依赖包Werkzeug提供）</span></span><br></pre></td></tr></table></figure>\n<p>app.run()底层代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self, host=<span class=\"literal\">None</span>, port=<span class=\"literal\">None</span>, debug=<span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            load_dotenv=<span class=\"literal\">True</span>, **options</span>):</span></span><br><span class=\"line\">    \t ...        </span><br><span class=\"line\">         _host =<span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">         _port = <span class=\"number\">5000</span>        </span><br><span class=\"line\">         ...            </span><br><span class=\"line\">         host = host <span class=\"keyword\">or</span> sn_host <span class=\"keyword\">or</span> _host</span><br><span class=\"line\">         port = <span class=\"built_in\">int</span>(port <span class=\"keyword\">or</span> sn_port <span class=\"keyword\">or</span> _port)          </span><br><span class=\"line\">         ...</span><br><span class=\"line\">         <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                run_simple(host, port, self, **options)</span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"comment\"># reset the first request information if the development server</span></span><br><span class=\"line\">                <span class=\"comment\"># reset normally.  This makes it possible to restart the server</span></span><br><span class=\"line\">                <span class=\"comment\"># without reloader and that stuff from an interactive shell.</span></span><br><span class=\"line\">                self._got_first_request = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"221-werkzeug简介\"><a class=\"markdownIt-Anchor\" href=\"#221-werkzeug简介\"></a> <strong>2.2.1 Werkzeug简介</strong></h4>\n<ul>\n<li>Werkzeug是一个WSGI工具包，他可以作为一个Web框架的底层库。内部封装了例如 Request，Response 等等 。</li>\n<li>flask基于Werkzeug,flask只保留了web开发的核心功能。</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.wrappers <span class=\"keyword\">import</span> Request, Response</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Request.application</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(<span class=\"string\">&#x27;Hello World!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</span><br><span class=\"line\">    run_simple(<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"number\">4000</span>, hello)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>原理：</p>\n<p>1 app.run() 调用 werkzeug.serving的run_simple(host, port, self, **options)</p>\n<p>2 self()等价于app(), app()调用Flask类的__call__方法</p>\n<p>3 Flask类的__call__方法返回了 self.wsgi_app(environ, start_response)</p>\n<p>4 flask程序的执行过程都在 self.wsgi_app(environ, start_response)中</p>\n<p>具体代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self, host=<span class=\"literal\">None</span>, port=<span class=\"literal\">None</span>, debug=<span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            load_dotenv=<span class=\"literal\">True</span>, **options</span>):</span></span><br><span class=\"line\">       </span><br><span class=\"line\">    \t ...</span><br><span class=\"line\">        </span><br><span class=\"line\">         _host =<span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">         _port = <span class=\"number\">5000</span></span><br><span class=\"line\">        </span><br><span class=\"line\">         ...</span><br><span class=\"line\">            </span><br><span class=\"line\">         host = host <span class=\"keyword\">or</span> sn_host <span class=\"keyword\">or</span> _host</span><br><span class=\"line\">         port = <span class=\"built_in\">int</span>(port <span class=\"keyword\">or</span> sn_port <span class=\"keyword\">or</span> _port)</span><br><span class=\"line\">            </span><br><span class=\"line\">         ...</span><br><span class=\"line\">    </span><br><span class=\"line\">         <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                run_simple(host, port, self, **options)</span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"comment\"># reset the first request information if the development server</span></span><br><span class=\"line\">                <span class=\"comment\"># reset normally.  This makes it possible to restart the server</span></span><br><span class=\"line\">                <span class=\"comment\"># without reloader and that stuff from an interactive shell.</span></span><br><span class=\"line\">                self._got_first_request = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, environ, start_response</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;The WSGI server calls the Flask application object as the</span></span><br><span class=\"line\"><span class=\"string\">        WSGI application. This calls :meth:`wsgi_app` which can be</span></span><br><span class=\"line\"><span class=\"string\">        wrapped to applying middleware.&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.wsgi_app(environ, start_response)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wsgi_app</span>(<span class=\"params\">self, environ, start_response</span>):</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        ctx = self.request_context(environ)</span><br><span class=\"line\">        error = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                ctx.push()</span><br><span class=\"line\">                response = self.full_dispatch_request()</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                error = e</span><br><span class=\"line\">                response = self.handle_exception(e)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                error = sys.exc_info()[<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">raise</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> response(environ, start_response)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.should_ignore_error(error):</span><br><span class=\"line\">                error = <span class=\"literal\">None</span></span><br><span class=\"line\">            ctx.auto_pop(error)</span><br><span class=\"line\">   ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"222-运行项目\"><a class=\"markdownIt-Anchor\" href=\"#222-运行项目\"></a> <strong>2.2.2 运行项目</strong></h4>\n<p>在app.py中右键run启动项目</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009215339123-953412299.png\" alt=\"img\" /></p>\n<p>浏览器访问：<a href=\"http://127.0.0.1:5000\">http://127.0.0.1:5000</a><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009215353326-119321491.png\" alt=\"img\" /></p>\n<h4 id=\"223-debug模式\"><a class=\"markdownIt-Anchor\" href=\"#223-debug模式\"></a> <strong>2.2.3 DEBUG模式</strong></h4>\n<p><strong>DEBUG模式解决了两个问题。</strong></p>\n<ol>\n<li>flask代码中如果出现了异常，我们在浏览器中不会提示具体的错误信息，开启debug模式后会把具体的错误信息发送到浏览器上。</li>\n<li>flask代码如果被修改了，必须要重启项目修改的代码才会有效，开启debug模式后我们修改了代码只要<code>ctrl+s</code>我们的flask项目就会自动重新加载，不需要手动加载整个网站。</li>\n</ol>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)   <span class=\"comment\"># 开启debug模式</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"四种开启debug的方式\"><a class=\"markdownIt-Anchor\" href=\"#四种开启debug的方式\"></a> <strong>四种开启DEBUG的方式</strong></h5>\n<p>第一种</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)  <span class=\"comment\"># 设置</span></span><br></pre></td></tr></table></figure>\n<p><strong>第二种</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span>  <span class=\"comment\"># 设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>第三种</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.update(DEBUG=<span class=\"literal\">True</span>)  <span class=\"comment\"># 设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>第四种</strong></p>\n<p>需要在<code>app.py</code>所在的目录里 再创建一个<code>config.py</code>，随着我们的学习会越来越多的用到这个配置文件，来配置我们的<code>flask</code>项目，注意配置的信息一般为大写。</p>\n<p><a href=\"http://config.py\">config.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://app.py\">app.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">import</span> config  <span class=\"comment\"># 导入</span></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config.from_object(config)  <span class=\"comment\"># 设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>： app.config 本质上继承的字典，是字典的子类的一个对象</p>\n","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n<p>转自：<a href=\"https://www.cnblogs.com/xiaoyuanqujing/p/11637949.html\">小猿取经</a></p>\n<p>视频：<a href=\"https://www.bilibili.com/video/av73329405/\">五天从入门到熟练flask框架</a></p>\n<p>flask性能上基本满足一般web开发的需求, 并且灵活性以及可扩展性上要优于其他web框架, 对各种数据库的契合度都非常高</p>\n<p><strong>关键词</strong>：</p>\n<ol>\n<li>\n<p>性能基本满足需求</p>\n</li>\n<li>\n<p>灵活性可拓展性强</p>\n</li>\n<li>\n<p>对各种数据库的契合度都比较高。</p>\n</li>\n<li>\n<p>在真实的生产环境下，小项目开发快，大项目设计灵活</p>\n</li>\n</ol>\n<h2 id=\"1-在虚拟环境中安装flask模块\"><a class=\"markdownIt-Anchor\" href=\"#1-在虚拟环境中安装flask模块\"></a> 1 在虚拟环境中安装Flask模块</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install\tflask</span><br></pre></td></tr></table></figure>\n<p>从上面成功安装的输出内容可以看出，除了Flask包外，同时被安装的还有5个依赖包，它们的主要介绍如表（1-1）所示。</p>\n<table>\n<thead>\n<tr>\n<th>包名及版本</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Jinja2-2.10</td>\n<td>渲染模板引擎工具集</td>\n</tr>\n<tr>\n<td>MarkupSafe-1.1.0</td>\n<td>可以识别HTML转义规则。HTML字符转义工具集</td>\n</tr>\n<tr>\n<td>Werkzeug-0.14.1</td>\n<td>Web 框架的底层库，提供了请求及响应以及开发服务器的功能，简称WSGI工具集</td>\n</tr>\n<tr>\n<td>click-7.0</td>\n<td>命令行工具集</td>\n</tr>\n<tr>\n<td>itsdangerous-1.1.0</td>\n<td>加密工具集</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-开始第一个flask程序\"><a class=\"markdownIt-Anchor\" href=\"#2-开始第一个flask程序\"></a> 2 开始第一个Flask程序</h2>\n<h3 id=\"21-项目目录\"><a class=\"markdownIt-Anchor\" href=\"#21-项目目录\"></a> <strong>2.1 项目目录</strong></h3>\n<ul>\n<li>\n<p>“<strong>static文件夹</strong>”用于存放各种静态文件 css、js、图片等等</p>\n</li>\n<li>\n<p>“<strong>templates文件夹</strong>”用于存放html模板文件</p>\n</li>\n<li>\n<p>“<strong><a href=\"http://app.py\">app.py</a></strong>”为我们的主文件 ，启动项目需要启动该文件</p>\n</li>\n</ul>\n<h3 id=\"22-apppy-代码解读\"><a class=\"markdownIt-Anchor\" href=\"#22-apppy-代码解读\"></a> <strong>2.2 <a href=\"http://app.py\">app.py</a> 代码解读</strong></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)  <span class=\"comment\"># 实例化这个Flask类的到一个实例化对象app； __name__变量指代 当前py文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)     </span><span class=\"comment\"># 以装饰器实现 —— 匹配url</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span>  <span class=\"comment\"># 视图函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:  <span class=\"comment\"># 保证代码只用于开发环境</span></span><br><span class=\"line\">    app.run()   <span class=\"comment\"># 内部定义了默认的 ip+端口为127.0.0.1:5000，并且调用了werkzeug.serving为我们创建了一个开发服务器（由依赖包Werkzeug提供）</span></span><br></pre></td></tr></table></figure>\n<p>app.run()底层代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self, host=<span class=\"literal\">None</span>, port=<span class=\"literal\">None</span>, debug=<span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            load_dotenv=<span class=\"literal\">True</span>, **options</span>):</span></span><br><span class=\"line\">    \t ...        </span><br><span class=\"line\">         _host =<span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">         _port = <span class=\"number\">5000</span>        </span><br><span class=\"line\">         ...            </span><br><span class=\"line\">         host = host <span class=\"keyword\">or</span> sn_host <span class=\"keyword\">or</span> _host</span><br><span class=\"line\">         port = <span class=\"built_in\">int</span>(port <span class=\"keyword\">or</span> sn_port <span class=\"keyword\">or</span> _port)          </span><br><span class=\"line\">         ...</span><br><span class=\"line\">         <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                run_simple(host, port, self, **options)</span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"comment\"># reset the first request information if the development server</span></span><br><span class=\"line\">                <span class=\"comment\"># reset normally.  This makes it possible to restart the server</span></span><br><span class=\"line\">                <span class=\"comment\"># without reloader and that stuff from an interactive shell.</span></span><br><span class=\"line\">                self._got_first_request = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"221-werkzeug简介\"><a class=\"markdownIt-Anchor\" href=\"#221-werkzeug简介\"></a> <strong>2.2.1 Werkzeug简介</strong></h4>\n<ul>\n<li>Werkzeug是一个WSGI工具包，他可以作为一个Web框架的底层库。内部封装了例如 Request，Response 等等 。</li>\n<li>flask基于Werkzeug,flask只保留了web开发的核心功能。</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> werkzeug.wrappers <span class=\"keyword\">import</span> Request, Response</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Request.application</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>(<span class=\"params\">request</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(<span class=\"string\">&#x27;Hello World!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</span><br><span class=\"line\">    run_simple(<span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"number\">4000</span>, hello)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>原理：</p>\n<p>1 app.run() 调用 werkzeug.serving的run_simple(host, port, self, **options)</p>\n<p>2 self()等价于app(), app()调用Flask类的__call__方法</p>\n<p>3 Flask类的__call__方法返回了 self.wsgi_app(environ, start_response)</p>\n<p>4 flask程序的执行过程都在 self.wsgi_app(environ, start_response)中</p>\n<p>具体代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self, host=<span class=\"literal\">None</span>, port=<span class=\"literal\">None</span>, debug=<span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            load_dotenv=<span class=\"literal\">True</span>, **options</span>):</span></span><br><span class=\"line\">       </span><br><span class=\"line\">    \t ...</span><br><span class=\"line\">        </span><br><span class=\"line\">         _host =<span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">         _port = <span class=\"number\">5000</span></span><br><span class=\"line\">        </span><br><span class=\"line\">         ...</span><br><span class=\"line\">            </span><br><span class=\"line\">         host = host <span class=\"keyword\">or</span> sn_host <span class=\"keyword\">or</span> _host</span><br><span class=\"line\">         port = <span class=\"built_in\">int</span>(port <span class=\"keyword\">or</span> sn_port <span class=\"keyword\">or</span> _port)</span><br><span class=\"line\">            </span><br><span class=\"line\">         ...</span><br><span class=\"line\">    </span><br><span class=\"line\">         <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                run_simple(host, port, self, **options)</span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"comment\"># reset the first request information if the development server</span></span><br><span class=\"line\">                <span class=\"comment\"># reset normally.  This makes it possible to restart the server</span></span><br><span class=\"line\">                <span class=\"comment\"># without reloader and that stuff from an interactive shell.</span></span><br><span class=\"line\">                self._got_first_request = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, environ, start_response</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;The WSGI server calls the Flask application object as the</span></span><br><span class=\"line\"><span class=\"string\">        WSGI application. This calls :meth:`wsgi_app` which can be</span></span><br><span class=\"line\"><span class=\"string\">        wrapped to applying middleware.&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.wsgi_app(environ, start_response)</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wsgi_app</span>(<span class=\"params\">self, environ, start_response</span>):</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        ctx = self.request_context(environ)</span><br><span class=\"line\">        error = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                ctx.push()</span><br><span class=\"line\">                response = self.full_dispatch_request()</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                error = e</span><br><span class=\"line\">                response = self.handle_exception(e)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                error = sys.exc_info()[<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">raise</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> response(environ, start_response)</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.should_ignore_error(error):</span><br><span class=\"line\">                error = <span class=\"literal\">None</span></span><br><span class=\"line\">            ctx.auto_pop(error)</span><br><span class=\"line\">   ...</span><br></pre></td></tr></table></figure>\n<h4 id=\"222-运行项目\"><a class=\"markdownIt-Anchor\" href=\"#222-运行项目\"></a> <strong>2.2.2 运行项目</strong></h4>\n<p>在app.py中右键run启动项目</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009215339123-953412299.png\" alt=\"img\" /></p>\n<p>浏览器访问：<a href=\"http://127.0.0.1:5000\">http://127.0.0.1:5000</a><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009215353326-119321491.png\" alt=\"img\" /></p>\n<h4 id=\"223-debug模式\"><a class=\"markdownIt-Anchor\" href=\"#223-debug模式\"></a> <strong>2.2.3 DEBUG模式</strong></h4>\n<p><strong>DEBUG模式解决了两个问题。</strong></p>\n<ol>\n<li>flask代码中如果出现了异常，我们在浏览器中不会提示具体的错误信息，开启debug模式后会把具体的错误信息发送到浏览器上。</li>\n<li>flask代码如果被修改了，必须要重启项目修改的代码才会有效，开启debug模式后我们修改了代码只要<code>ctrl+s</code>我们的flask项目就会自动重新加载，不需要手动加载整个网站。</li>\n</ol>\n<p>代码示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)   <span class=\"comment\"># 开启debug模式</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"四种开启debug的方式\"><a class=\"markdownIt-Anchor\" href=\"#四种开启debug的方式\"></a> <strong>四种开启DEBUG的方式</strong></h5>\n<p>第一种</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)  <span class=\"comment\"># 设置</span></span><br></pre></td></tr></table></figure>\n<p><strong>第二种</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span>  <span class=\"comment\"># 设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>第三种</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.update(DEBUG=<span class=\"literal\">True</span>)  <span class=\"comment\"># 设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>第四种</strong></p>\n<p>需要在<code>app.py</code>所在的目录里 再创建一个<code>config.py</code>，随着我们的学习会越来越多的用到这个配置文件，来配置我们的<code>flask</code>项目，注意配置的信息一般为大写。</p>\n<p><a href=\"http://config.py\">config.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEBUG = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://app.py\">app.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">import</span> config  <span class=\"comment\"># 导入</span></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config.from_object(config)  <span class=\"comment\"># 设置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">    print(a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>： app.config 本质上继承的字典，是字典的子类的一个对象</p>\n","categories":[{"name":"flask","path":"api/categories/flask.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"flask","path":"api/tags/flask.json"}]}