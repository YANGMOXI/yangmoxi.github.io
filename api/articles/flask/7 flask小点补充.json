{"title":"7 flask小点补充","slug":"flask/7 flask小点补充","date":"2021-01-18T09:01:48.487Z","updated":"2021-01-18T15:02:36.360Z","comments":true,"path":"api/articles/flask/7 flask小点补充.json","excerpt":null,"covers":["https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133265-1996976369..jpg","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133532-1177892422..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133751-1539354373..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133940-1885846214..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134138-1836502968..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134340-896718454..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134529-315038539..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134741-2012530184..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134936-1531826233..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135123-1069381446..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135301-180033248..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135784-444930551..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135938-1085978225..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136144-1923310819..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136359-420093650..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136681-1046277379..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136850-2054093429..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137020-1828638087..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137209-326713179..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137356-1128605837..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137512-1371028199..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137970-224747758..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155138240-12907379..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155139453-249225863..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155140542-1156156426..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155141774-1627594844..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155142726-1681318289..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143713-1931514309..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143887-2108757345..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144215-1937103247..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144365-2146703891..png"],"content":"<h1 id=\"1-cookie\"><a class=\"markdownIt-Anchor\" href=\"#1-cookie\"></a> 1 cookie</h1>\n<h2 id=\"11-什么是cookie\"><a class=\"markdownIt-Anchor\" href=\"#11-什么是cookie\"></a> 1.1 什么是cookie？</h2>\n<p><code>cookie</code>技术产生源于<code>HTTP</code>协议在互联网上的急速发展，在浏览器发展初期，为了适应用户的需求，技术上推出了各种保持web浏览状态的手段，为什么要保持web浏览器的状态呢？</p>\n<p>一般<code>web</code>通信是基于<code>HTTP</code>的，<code>HTTP</code>是无状态的协议，也就是说，在一次请求响应结束后，服务器不会留下任何有关于对方状态信息，所以需要保持web浏览器的状态。</p>\n<p>比如：对于有些web应用来说，客户端的某些信息必须被记住。比如用户登录过后跳转页面依然要保持登录的状态，进行其他的业务访问，而当这个登录过的用户再次访问web服务器的时候，web服务器并不知道这个用户已经登录过了，所以无法进行其他需要权限的业务访问。所以<code>cookie</code>技术的出现就是为了解决这个问题。</p>\n<p><code>cookie</code>的具体实现过程：当一个用户访问<code>web</code>服务器后，<code>web</code>服务器会获取用户的状态并且返回一些数据（cookie）给浏览器，浏览器会自动储存这些数据（cookie），当用户再次访问web服务器，浏览器会把cookie放到请求报文中发送给web服务器，web服务器就会获取到了用户的状态。基于这次用户的状态方便用户进行其他业务的访问，并且web服务器可以设置浏览器保存cookie的时间，cookie是有域名的概念，只有访问同一个域名的时候才会把之前相同域名返回的cookie携带给该web服务器。</p>\n<p><em>附注：1993年，网景公司雇员<code>Lou Montulli</code>为了提升用户体验，进一步实现了个人化网络。发明了今天广泛使用的<code>Cookie</code>。</em></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133265-1996976369..jpg\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133265-1996976369..jpg\" alt=\"img\" /></a></p>\n<p><strong>关键词</strong>：</p>\n<ul>\n<li><code>web</code>通讯一般基于<code>HTTP</code>协议，<code>HTTP</code>是无状态协议。</li>\n<li><code>Cookie</code>技术是用来保持<code>web</code>访问状态，<code>Cookie</code>技术通过在请求和响应报文中添加<code>Cookie</code>数据来保存客户端的状态信息</li>\n<li>服务器可以设置<code>cookie</code>的有效期，浏览器会自动清除过期的<code>cookie</code>。</li>\n<li><code>cookie</code>有域名的概念，只有访问同一个域名，才会把之前相同域名返回的cookie携带给该服务器。</li>\n</ul>\n<h2 id=\"12-如何在flask中使用cookie\"><a class=\"markdownIt-Anchor\" href=\"#12-如何在flask中使用cookie\"></a> 1.2 如何在flask中使用cookie？</h2>\n<h3 id=\"121-设置cookie\"><a class=\"markdownIt-Anchor\" href=\"#121-设置cookie\"></a> 1.2.1 设置cookie</h3>\n<p>设置<code>cookie</code>的时候是由我们<code>web</code>服务器设置，也就是在<code>Flask</code>项目中生成<code>cookie</code>，经由响应报文返回给浏览器保存<code>cookie</code>，下次浏览器再访问<code>web</code>服务器的时会在请求报文中把<code>cookie</code>携带过来，所以<code>cookie</code>产生的起点是在web服务器中，也就是我们的Flask项目中。</p>\n<p>在Flask中如果想要在响应中添加一个cookie，最方便的做法是使用内置的<code>Response</code>类提供的<code>set_cookie()</code>方法。</p>\n<p><strong>表-2.2.1.1 set_cookie()方法的参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td><code>cookie</code>的键（名称）</td>\n</tr>\n<tr>\n<td>value</td>\n<td><code>cookie</code>的值</td>\n</tr>\n<tr>\n<td>max_age</td>\n<td><code>cookie</code>被保存的时间数，单位为秒。</td>\n</tr>\n<tr>\n<td>expires</td>\n<td>具体的过期时间，一个<code>datetime</code>对象或UNIX时间戳</td>\n</tr>\n<tr>\n<td>path</td>\n<td>限制<code>cookie</code>只在给定的路径可用，默认为整个域名下路径都可用</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>设置<code>cookie</code>可用的域名，默认是当前域名，子域名需要利用通配符<code>domain=.当前域名</code></td>\n</tr>\n<tr>\n<td>secure</td>\n<td>如果设为<code>True</code>，只有通过<code>HTTPS</code>才可以用</td>\n</tr>\n<tr>\n<td>httponly</td>\n<td>如果设为<code>True</code>，进制客户端<code>JavaScript</code>获取<code>cookie</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1212-示例设置cookie\"><a class=\"markdownIt-Anchor\" href=\"#1212-示例设置cookie\"></a> 1.2.1.2 示例：设置cookie</h4>\n<p>项目目录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  app.py</span><br><span class=\"line\">│</span><br><span class=\"line\">├─static\t<span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">└─templates <span class=\"comment\"># 文件夹</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://app.py\">app.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, Response</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;设置cookie给浏览器&#x27;</span>)</span><br><span class=\"line\">    resp.set_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>, <span class=\"string\">&#x27;mark&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>解读 <a href=\"http://app.py\">app.py</a></strong>：</p>\n<p><strong>(1)</strong> 首先导入<code>Flask</code>内置的<code>Response</code>类，用于在响应报文中设置<code>cookie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request, Response</span><br></pre></td></tr></table></figure>\n<p><strong>(2)</strong> 在视图函数实例化<code>Response</code>类并传入返回的内容，<code>Response</code>类实例化出的对象调用<code>set_cookie()</code>方 法，set_cookie内的第一个参数是设置cookie的<code>key</code>，第二个参数是用来设置cookie的<code>value</code>，然后返回该对象，就会携带着设置好的<code>cookie</code>返回给浏览器保存。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;设置cookie给浏览器&#x27;</span>)</span><br><span class=\"line\">    resp.set_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>, <span class=\"string\">&#x27;mark&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br></pre></td></tr></table></figure>\n<h4 id=\"1213-在浏览器中查看cookie的三种方式以chrome浏览器为例\"><a class=\"markdownIt-Anchor\" href=\"#1213-在浏览器中查看cookie的三种方式以chrome浏览器为例\"></a> 1.2.1.3 在浏览器中查看cookie的三种方式（以Chrome浏览器为例）**</h4>\n<p><strong>基于2.2.1.2实例</strong></p>\n<p><strong>第一种</strong>: 右键检查-----&gt;Network----&gt;找到访问的域名----&gt;找到Response Headers----&gt;Set-Cookie</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133532-1177892422..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133532-1177892422..png\" alt=\"1550736406457\" /></a></p>\n<p><strong>第二种</strong>：点击url输入框左边的信息icon，然后找到响应的域名，展开查看cookie。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133751-1539354373..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133751-1539354373..png\" alt=\"1550736586670\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133940-1885846214..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133940-1885846214..png\" alt=\"1550736643161\" /></a></p>\n<p><strong>第三种</strong>：设置----&gt;高级----&gt;内容设置----&gt;Cookie----&gt;查看所有cookie设置-----&gt;根据域名搜索对应的cookie信息</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134138-1836502968..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134138-1836502968..png\" alt=\"1550740317286\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134340-896718454..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134340-896718454..png\" alt=\"1550740351876\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134529-315038539..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134529-315038539..png\" alt=\"1550740399039\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134741-2012530184..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134741-2012530184..png\" alt=\"1550740431743\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134936-1531826233..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134936-1531826233..png\" alt=\"1550740461224\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135123-1069381446..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135123-1069381446..png\" alt=\"1550740533491\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135301-180033248..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135301-180033248..png\" alt=\"1550740558622\" /></a></p>\n<h3 id=\"122-设置cookie的有效期\"><a class=\"markdownIt-Anchor\" href=\"#122-设置cookie的有效期\"></a> 1.2.2 设置cookie的有效期</h3>\n<p><strong>注意：Flask服务器默认设置cookie有效期为关闭浏览器后cookie失效</strong>。</p>\n<h4 id=\"1221-基于max_age参数设置cookie有效期\"><a class=\"markdownIt-Anchor\" href=\"#1221-基于max_age参数设置cookie有效期\"></a> 1.2.2.1 基于max_age参数设置cookie有效期</h4>\n<p>再设置<code>cookie</code>的调用<code>set_cookie()</code>时候传入关键字实参 <code>max_age= 值</code>，这个<code>值</code>代表多少秒后过期。</p>\n<p><em>注意：max_age参数设置过期时间不兼容IE8一下的浏览器</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;设置cookie给浏览器&#x27;</span>)</span><br><span class=\"line\">    resp.set_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>, <span class=\"string\">&#x27;mark&#x27;</span>,max_age=<span class=\"number\">60</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135784-444930551..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135784-444930551..png\" alt=\"1550743936736\" /></a></p>\n<h4 id=\"1222-基于expires参数设置cookie有效期\"><a class=\"markdownIt-Anchor\" href=\"#1222-基于expires参数设置cookie有效期\"></a> 1.2.2.2 基于expires参数设置cookie有效期</h4>\n<p>再设置<code>cookie</code>的调用<code>set_cookie()</code>时候传入关键字实参 <code>expires= 值</code>，这个<code>值</code>代具体的过期时间，一个<code>datetime</code>对象或UNIX时间戳。</p>\n<p><em>使用expires参数，就必须会用格林尼治时间（也就是相对北京时间少8个小时，因为浏览器会默认把服务器传来的时间值当做标准格林尼治时间，并根据当地的时区做调整</em> 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/expires_demo/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">expires_demo</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;设置cookie给浏览器, cookie设置过期时间为一个月后&#x27;</span>)</span><br><span class=\"line\">    expires = datetime.now()+timedelta(days=<span class=\"number\">30</span>, hours=<span class=\"number\">16</span>)</span><br><span class=\"line\">    resp.set_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>, <span class=\"string\">&#x27;mark&#x27;</span>, expires=expires)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135938-1085978225..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135938-1085978225..png\" alt=\"1550886456558\" /></a></p>\n<h3 id=\"123-在flask中查询cookie\"><a class=\"markdownIt-Anchor\" href=\"#123-在flask中查询cookie\"></a> 1.2.3 在Flask中查询cookie</h3>\n<p>基于2.2.1.2 示例</p>\n<p>查询<code>cookie</code> 是通过请求对象的<code>cookies</code>属性读取，读取的过程是使用设置<code>cookie</code>时的<code>key</code>来读取到设置<code>cookie</code>的<code>value</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_cookie/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cookie</span>():</span></span><br><span class=\"line\">    user_name = request.cookies.get(<span class=\"string\">&#x27;user_name&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> user_name == <span class=\"string\">&#x27;mark&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#123;&#125;的信息&#x27;</span>.<span class=\"built_in\">format</span>(user_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;cookie验证失败&#x27;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136144-1923310819..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136144-1923310819..png\" alt=\"1550741843996\" /></a></p>\n<h3 id=\"124删除cookie\"><a class=\"markdownIt-Anchor\" href=\"#124删除cookie\"></a> 1.2.4删除cookie</h3>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136359-420093650..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136359-420093650..png\" alt=\"img\" /></a></p>\n<p>基于2.2.1.2实例</p>\n<p>删除<code>cookie</code>是通过<code>Flask</code>内置的<code>Response</code>类实例化出的对象调用<code>delete_cookie('key')</code>，删除的过程是使用设置<code>cookie</code>时的<code>key</code>来删除<code>cookie</code>信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/del/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_cookie</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;删除cookie&#x27;</span>)</span><br><span class=\"line\">    resp.delete_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-session\"><a class=\"markdownIt-Anchor\" href=\"#2-session\"></a> 2 session</h1>\n<h2 id=\"21-什么是session\"><a class=\"markdownIt-Anchor\" href=\"#21-什么是session\"></a> 2.1 什么是session？</h2>\n<p><strong>session的基本概念</strong>：session又称之为安全的cookie，session是一个思路、是一个概念、一个服务器存储授权信息的解决方案，不同的服务器，不同的框架，不同的语言有不同的实现，session的目的和cookie完全一致，cookie在客户端和服务端处理的非常粗糙，cookie在浏览器保存的时候以及传输的过程均使用明文，导致了很多安全隐患问题，session的出现就是为了解决cookie存储数据不安全的问题。</p>\n<p><em>注意：session是一个思路一个概念，session的实现是基于cookie的，session并不像cookie是一项真实存在的技术，可以简单的理解为把粗糙的cookie在服务端通过加密，永久化等方式提高cookie的安全级别。</em></p>\n<h2 id=\"22-实现session的两种思路\"><a class=\"markdownIt-Anchor\" href=\"#22-实现session的两种思路\"></a> 2.2 实现session的两种思路</h2>\n<p><strong>第一种</strong></p>\n<ol>\n<li>客户端携带用户信息请求服务端验证。</li>\n<li>服务端验证成功后生成随机的session_id与用户信息建立映射后存储到数据库中（注意：数据库可以是任意永久化保存数据的机制，如redis、memcached、mysql、甚至是文件等等）。</li>\n<li>服务端把刚刚生成的session_id作为cookie信息返回给客户端。</li>\n<li>客户端收到以session_id为内容的cookie信息保存到本地。</li>\n<li>客户端再次请求的时候会携带以session_id为内容的cookie去访问服务端，服务端取出session_id去数据库校验得到用户信息。</li>\n</ol>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136681-1046277379..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136681-1046277379..png\" alt=\"1550917260707\" /></a></p>\n<p><strong>第二种</strong></p>\n<ol>\n<li>客户端携带用户信息请求服务端验证。</li>\n<li>服务端收到用户信息验证成功后，服务端再把用户信息经过严格的加密加盐生成session信息。并且把刚刚生成的session信息作为cookie的内容返回给客户端。</li>\n<li>客户端收到以session信息为内容的cookie保存到本地。</li>\n<li>客户端再次请求的时候会携带以session信息为内容的cookie去访问服务端，服务端取出session信息经过解密得到用户的信息。</li>\n</ol>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136850-2054093429..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136850-2054093429..png\" alt=\"1550918351048\" /></a></p>\n<p><em>注意：flask使用的就是第二种思路，利用加密解密的方式实现session，实现安全的cookie，服务端并不会做永久化的储存。</em></p>\n<h2 id=\"23-如何在flask中实现session\"><a class=\"markdownIt-Anchor\" href=\"#23-如何在flask中实现session\"></a> 2.3 如何在flask中实现session？</h2>\n<h3 id=\"231-设置session\"><a class=\"markdownIt-Anchor\" href=\"#231-设置session\"></a> 2.3.1 设置session</h3>\n<p>Flask提供了session对象用来将cookie加密储存，session通过秘钥对数据进行签名以加密数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, session</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class=\"number\">24</span>) <span class=\"comment\"># 配置session使用的秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_session_info</span>():</span></span><br><span class=\"line\">    session[<span class=\"string\">&#x27;username&#x27;</span>] = <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"comment\"># 使用用户信息配置sesion信息作为cookie，并添加到响应体中</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;设置session信息&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读</strong></p>\n<p>通过app对象 通过<code>SECRET_KEY</code>配置session使用的加密秘钥</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class=\"number\">24</span>) <span class=\"comment\"># 配置session使用的秘钥</span></span><br></pre></td></tr></table></figure>\n<p>session对象像可以字典一样操作，内部是把字典的信息进行加密操作然后添加到相应体中作为cookie，响应的时候会自动返回给浏览器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session[<span class=\"string\">&#x27;username&#x27;</span>] = <span class=\"string\">&#x27;mark&#x27;</span></span><br><span class=\"line\">session[<span class=\"string\">&#x27;userphone&#x27;</span>] = <span class=\"string\">&#x27;123456&#x27;</span>  <span class=\"comment\"># 可以指定多条session信息，统一放到响应的cookie中返回给浏览器</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137020-1828638087..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137020-1828638087..png\" alt=\"1550929913778\" /></a></p>\n<h3 id=\"232-设置session有效期\"><a class=\"markdownIt-Anchor\" href=\"#232-设置session有效期\"></a> 2.3.2 设置session有效期</h3>\n<p>后端<code>Flask</code>跟浏览器交互默认情况下，session cookie会在用户关闭浏览器时清除。通过将session.permanent属性设为True可以将session的有效期延长为31天，也可以通过操作<code>app</code>的配置<code>PERMANENT_SESSION_LIFETIME</code>来设置<code>session</code>过期时间。</p>\n<p><strong>案例 3.3.2.1:开启指定session过期时间模式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, session</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class=\"number\">24</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_session_info</span>():</span></span><br><span class=\"line\">    session[<span class=\"string\">&#x27;username&#x27;</span>] = <span class=\"string\">&#x27;mark&#x27;</span></span><br><span class=\"line\">    session[<span class=\"string\">&#x27;userphone&#x27;</span>] = <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\">    session.permanent = <span class=\"literal\">True</span> <span class=\"comment\"># 开启设置有效期，默认为31天后过期</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137209-326713179..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137209-326713179..png\" alt=\"1550931605863\" /></a></p>\n<p><strong>案例 3.3.2.1:开启session指定过期时间模式后指定具体的过期时间</strong></p>\n<p>基于案例3.3.2.1，通过设置<code>PERMANENT_SESSION_LIFETIME</code>指定具体的过期时间</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>] = timedelta(hours=<span class=\"number\">1</span>) <span class=\"comment\"># 设置为1小时候过期</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137356-1128605837..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137356-1128605837..png\" alt=\"1550932150978\" /></a></p>\n<h3 id=\"233-获取session\"><a class=\"markdownIt-Anchor\" href=\"#233-获取session\"></a> 2.3.3 获取session</h3>\n<p>在Flask中获取设置的session信息通过session对象获取，session对象是继承了字典类，所以获取的时候是字典的取值方式。其内部会把浏览器传过来的session信息解密。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_session/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_session</span>():</span></span><br><span class=\"line\">    username = session.get(<span class=\"string\">&#x27;username&#x27;</span>)</span><br><span class=\"line\">    userphone = session.get(<span class=\"string\">&#x27;userphone&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> username <span class=\"keyword\">or</span> userphone:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&#123;&#125;,&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(username, userphone)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;session为空&quot;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137512-1371028199..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137512-1371028199..png\" alt=\"1550930691065\" /></a></p>\n<h3 id=\"234-删除session\"><a class=\"markdownIt-Anchor\" href=\"#234-删除session\"></a> 2.3.4 删除session</h3>\n<p><code>session</code>对象调用<code>pop()</code>可以根据具体的<code>session</code>的key清除掉指定的session信息。</p>\n<p>session对象调用<code>clear()</code>可以清除此次请求的浏览器关于本域名的所有session信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/del_session/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_session</span>():</span></span><br><span class=\"line\">    session.pop(<span class=\"string\">&#x27;username&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># session.clear()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;删除成功&#x27;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-flask模板上下文处理器\"><a class=\"markdownIt-Anchor\" href=\"#3-flask模板上下文处理器\"></a> 3 flask模板上下文处理器</h1>\n<p><code>app</code>对象调用<code>context_processor</code>作为模板上下文处理器，视图函数在每一次调用render_template(’’)的时候都会为模板传入<code>@app.context_processor</code>装饰器所装饰函数的返回值，该返回值作为模板变量，但是返回值一定要为字典，如果不想返回任何值，可以返回空字典，否则会报错，返回值可以设置为模板经常要使用的变量，减少了代码的冗余，提高了代码的可维护性。</p>\n<p><strong>示例 4.1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    context_dict = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;马克&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>, **context_dict)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/detail/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span>():</span></span><br><span class=\"line\">    context_dict = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;马克&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;detail.html&#x27;</span>, **context_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>示例4.2</strong></p>\n<p>示例4.2 利用模板上下文处理器避免了一些代码的冗余，利用该处理器，可以为视图函数每一次返回模板的时候传入设置好的变量，<code>示例4.2</code>实现的效果同<code>示例4.1</code>完全一致。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/detail/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;detail.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.context_processor</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">context_processor</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;马克&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><em>适用场景：比如登录网站后用户信息始终显示在页面的右上角，我们可以利用模板上下文处理器，做到每次返回模板的时候都为其传入用户信息，减少了代码的冗余，提高了代码的可维护性。</em></p>\n<h1 id=\"4-闪现\"><a class=\"markdownIt-Anchor\" href=\"#4-闪现\"></a> 4 闪现</h1>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137970-224747758..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137970-224747758..png\" alt=\"1554289488442\" /></a></p>\n<h2 id=\"41-在模板中获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#41-在模板中获取闪现信息\"></a> 4.1 在模板中获取闪现信息</h2>\n<p>Flask 提供了一个非常简单的方法来使用闪现系统向用户反馈信息。闪现系统使得在一个请求结束的时候记录一个信息，<code>然后在且仅仅在下一个请求中访问这个数据</code>，强调flask闪现是基于<code>flask</code>内置的<code>session</code>的，利用浏览器的<code>session</code>缓存闪现信息。所以必须设置<code>secret_key</code>。</p>\n<h3 id=\"411-简单的在模板中实现获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#411-简单的在模板中实现获取闪现信息\"></a> 4.1.1 简单的在模板中实现获取闪现信息</h3>\n<p><strong>示例：</strong></p>\n<p><a href=\"http://server.py\">server.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, flash, redirect, render_template, \\</span><br><span class=\"line\">     request, url_for</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.secret_key = <span class=\"string\">&#x27;some_secret&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    error = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.form[<span class=\"string\">&#x27;username&#x27;</span>] != <span class=\"string\">&#x27;admin&#x27;</span> <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">                request.form[<span class=\"string\">&#x27;password&#x27;</span>] != <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">            error = <span class=\"string\">&#x27;登录失败&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>, error=error)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><em><strong>注意：这个 <code>flash()</code> 就可以实现在下一次请求时候，将括号内的信息做一个缓存。不要忘记设置secret_key</strong></em></p>\n<p>这里是 index.html 模板:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% with messages &#x3D; get_flashed_messages() %&#125;  # 获取所有的闪现信息返回一个列表</span><br><span class=\"line\">  &#123;% if messages %&#125;</span><br><span class=\"line\">    &lt;ul class&#x3D;flashes&gt;</span><br><span class=\"line\">    &#123;% for message in messages %&#125;</span><br><span class=\"line\">      &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;&#x2F;ul&gt;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endwith %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h1&gt;主页&lt;&#x2F;h1&gt;</span><br><span class=\"line\">  &lt;p&gt;跳转到登录页面&lt;a href&#x3D;&quot;&#123;&#123; url_for(&#39;login&#39;) &#125;&#125;&quot;&gt;登录?&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n<p><em><strong>注意：<code>&#123;% with messages = get_flashed_messages() %&#125;</code>  获取所有的闪现信息返回一个列表</strong></em></p>\n<p>这里是login.html 模板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>登录页面<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">&#123;% if error %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">error</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>Error:<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span> &#123;&#123; error &#125;&#125;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">post</span>&gt;</span></span><br><span class=\"line\">    用户名:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">text</span> <span class=\"attr\">name</span>=<span class=\"string\">username</span>&gt;</span></span><br><span class=\"line\">    密码:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">password</span> <span class=\"attr\">name</span>=<span class=\"string\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">submit</span> <span class=\"attr\">value</span>=<span class=\"string\">Login</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1552036299625\"><a class=\"markdownIt-Anchor\" href=\"#1552036299625\"></a> <a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155138240-12907379..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155138240-12907379..png\" alt=\"1552036299625\" /></a></h4>\n<p><strong>简单的在模板中实现获取闪现信息小结：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置闪现内容：flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>)</span><br><span class=\"line\">模板取出闪现内容：&#123;% <span class=\"keyword\">with</span> messages = get_flashed_messages() %&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"412-模板中的分类闪现\"><a class=\"markdownIt-Anchor\" href=\"#412-模板中的分类闪现\"></a> 4.1.2 模板中的分类闪现</h3>\n<p>当闪现一个消息时，是可以提供一个分类的。未指定分类时默认的分类为 <code>'message'</code> 。 可以使用分类来提供给用户更好的反馈，可以给用户更精准的提示信息体验。</p>\n<p>要使用一个自定义的分类，只要使用 <code>flash()</code> 函数的第二个参数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>,<span class=\"string\">&quot;status&quot;</span>)</span><br><span class=\"line\">flash(<span class=\"string\">&#x27;您的账户名为admin&#x27;</span>,<span class=\"string\">&quot;username&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在使用<code>get_flashed_messages()</code>时候需要传入<code>with_categories=true</code>便可以渲染出来类别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% with messages &#x3D; get_flashed_messages(with_categories&#x3D;true) %&#125;</span><br><span class=\"line\">  &#123;% if messages %&#125;</span><br><span class=\"line\">    &lt;ul class&#x3D;flashes&gt;</span><br><span class=\"line\">    &#123;% for category, message in messages %&#125;</span><br><span class=\"line\">      &lt;li class&#x3D;&quot;&#123;&#123; category &#125;&#125;&quot;&gt;&#123;&#123; category &#125;&#125;：&#123;&#123; message &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;&#x2F;ul&gt;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155139453-249225863..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155139453-249225863..png\" alt=\" 1552041915121\" /></a></p>\n<p><strong>模板中的分类闪现小结：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分类设置闪现内容：flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>,<span class=\"string\">&quot;status&quot;</span>)</span><br><span class=\"line\">\t\t    flash(<span class=\"string\">&#x27;您的账户名为admin&#x27;</span>,<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">模板取值：   &#123;% <span class=\"keyword\">with</span> messages = get_flashed_messages(with_categories=true) %&#125;</span><br><span class=\"line\">            &#123;% <span class=\"keyword\">if</span> messages %&#125;</span><br><span class=\"line\">            &lt;ul class=flashes&gt;</span><br><span class=\"line\">            &#123;% <span class=\"keyword\">for</span> category, message <span class=\"keyword\">in</span> messages %&#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<h3 id=\"413-模板中过滤闪现消息\"><a class=\"markdownIt-Anchor\" href=\"#413-模板中过滤闪现消息\"></a> 4.1.3 模板中过滤闪现消息</h3>\n<p>同样要使用一个自定义的分类，只要使用 <code>flash()</code> 函数的第二个参数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>,<span class=\"string\">&quot;status&quot;</span>)</span><br><span class=\"line\">flash(<span class=\"string\">&#x27;您的账户名为admin&#x27;</span>,<span class=\"string\">&quot;username&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在使用<code>get_flashed_messages()</code>时候需要传入<code>category_filter=[&quot;username&quot;]</code>便可根据类别取出闪现信息。中括号内可以传入的值就是类别，可以传入多个。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% with messages &#x3D; get_flashed_messages(category_filter&#x3D;[&quot;username&quot;]) %&#125;</span><br><span class=\"line\">&#123;% if messages %&#125;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &#123;%- for message in messages %&#125;</span><br><span class=\"line\">    &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &#123;% endfor -%&#125;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155140542-1156156426..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155140542-1156156426..png\" alt=\"1552041362576\" /></a></p>\n<p><strong>小结：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分类设置闪现内容：flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>,<span class=\"string\">&quot;status&quot;</span>)</span><br><span class=\"line\">\t\t    flash(<span class=\"string\">&#x27;您的账户名为admin&#x27;</span>,<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">模板取值：  % <span class=\"keyword\">with</span> messages = get_flashed_messages(category_filter=[<span class=\"string\">&quot;username&quot;</span>]) %&#125;</span><br><span class=\"line\">            &#123;% <span class=\"keyword\">if</span> messages %&#125;</span><br><span class=\"line\">              &lt;ul&gt;</span><br><span class=\"line\">                &#123;%- <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> messages %&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"42-在视图中获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#42-在视图中获取闪现信息\"></a> 4.2 在视图中获取闪现信息</h2>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155141774-1627594844..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155141774-1627594844..png\" alt=\"1554289560305\" /></a></p>\n<h3 id=\"421-简单的在是视图中获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#421-简单的在是视图中获取闪现信息\"></a> 4.2.1 简单的在是视图中获取闪现信息</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-设置: flash(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">-取值：get_flashed_message() <span class=\"comment\"># 注意这个不同于模板取值，这个是从flask中导入的</span></span><br><span class=\"line\">-注意：在视图中获取闪现信息不必非得是两次连续的请求，只要保证是第一次取相应的闪现信息，就可以取得到。</span><br></pre></td></tr></table></figure>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, flash, get_flashed_messages</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.secret_key = os.urandom(<span class=\"number\">4</span>)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&#x27;name&#x27;</span>) == <span class=\"string\">&#x27;rocky&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;第一条闪现信息：用户名不是rocky填写的是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(request.args.get(<span class=\"string\">&#x27;name&#x27;</span>)))</span><br><span class=\"line\">    <span class=\"comment\"># flash(&#x27;第二条闪现信息：用户名不是rocky填写的是&#123;&#125;&#x27;.format(request.args.get(&#x27;name&#x27;)))</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error,设置了闪现&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_flash/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_flash</span>():</span></span><br><span class=\"line\">    <span class=\"comment\">#get_flashed_messages()是一个列表列表可以取出闪现信息，该条闪现信息只要被取出就会删除掉。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;闪现的信息是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(get_flashed_messages())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/demo/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;demo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>**（1）**会触发设置闪现内容</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155142726-1681318289..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155142726-1681318289..png\" alt=\"1552048742450\" /></a></p>\n<p>**（2）**取出闪现内容</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143713-1931514309..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143713-1931514309..png\" alt=\"1552052193446\" /></a></p>\n<p>**（3）**再次取出闪现内容，发现闪现内容取出一次后就为空了</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143887-2108757345..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143887-2108757345..png\" alt=\"1552052104889\" /></a></p>\n<p><strong>小结：</strong></p>\n<ul>\n<li>get_flashed_messages()是一个列表，该列表可以取出闪现信息，该条闪现信息只要被取出就会删除掉。</li>\n</ul>\n<h3 id=\"422-在视图中实现分类获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#422-在视图中实现分类获取闪现信息\"></a> 4.2.2 在视图中实现分类获取闪现信息。</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-设置：flash(<span class=\"string\">&#x27;用户名错误&#x27;</span>, <span class=\"string\">&quot;username_error&quot;</span>)</span><br><span class=\"line\">      flash(<span class=\"string\">&#x27;用户密码错误&#x27;</span>, <span class=\"string\">&quot;password_error&quot;</span>) <span class=\"comment\"># 第二个参数为闪现信息的分类。</span></span><br><span class=\"line\"></span><br><span class=\"line\">-取所有闪现信息的类别和闪现内容：get_flashed_messages(with_categories=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">-针对分类过滤取值：get_flashed_messages(category_filter=[<span class=\"string\">&#x27;username_error&#x27;</span>]) </span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 中括号内可以写多个分类。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">-注意：如果flash()没有传入第二个参数进行分类，默认分类是 <span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<p><strong>示例1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&#x27;name&#x27;</span>) == <span class=\"string\">&#x27;rocky&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;用户名错误&#x27;</span>, category=<span class=\"string\">&quot;username_error&quot;</span>)</span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;用户密码错误&#x27;</span>, <span class=\"string\">&quot;password_error&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error,设置了闪现&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_flash/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_flash</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;闪现的信息是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(get_flashed_messages(with_categories=<span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure>\n<p>把所有的闪现类别和闪现信息返回。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144215-1937103247..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144215-1937103247..png\" alt=\"1552051297253\" /></a></p>\n<p><strong>示例2</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&#x27;name&#x27;</span>) == <span class=\"string\">&#x27;rocky&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;用户名错误&#x27;</span>, category=<span class=\"string\">&quot;username_error&quot;</span>)</span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;用户密码错误&#x27;</span>, <span class=\"string\">&quot;password_error&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error,设置了闪现&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_flash/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_flash</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;闪现的信息是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(get_flashed_messages(category_filter=[<span class=\"string\">&#x27;username_error&#x27;</span>]))</span><br></pre></td></tr></table></figure>\n<p>返回页面只显示了 <code>&quot;username_error&quot;</code>的分类内容。</p>\n<p>[<img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144365-2146703891..png\" alt=\"1552050949373\" /></p>\n","more":"<h1 id=\"1-cookie\"><a class=\"markdownIt-Anchor\" href=\"#1-cookie\"></a> 1 cookie</h1>\n<h2 id=\"11-什么是cookie\"><a class=\"markdownIt-Anchor\" href=\"#11-什么是cookie\"></a> 1.1 什么是cookie？</h2>\n<p><code>cookie</code>技术产生源于<code>HTTP</code>协议在互联网上的急速发展，在浏览器发展初期，为了适应用户的需求，技术上推出了各种保持web浏览状态的手段，为什么要保持web浏览器的状态呢？</p>\n<p>一般<code>web</code>通信是基于<code>HTTP</code>的，<code>HTTP</code>是无状态的协议，也就是说，在一次请求响应结束后，服务器不会留下任何有关于对方状态信息，所以需要保持web浏览器的状态。</p>\n<p>比如：对于有些web应用来说，客户端的某些信息必须被记住。比如用户登录过后跳转页面依然要保持登录的状态，进行其他的业务访问，而当这个登录过的用户再次访问web服务器的时候，web服务器并不知道这个用户已经登录过了，所以无法进行其他需要权限的业务访问。所以<code>cookie</code>技术的出现就是为了解决这个问题。</p>\n<p><code>cookie</code>的具体实现过程：当一个用户访问<code>web</code>服务器后，<code>web</code>服务器会获取用户的状态并且返回一些数据（cookie）给浏览器，浏览器会自动储存这些数据（cookie），当用户再次访问web服务器，浏览器会把cookie放到请求报文中发送给web服务器，web服务器就会获取到了用户的状态。基于这次用户的状态方便用户进行其他业务的访问，并且web服务器可以设置浏览器保存cookie的时间，cookie是有域名的概念，只有访问同一个域名的时候才会把之前相同域名返回的cookie携带给该web服务器。</p>\n<p><em>附注：1993年，网景公司雇员<code>Lou Montulli</code>为了提升用户体验，进一步实现了个人化网络。发明了今天广泛使用的<code>Cookie</code>。</em></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133265-1996976369..jpg\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133265-1996976369..jpg\" alt=\"img\" /></a></p>\n<p><strong>关键词</strong>：</p>\n<ul>\n<li><code>web</code>通讯一般基于<code>HTTP</code>协议，<code>HTTP</code>是无状态协议。</li>\n<li><code>Cookie</code>技术是用来保持<code>web</code>访问状态，<code>Cookie</code>技术通过在请求和响应报文中添加<code>Cookie</code>数据来保存客户端的状态信息</li>\n<li>服务器可以设置<code>cookie</code>的有效期，浏览器会自动清除过期的<code>cookie</code>。</li>\n<li><code>cookie</code>有域名的概念，只有访问同一个域名，才会把之前相同域名返回的cookie携带给该服务器。</li>\n</ul>\n<h2 id=\"12-如何在flask中使用cookie\"><a class=\"markdownIt-Anchor\" href=\"#12-如何在flask中使用cookie\"></a> 1.2 如何在flask中使用cookie？</h2>\n<h3 id=\"121-设置cookie\"><a class=\"markdownIt-Anchor\" href=\"#121-设置cookie\"></a> 1.2.1 设置cookie</h3>\n<p>设置<code>cookie</code>的时候是由我们<code>web</code>服务器设置，也就是在<code>Flask</code>项目中生成<code>cookie</code>，经由响应报文返回给浏览器保存<code>cookie</code>，下次浏览器再访问<code>web</code>服务器的时会在请求报文中把<code>cookie</code>携带过来，所以<code>cookie</code>产生的起点是在web服务器中，也就是我们的Flask项目中。</p>\n<p>在Flask中如果想要在响应中添加一个cookie，最方便的做法是使用内置的<code>Response</code>类提供的<code>set_cookie()</code>方法。</p>\n<p><strong>表-2.2.1.1 set_cookie()方法的参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td><code>cookie</code>的键（名称）</td>\n</tr>\n<tr>\n<td>value</td>\n<td><code>cookie</code>的值</td>\n</tr>\n<tr>\n<td>max_age</td>\n<td><code>cookie</code>被保存的时间数，单位为秒。</td>\n</tr>\n<tr>\n<td>expires</td>\n<td>具体的过期时间，一个<code>datetime</code>对象或UNIX时间戳</td>\n</tr>\n<tr>\n<td>path</td>\n<td>限制<code>cookie</code>只在给定的路径可用，默认为整个域名下路径都可用</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>设置<code>cookie</code>可用的域名，默认是当前域名，子域名需要利用通配符<code>domain=.当前域名</code></td>\n</tr>\n<tr>\n<td>secure</td>\n<td>如果设为<code>True</code>，只有通过<code>HTTPS</code>才可以用</td>\n</tr>\n<tr>\n<td>httponly</td>\n<td>如果设为<code>True</code>，进制客户端<code>JavaScript</code>获取<code>cookie</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1212-示例设置cookie\"><a class=\"markdownIt-Anchor\" href=\"#1212-示例设置cookie\"></a> 1.2.1.2 示例：设置cookie</h4>\n<p>项目目录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  app.py</span><br><span class=\"line\">│</span><br><span class=\"line\">├─static\t<span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">└─templates <span class=\"comment\"># 文件夹</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://app.py\">app.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, Response</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;设置cookie给浏览器&#x27;</span>)</span><br><span class=\"line\">    resp.set_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>, <span class=\"string\">&#x27;mark&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>解读 <a href=\"http://app.py\">app.py</a></strong>：</p>\n<p><strong>(1)</strong> 首先导入<code>Flask</code>内置的<code>Response</code>类，用于在响应报文中设置<code>cookie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,request, Response</span><br></pre></td></tr></table></figure>\n<p><strong>(2)</strong> 在视图函数实例化<code>Response</code>类并传入返回的内容，<code>Response</code>类实例化出的对象调用<code>set_cookie()</code>方 法，set_cookie内的第一个参数是设置cookie的<code>key</code>，第二个参数是用来设置cookie的<code>value</code>，然后返回该对象，就会携带着设置好的<code>cookie</code>返回给浏览器保存。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;设置cookie给浏览器&#x27;</span>)</span><br><span class=\"line\">    resp.set_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>, <span class=\"string\">&#x27;mark&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br></pre></td></tr></table></figure>\n<h4 id=\"1213-在浏览器中查看cookie的三种方式以chrome浏览器为例\"><a class=\"markdownIt-Anchor\" href=\"#1213-在浏览器中查看cookie的三种方式以chrome浏览器为例\"></a> 1.2.1.3 在浏览器中查看cookie的三种方式（以Chrome浏览器为例）**</h4>\n<p><strong>基于2.2.1.2实例</strong></p>\n<p><strong>第一种</strong>: 右键检查-----&gt;Network----&gt;找到访问的域名----&gt;找到Response Headers----&gt;Set-Cookie</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133532-1177892422..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133532-1177892422..png\" alt=\"1550736406457\" /></a></p>\n<p><strong>第二种</strong>：点击url输入框左边的信息icon，然后找到响应的域名，展开查看cookie。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133751-1539354373..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133751-1539354373..png\" alt=\"1550736586670\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133940-1885846214..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155133940-1885846214..png\" alt=\"1550736643161\" /></a></p>\n<p><strong>第三种</strong>：设置----&gt;高级----&gt;内容设置----&gt;Cookie----&gt;查看所有cookie设置-----&gt;根据域名搜索对应的cookie信息</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134138-1836502968..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134138-1836502968..png\" alt=\"1550740317286\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134340-896718454..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134340-896718454..png\" alt=\"1550740351876\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134529-315038539..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134529-315038539..png\" alt=\"1550740399039\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134741-2012530184..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134741-2012530184..png\" alt=\"1550740431743\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134936-1531826233..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155134936-1531826233..png\" alt=\"1550740461224\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135123-1069381446..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135123-1069381446..png\" alt=\"1550740533491\" /></a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135301-180033248..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135301-180033248..png\" alt=\"1550740558622\" /></a></p>\n<h3 id=\"122-设置cookie的有效期\"><a class=\"markdownIt-Anchor\" href=\"#122-设置cookie的有效期\"></a> 1.2.2 设置cookie的有效期</h3>\n<p><strong>注意：Flask服务器默认设置cookie有效期为关闭浏览器后cookie失效</strong>。</p>\n<h4 id=\"1221-基于max_age参数设置cookie有效期\"><a class=\"markdownIt-Anchor\" href=\"#1221-基于max_age参数设置cookie有效期\"></a> 1.2.2.1 基于max_age参数设置cookie有效期</h4>\n<p>再设置<code>cookie</code>的调用<code>set_cookie()</code>时候传入关键字实参 <code>max_age= 值</code>，这个<code>值</code>代表多少秒后过期。</p>\n<p><em>注意：max_age参数设置过期时间不兼容IE8一下的浏览器</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;设置cookie给浏览器&#x27;</span>)</span><br><span class=\"line\">    resp.set_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>, <span class=\"string\">&#x27;mark&#x27;</span>,max_age=<span class=\"number\">60</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135784-444930551..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135784-444930551..png\" alt=\"1550743936736\" /></a></p>\n<h4 id=\"1222-基于expires参数设置cookie有效期\"><a class=\"markdownIt-Anchor\" href=\"#1222-基于expires参数设置cookie有效期\"></a> 1.2.2.2 基于expires参数设置cookie有效期</h4>\n<p>再设置<code>cookie</code>的调用<code>set_cookie()</code>时候传入关键字实参 <code>expires= 值</code>，这个<code>值</code>代具体的过期时间，一个<code>datetime</code>对象或UNIX时间戳。</p>\n<p><em>使用expires参数，就必须会用格林尼治时间（也就是相对北京时间少8个小时，因为浏览器会默认把服务器传来的时间值当做标准格林尼治时间，并根据当地的时区做调整</em> 。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/expires_demo/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">expires_demo</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;设置cookie给浏览器, cookie设置过期时间为一个月后&#x27;</span>)</span><br><span class=\"line\">    expires = datetime.now()+timedelta(days=<span class=\"number\">30</span>, hours=<span class=\"number\">16</span>)</span><br><span class=\"line\">    resp.set_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>, <span class=\"string\">&#x27;mark&#x27;</span>, expires=expires)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135938-1085978225..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155135938-1085978225..png\" alt=\"1550886456558\" /></a></p>\n<h3 id=\"123-在flask中查询cookie\"><a class=\"markdownIt-Anchor\" href=\"#123-在flask中查询cookie\"></a> 1.2.3 在Flask中查询cookie</h3>\n<p>基于2.2.1.2 示例</p>\n<p>查询<code>cookie</code> 是通过请求对象的<code>cookies</code>属性读取，读取的过程是使用设置<code>cookie</code>时的<code>key</code>来读取到设置<code>cookie</code>的<code>value</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_cookie/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_cookie</span>():</span></span><br><span class=\"line\">    user_name = request.cookies.get(<span class=\"string\">&#x27;user_name&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> user_name == <span class=\"string\">&#x27;mark&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#123;&#125;的信息&#x27;</span>.<span class=\"built_in\">format</span>(user_name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;cookie验证失败&#x27;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136144-1923310819..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136144-1923310819..png\" alt=\"1550741843996\" /></a></p>\n<h3 id=\"124删除cookie\"><a class=\"markdownIt-Anchor\" href=\"#124删除cookie\"></a> 1.2.4删除cookie</h3>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136359-420093650..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136359-420093650..png\" alt=\"img\" /></a></p>\n<p>基于2.2.1.2实例</p>\n<p>删除<code>cookie</code>是通过<code>Flask</code>内置的<code>Response</code>类实例化出的对象调用<code>delete_cookie('key')</code>，删除的过程是使用设置<code>cookie</code>时的<code>key</code>来删除<code>cookie</code>信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/del/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_cookie</span>():</span></span><br><span class=\"line\">    resp = Response(<span class=\"string\">&#x27;删除cookie&#x27;</span>)</span><br><span class=\"line\">    resp.delete_cookie(<span class=\"string\">&#x27;user_name&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-session\"><a class=\"markdownIt-Anchor\" href=\"#2-session\"></a> 2 session</h1>\n<h2 id=\"21-什么是session\"><a class=\"markdownIt-Anchor\" href=\"#21-什么是session\"></a> 2.1 什么是session？</h2>\n<p><strong>session的基本概念</strong>：session又称之为安全的cookie，session是一个思路、是一个概念、一个服务器存储授权信息的解决方案，不同的服务器，不同的框架，不同的语言有不同的实现，session的目的和cookie完全一致，cookie在客户端和服务端处理的非常粗糙，cookie在浏览器保存的时候以及传输的过程均使用明文，导致了很多安全隐患问题，session的出现就是为了解决cookie存储数据不安全的问题。</p>\n<p><em>注意：session是一个思路一个概念，session的实现是基于cookie的，session并不像cookie是一项真实存在的技术，可以简单的理解为把粗糙的cookie在服务端通过加密，永久化等方式提高cookie的安全级别。</em></p>\n<h2 id=\"22-实现session的两种思路\"><a class=\"markdownIt-Anchor\" href=\"#22-实现session的两种思路\"></a> 2.2 实现session的两种思路</h2>\n<p><strong>第一种</strong></p>\n<ol>\n<li>客户端携带用户信息请求服务端验证。</li>\n<li>服务端验证成功后生成随机的session_id与用户信息建立映射后存储到数据库中（注意：数据库可以是任意永久化保存数据的机制，如redis、memcached、mysql、甚至是文件等等）。</li>\n<li>服务端把刚刚生成的session_id作为cookie信息返回给客户端。</li>\n<li>客户端收到以session_id为内容的cookie信息保存到本地。</li>\n<li>客户端再次请求的时候会携带以session_id为内容的cookie去访问服务端，服务端取出session_id去数据库校验得到用户信息。</li>\n</ol>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136681-1046277379..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136681-1046277379..png\" alt=\"1550917260707\" /></a></p>\n<p><strong>第二种</strong></p>\n<ol>\n<li>客户端携带用户信息请求服务端验证。</li>\n<li>服务端收到用户信息验证成功后，服务端再把用户信息经过严格的加密加盐生成session信息。并且把刚刚生成的session信息作为cookie的内容返回给客户端。</li>\n<li>客户端收到以session信息为内容的cookie保存到本地。</li>\n<li>客户端再次请求的时候会携带以session信息为内容的cookie去访问服务端，服务端取出session信息经过解密得到用户的信息。</li>\n</ol>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136850-2054093429..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155136850-2054093429..png\" alt=\"1550918351048\" /></a></p>\n<p><em>注意：flask使用的就是第二种思路，利用加密解密的方式实现session，实现安全的cookie，服务端并不会做永久化的储存。</em></p>\n<h2 id=\"23-如何在flask中实现session\"><a class=\"markdownIt-Anchor\" href=\"#23-如何在flask中实现session\"></a> 2.3 如何在flask中实现session？</h2>\n<h3 id=\"231-设置session\"><a class=\"markdownIt-Anchor\" href=\"#231-设置session\"></a> 2.3.1 设置session</h3>\n<p>Flask提供了session对象用来将cookie加密储存，session通过秘钥对数据进行签名以加密数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, session</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class=\"number\">24</span>) <span class=\"comment\"># 配置session使用的秘钥</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_session_info</span>():</span></span><br><span class=\"line\">    session[<span class=\"string\">&#x27;username&#x27;</span>] = <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"comment\"># 使用用户信息配置sesion信息作为cookie，并添加到响应体中</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;设置session信息&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>解读</strong></p>\n<p>通过app对象 通过<code>SECRET_KEY</code>配置session使用的加密秘钥</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class=\"number\">24</span>) <span class=\"comment\"># 配置session使用的秘钥</span></span><br></pre></td></tr></table></figure>\n<p>session对象像可以字典一样操作，内部是把字典的信息进行加密操作然后添加到相应体中作为cookie，响应的时候会自动返回给浏览器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session[<span class=\"string\">&#x27;username&#x27;</span>] = <span class=\"string\">&#x27;mark&#x27;</span></span><br><span class=\"line\">session[<span class=\"string\">&#x27;userphone&#x27;</span>] = <span class=\"string\">&#x27;123456&#x27;</span>  <span class=\"comment\"># 可以指定多条session信息，统一放到响应的cookie中返回给浏览器</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137020-1828638087..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137020-1828638087..png\" alt=\"1550929913778\" /></a></p>\n<h3 id=\"232-设置session有效期\"><a class=\"markdownIt-Anchor\" href=\"#232-设置session有效期\"></a> 2.3.2 设置session有效期</h3>\n<p>后端<code>Flask</code>跟浏览器交互默认情况下，session cookie会在用户关闭浏览器时清除。通过将session.permanent属性设为True可以将session的有效期延长为31天，也可以通过操作<code>app</code>的配置<code>PERMANENT_SESSION_LIFETIME</code>来设置<code>session</code>过期时间。</p>\n<p><strong>案例 3.3.2.1:开启指定session过期时间模式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, session</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class=\"number\">24</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_session_info</span>():</span></span><br><span class=\"line\">    session[<span class=\"string\">&#x27;username&#x27;</span>] = <span class=\"string\">&#x27;mark&#x27;</span></span><br><span class=\"line\">    session[<span class=\"string\">&#x27;userphone&#x27;</span>] = <span class=\"string\">&#x27;123456&#x27;</span></span><br><span class=\"line\">    session.permanent = <span class=\"literal\">True</span> <span class=\"comment\"># 开启设置有效期，默认为31天后过期</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137209-326713179..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137209-326713179..png\" alt=\"1550931605863\" /></a></p>\n<p><strong>案例 3.3.2.1:开启session指定过期时间模式后指定具体的过期时间</strong></p>\n<p>基于案例3.3.2.1，通过设置<code>PERMANENT_SESSION_LIFETIME</code>指定具体的过期时间</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>] = timedelta(hours=<span class=\"number\">1</span>) <span class=\"comment\"># 设置为1小时候过期</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137356-1128605837..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137356-1128605837..png\" alt=\"1550932150978\" /></a></p>\n<h3 id=\"233-获取session\"><a class=\"markdownIt-Anchor\" href=\"#233-获取session\"></a> 2.3.3 获取session</h3>\n<p>在Flask中获取设置的session信息通过session对象获取，session对象是继承了字典类，所以获取的时候是字典的取值方式。其内部会把浏览器传过来的session信息解密。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_session/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_session</span>():</span></span><br><span class=\"line\">    username = session.get(<span class=\"string\">&#x27;username&#x27;</span>)</span><br><span class=\"line\">    userphone = session.get(<span class=\"string\">&#x27;userphone&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> username <span class=\"keyword\">or</span> userphone:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&#123;&#125;,&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(username, userphone)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;session为空&quot;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137512-1371028199..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137512-1371028199..png\" alt=\"1550930691065\" /></a></p>\n<h3 id=\"234-删除session\"><a class=\"markdownIt-Anchor\" href=\"#234-删除session\"></a> 2.3.4 删除session</h3>\n<p><code>session</code>对象调用<code>pop()</code>可以根据具体的<code>session</code>的key清除掉指定的session信息。</p>\n<p>session对象调用<code>clear()</code>可以清除此次请求的浏览器关于本域名的所有session信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/del_session/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">del_session</span>():</span></span><br><span class=\"line\">    session.pop(<span class=\"string\">&#x27;username&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># session.clear()</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;删除成功&#x27;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-flask模板上下文处理器\"><a class=\"markdownIt-Anchor\" href=\"#3-flask模板上下文处理器\"></a> 3 flask模板上下文处理器</h1>\n<p><code>app</code>对象调用<code>context_processor</code>作为模板上下文处理器，视图函数在每一次调用render_template(’’)的时候都会为模板传入<code>@app.context_processor</code>装饰器所装饰函数的返回值，该返回值作为模板变量，但是返回值一定要为字典，如果不想返回任何值，可以返回空字典，否则会报错，返回值可以设置为模板经常要使用的变量，减少了代码的冗余，提高了代码的可维护性。</p>\n<p><strong>示例 4.1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    context_dict = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;马克&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>, **context_dict)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/detail/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span>():</span></span><br><span class=\"line\">    context_dict = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;马克&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;detail.html&#x27;</span>, **context_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>示例4.2</strong></p>\n<p>示例4.2 利用模板上下文处理器避免了一些代码的冗余，利用该处理器，可以为视图函数每一次返回模板的时候传入设置好的变量，<code>示例4.2</code>实现的效果同<code>示例4.1</code>完全一致。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/detail/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;detail.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.context_processor</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">context_processor</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;马克&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><em>适用场景：比如登录网站后用户信息始终显示在页面的右上角，我们可以利用模板上下文处理器，做到每次返回模板的时候都为其传入用户信息，减少了代码的冗余，提高了代码的可维护性。</em></p>\n<h1 id=\"4-闪现\"><a class=\"markdownIt-Anchor\" href=\"#4-闪现\"></a> 4 闪现</h1>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137970-224747758..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155137970-224747758..png\" alt=\"1554289488442\" /></a></p>\n<h2 id=\"41-在模板中获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#41-在模板中获取闪现信息\"></a> 4.1 在模板中获取闪现信息</h2>\n<p>Flask 提供了一个非常简单的方法来使用闪现系统向用户反馈信息。闪现系统使得在一个请求结束的时候记录一个信息，<code>然后在且仅仅在下一个请求中访问这个数据</code>，强调flask闪现是基于<code>flask</code>内置的<code>session</code>的，利用浏览器的<code>session</code>缓存闪现信息。所以必须设置<code>secret_key</code>。</p>\n<h3 id=\"411-简单的在模板中实现获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#411-简单的在模板中实现获取闪现信息\"></a> 4.1.1 简单的在模板中实现获取闪现信息</h3>\n<p><strong>示例：</strong></p>\n<p><a href=\"http://server.py\">server.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, flash, redirect, render_template, \\</span><br><span class=\"line\">     request, url_for</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.secret_key = <span class=\"string\">&#x27;some_secret&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>, <span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    error = <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> request.form[<span class=\"string\">&#x27;username&#x27;</span>] != <span class=\"string\">&#x27;admin&#x27;</span> <span class=\"keyword\">or</span> \\</span><br><span class=\"line\">                request.form[<span class=\"string\">&#x27;password&#x27;</span>] != <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">            error = <span class=\"string\">&#x27;登录失败&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> redirect(url_for(<span class=\"string\">&#x27;index&#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>, error=error)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><em><strong>注意：这个 <code>flash()</code> 就可以实现在下一次请求时候，将括号内的信息做一个缓存。不要忘记设置secret_key</strong></em></p>\n<p>这里是 index.html 模板:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% with messages &#x3D; get_flashed_messages() %&#125;  # 获取所有的闪现信息返回一个列表</span><br><span class=\"line\">  &#123;% if messages %&#125;</span><br><span class=\"line\">    &lt;ul class&#x3D;flashes&gt;</span><br><span class=\"line\">    &#123;% for message in messages %&#125;</span><br><span class=\"line\">      &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;&#x2F;ul&gt;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endwith %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;h1&gt;主页&lt;&#x2F;h1&gt;</span><br><span class=\"line\">  &lt;p&gt;跳转到登录页面&lt;a href&#x3D;&quot;&#123;&#123; url_for(&#39;login&#39;) &#125;&#125;&quot;&gt;登录?&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n<p><em><strong>注意：<code>&#123;% with messages = get_flashed_messages() %&#125;</code>  获取所有的闪现信息返回一个列表</strong></em></p>\n<p>这里是login.html 模板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>登录页面<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">&#123;% if error %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">error</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>Error:<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span> &#123;&#123; error &#125;&#125;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">post</span>&gt;</span></span><br><span class=\"line\">    用户名:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">text</span> <span class=\"attr\">name</span>=<span class=\"string\">username</span>&gt;</span></span><br><span class=\"line\">    密码:</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">password</span> <span class=\"attr\">name</span>=<span class=\"string\">password</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">submit</span> <span class=\"attr\">value</span>=<span class=\"string\">Login</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1552036299625\"><a class=\"markdownIt-Anchor\" href=\"#1552036299625\"></a> <a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155138240-12907379..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155138240-12907379..png\" alt=\"1552036299625\" /></a></h4>\n<p><strong>简单的在模板中实现获取闪现信息小结：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置闪现内容：flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>)</span><br><span class=\"line\">模板取出闪现内容：&#123;% <span class=\"keyword\">with</span> messages = get_flashed_messages() %&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"412-模板中的分类闪现\"><a class=\"markdownIt-Anchor\" href=\"#412-模板中的分类闪现\"></a> 4.1.2 模板中的分类闪现</h3>\n<p>当闪现一个消息时，是可以提供一个分类的。未指定分类时默认的分类为 <code>'message'</code> 。 可以使用分类来提供给用户更好的反馈，可以给用户更精准的提示信息体验。</p>\n<p>要使用一个自定义的分类，只要使用 <code>flash()</code> 函数的第二个参数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>,<span class=\"string\">&quot;status&quot;</span>)</span><br><span class=\"line\">flash(<span class=\"string\">&#x27;您的账户名为admin&#x27;</span>,<span class=\"string\">&quot;username&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在使用<code>get_flashed_messages()</code>时候需要传入<code>with_categories=true</code>便可以渲染出来类别</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% with messages &#x3D; get_flashed_messages(with_categories&#x3D;true) %&#125;</span><br><span class=\"line\">  &#123;% if messages %&#125;</span><br><span class=\"line\">    &lt;ul class&#x3D;flashes&gt;</span><br><span class=\"line\">    &#123;% for category, message in messages %&#125;</span><br><span class=\"line\">      &lt;li class&#x3D;&quot;&#123;&#123; category &#125;&#125;&quot;&gt;&#123;&#123; category &#125;&#125;：&#123;&#123; message &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;&#x2F;ul&gt;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155139453-249225863..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155139453-249225863..png\" alt=\" 1552041915121\" /></a></p>\n<p><strong>模板中的分类闪现小结：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分类设置闪现内容：flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>,<span class=\"string\">&quot;status&quot;</span>)</span><br><span class=\"line\">\t\t    flash(<span class=\"string\">&#x27;您的账户名为admin&#x27;</span>,<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">模板取值：   &#123;% <span class=\"keyword\">with</span> messages = get_flashed_messages(with_categories=true) %&#125;</span><br><span class=\"line\">            &#123;% <span class=\"keyword\">if</span> messages %&#125;</span><br><span class=\"line\">            &lt;ul class=flashes&gt;</span><br><span class=\"line\">            &#123;% <span class=\"keyword\">for</span> category, message <span class=\"keyword\">in</span> messages %&#125;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<h3 id=\"413-模板中过滤闪现消息\"><a class=\"markdownIt-Anchor\" href=\"#413-模板中过滤闪现消息\"></a> 4.1.3 模板中过滤闪现消息</h3>\n<p>同样要使用一个自定义的分类，只要使用 <code>flash()</code> 函数的第二个参数:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>,<span class=\"string\">&quot;status&quot;</span>)</span><br><span class=\"line\">flash(<span class=\"string\">&#x27;您的账户名为admin&#x27;</span>,<span class=\"string\">&quot;username&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在使用<code>get_flashed_messages()</code>时候需要传入<code>category_filter=[&quot;username&quot;]</code>便可根据类别取出闪现信息。中括号内可以传入的值就是类别，可以传入多个。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% with messages &#x3D; get_flashed_messages(category_filter&#x3D;[&quot;username&quot;]) %&#125;</span><br><span class=\"line\">&#123;% if messages %&#125;</span><br><span class=\"line\">  &lt;ul&gt;</span><br><span class=\"line\">    &#123;%- for message in messages %&#125;</span><br><span class=\"line\">    &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">    &#123;% endfor -%&#125;</span><br><span class=\"line\">  &lt;&#x2F;ul&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155140542-1156156426..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155140542-1156156426..png\" alt=\"1552041362576\" /></a></p>\n<p><strong>小结：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">分类设置闪现内容：flash(<span class=\"string\">&#x27;恭喜您登录成功&#x27;</span>,<span class=\"string\">&quot;status&quot;</span>)</span><br><span class=\"line\">\t\t    flash(<span class=\"string\">&#x27;您的账户名为admin&#x27;</span>,<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">模板取值：  % <span class=\"keyword\">with</span> messages = get_flashed_messages(category_filter=[<span class=\"string\">&quot;username&quot;</span>]) %&#125;</span><br><span class=\"line\">            &#123;% <span class=\"keyword\">if</span> messages %&#125;</span><br><span class=\"line\">              &lt;ul&gt;</span><br><span class=\"line\">                &#123;%- <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> messages %&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"42-在视图中获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#42-在视图中获取闪现信息\"></a> 4.2 在视图中获取闪现信息</h2>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155141774-1627594844..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155141774-1627594844..png\" alt=\"1554289560305\" /></a></p>\n<h3 id=\"421-简单的在是视图中获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#421-简单的在是视图中获取闪现信息\"></a> 4.2.1 简单的在是视图中获取闪现信息</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-设置: flash(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\">-取值：get_flashed_message() <span class=\"comment\"># 注意这个不同于模板取值，这个是从flask中导入的</span></span><br><span class=\"line\">-注意：在视图中获取闪现信息不必非得是两次连续的请求，只要保证是第一次取相应的闪现信息，就可以取得到。</span><br></pre></td></tr></table></figure>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, flash, get_flashed_messages</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.secret_key = os.urandom(<span class=\"number\">4</span>)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&#x27;name&#x27;</span>) == <span class=\"string\">&#x27;rocky&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;第一条闪现信息：用户名不是rocky填写的是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(request.args.get(<span class=\"string\">&#x27;name&#x27;</span>)))</span><br><span class=\"line\">    <span class=\"comment\"># flash(&#x27;第二条闪现信息：用户名不是rocky填写的是&#123;&#125;&#x27;.format(request.args.get(&#x27;name&#x27;)))</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error,设置了闪现&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_flash/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_flash</span>():</span></span><br><span class=\"line\">    <span class=\"comment\">#get_flashed_messages()是一个列表列表可以取出闪现信息，该条闪现信息只要被取出就会删除掉。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;闪现的信息是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(get_flashed_messages())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/demo/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;demo&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>**（1）**会触发设置闪现内容</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155142726-1681318289..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155142726-1681318289..png\" alt=\"1552048742450\" /></a></p>\n<p>**（2）**取出闪现内容</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143713-1931514309..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143713-1931514309..png\" alt=\"1552052193446\" /></a></p>\n<p>**（3）**再次取出闪现内容，发现闪现内容取出一次后就为空了</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143887-2108757345..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155143887-2108757345..png\" alt=\"1552052104889\" /></a></p>\n<p><strong>小结：</strong></p>\n<ul>\n<li>get_flashed_messages()是一个列表，该列表可以取出闪现信息，该条闪现信息只要被取出就会删除掉。</li>\n</ul>\n<h3 id=\"422-在视图中实现分类获取闪现信息\"><a class=\"markdownIt-Anchor\" href=\"#422-在视图中实现分类获取闪现信息\"></a> 4.2.2 在视图中实现分类获取闪现信息。</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-设置：flash(<span class=\"string\">&#x27;用户名错误&#x27;</span>, <span class=\"string\">&quot;username_error&quot;</span>)</span><br><span class=\"line\">      flash(<span class=\"string\">&#x27;用户密码错误&#x27;</span>, <span class=\"string\">&quot;password_error&quot;</span>) <span class=\"comment\"># 第二个参数为闪现信息的分类。</span></span><br><span class=\"line\"></span><br><span class=\"line\">-取所有闪现信息的类别和闪现内容：get_flashed_messages(with_categories=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">-针对分类过滤取值：get_flashed_messages(category_filter=[<span class=\"string\">&#x27;username_error&#x27;</span>]) </span><br><span class=\"line\">\t\t\t<span class=\"comment\"># 中括号内可以写多个分类。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">-注意：如果flash()没有传入第二个参数进行分类，默认分类是 <span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<p><strong>示例1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&#x27;name&#x27;</span>) == <span class=\"string\">&#x27;rocky&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;用户名错误&#x27;</span>, category=<span class=\"string\">&quot;username_error&quot;</span>)</span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;用户密码错误&#x27;</span>, <span class=\"string\">&quot;password_error&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error,设置了闪现&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_flash/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_flash</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;闪现的信息是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(get_flashed_messages(with_categories=<span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure>\n<p>把所有的闪现类别和闪现信息返回。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144215-1937103247..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144215-1937103247..png\" alt=\"1552051297253\" /></a></p>\n<p><strong>示例2</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.args.get(<span class=\"string\">&#x27;name&#x27;</span>) == <span class=\"string\">&#x27;rocky&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;ok&#x27;</span></span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;用户名错误&#x27;</span>, category=<span class=\"string\">&quot;username_error&quot;</span>)</span><br><span class=\"line\">    flash(<span class=\"string\">&#x27;用户密码错误&#x27;</span>, <span class=\"string\">&quot;password_error&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error,设置了闪现&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get_flash/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_flash</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;闪现的信息是&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(get_flashed_messages(category_filter=[<span class=\"string\">&#x27;username_error&#x27;</span>]))</span><br></pre></td></tr></table></figure>\n<p>返回页面只显示了 <code>&quot;username_error&quot;</code>的分类内容。</p>\n<p>[<img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155144365-2146703891..png\" alt=\"1552050949373\" /></p>\n","categories":[{"name":"flask","path":"api/categories/flask.json"}],"tags":[{"name":"flask","path":"api/tags/flask.json"},{"name":"python","path":"api/tags/python.json"}]}