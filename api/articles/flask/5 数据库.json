{"title":"5 数据库","slug":"flask/5 数据库","date":"2021-01-18T11:39:27.081Z","updated":"2021-01-19T08:30:03.770Z","comments":true,"path":"api/articles/flask/5 数据库.json","excerpt":null,"covers":["https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222009447-565965275.gif","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222012642-1301719010..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014255-1197439633..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014677-1830233725..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222015098-425693015..png"],"content":"<meta name=\"referrer\" content=\"no-referrer\"/>\n<h2 id=\"51-orm\"><a class=\"markdownIt-Anchor\" href=\"#51-orm\"></a> 5.1 ORM</h2>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222009447-565965275.gif\" alt=\"img\" /></p>\n<p>对象关系映射（英语：<strong>(Object Relational Mapping</strong>，简称<strong>ORM</strong>，或<strong>O/RM</strong>，或<strong>O/R mapping</strong>），是一种程序技术，<strong>用于实现面向对象编程语言里不同类型系统的数据之间的转换</strong> 。</p>\n<p>ORM是“对象-关系-映射”的简称。在我们的web应用开发中<strong>ORM把底层的SQL数据实体转化成高层的Python对象</strong>。只需要<strong>通过Python代码即可完成数据库操作</strong>。</p>\n<h2 id=\"52-在flask中应用orm\"><a class=\"markdownIt-Anchor\" href=\"#52-在flask中应用orm\"></a> 5.2 在Flask中应用ORM</h2>\n<p>选择ORM框架时，在我们Flask中更推荐使用Flask的扩展组件<code>Flask-SQLchemy</code> 。</p>\n<p>Python实现的ORM有<code>SQLAlchemy</code>、<code>Peewee</code>、<code>PonyORM</code>等，</p>\n<p>其中<code>SQLAlchemy</code>是Python社区使用最广泛的ORM之一，Flask-<code>SQLchemy</code>正是基于<code>SQLchemy</code>。</p>\n<h3 id=\"521-连接数据库\"><a class=\"markdownIt-Anchor\" href=\"#521-连接数据库\"></a> 5.2.1 连接数据库</h3>\n<p>安装 <code>Flask-SQLchemy</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-sqlalchemy</span><br><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n<p>这里我们的<code>DBMS</code>以<code>mysql</code>数据库为例， 连接数据库</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">HOST = <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">PORT = <span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\">DATABASE_NAME = <span class=\"string\">&#x27;01_db&#x27;</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">PASSWORD = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DB_URI = <span class=\"string\">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\\</span><br><span class=\"line\">.<span class=\"built_in\">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]= <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong></p>\n<ol>\n<li>从<code>flask_sqlalchemy</code>模块中导入<code>SQLAlchemy</code>类</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_sqlalchemy import SQLAlchemy</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>app对象通过变量<code>SQLALCHEMY_DATABASE_URI</code>加载配置好的<code>URI</code>(统一资源标识符)，URI内包含了各种用于连接数据库的信息，指向一个具体的库。</li>\n</ol>\n<p><strong>常用数据库的URI格式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOST = <span class=\"string\">&#x27;127.0.0.1&#x27;</span>   <span class=\"comment\"># ip</span></span><br><span class=\"line\">PORT = <span class=\"string\">&#x27;3306&#x27;</span>\t\t     <span class=\"comment\"># 端口</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">&#x27;root&#x27;</span>\t     <span class=\"comment\"># 数据库账号</span></span><br><span class=\"line\">PASSWORD = <span class=\"string\">&#x27;root&#x27;</span>        <span class=\"comment\"># 密码</span></span><br><span class=\"line\">DATABASE_NAME = <span class=\"string\">&#x27;01_db&#x27;</span>  <span class=\"comment\"># 具体的一个库名</span></span><br><span class=\"line\">DB_URI = <span class=\"string\">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\\</span><br><span class=\"line\">.<span class=\"built_in\">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br></pre></td></tr></table></figure>\n<p><strong>3</strong> <code>SQLALCHEMY_TRACK_MODIFICATIONS</code>这个配置变量决定是否追踪对象的修改，这用于<code>FLask- SQLALchemy</code>的事件通知系统。这个配置键默认值为<code>None</code>，如果没有特殊需要我们把它设置为<code>Flase</code>, 避免造成一些没必要的性能浪费。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]= <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p><strong>4</strong> <code>SQLAlchemy</code>类传入<code>app</code>类，引用<code>app</code>配置定位到具体的数据库，并且实例化出<code>db</code>对象，这个db对象代表我们的数据库，并且通过这个对象操作我们的<code>ORM</code></p>\n<h2 id=\"-code5-\"><a class=\"markdownIt-Anchor\" href=\"#-code5-\"></a> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure></h2>\n<h3 id=\"522-数据库模型\"><a class=\"markdownIt-Anchor\" href=\"#522-数据库模型\"></a> 5.2.2 数据库模型</h3>\n<p><strong>数据库模型</strong>： 继承了<code>db.Model</code>的python类，并且这个python类映射到数据库为一个表 。 每个数据库模型都对应着数据库中的一个表。</p>\n<h4 id=\"5221-数据库模型示例\"><a class=\"markdownIt-Anchor\" href=\"#5221-数据库模型示例\"></a> 5.2.2.1 数据库模型示例</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;user_info&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer,primary_key=<span class=\"literal\">True</span>,autoincrement=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">20</span>),nullable=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>__tablename__</code>：</p>\n<p>可以直接指定表名（推荐使用）。如果没有写<code>__tablename__</code></p>\n<p>指定表名，此类名可以自动转化为表名（不推荐使用）。</p>\n<ul>\n<li>类名自动转化表名的方式为<code>User</code>–&gt; <code>user</code># 单个单词转换为小写<br />\n<code>UserInfo</code>–&gt; <code>user_info</code># 多个单词转换为小写并使用下划线分隔</li>\n<li>如UserInfo类在没有<code>__tablename__</code>指定表名时候，UserInfo类会自动映射到数据库的表名为<code>user_info</code>。</li>\n</ul>\n</li>\n<li>\n<p><code>db.Column</code></p>\n<p>类实例化表示字段（表示数据库中的列），该类实例化出的对象被一个变量接受，该变量表示字段名。该类实例化时传入的参数表示字段的约束。</p>\n<ul>\n<li>如：<code>id = db.Column(db.Integer,primary_key=True,autoincrement=True)</code>表示该表内id字段为主键并且自动增长。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5223-常见的字段类型表\"><a class=\"markdownIt-Anchor\" href=\"#5223-常见的字段类型表\"></a> 5.2.2.3 常见的字段类型表</h4>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n<th>映射到数据库对应类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Integer</td>\n<td>整数</td>\n<td>int类型</td>\n</tr>\n<tr>\n<td>String</td>\n<td>字符串，<code>String</code>类内可选择<code>length</code>参数的值用于设置最大字符个数</td>\n<td>varchar类型</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>用于储存较长的Unicode文本，,理论上可以储存65535个字节</td>\n<td>text类型</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>日期，存储<code>Python</code>的<code>datetime.date</code> 对象</td>\n<td>date类型</td>\n</tr>\n<tr>\n<td>Time</td>\n<td>时间，存储<code>Python</code>的<code>datetime.time</code> 对象</td>\n<td>time类型</td>\n</tr>\n<tr>\n<td>DateTime</td>\n<td>时间和日期，存储<code>Python</code> 的<code>datetime</code> 对象</td>\n<td>datetime类型</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>浮点类型</td>\n<td>float类型</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>双精度浮点类型，比浮点类型小数位精度更高。</td>\n<td>double类型，占据64位。</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值</td>\n<td>tinyint类型</td>\n</tr>\n<tr>\n<td>Enum</td>\n<td>枚举类型</td>\n<td>enum类型</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5224-column常用参数表\"><a class=\"markdownIt-Anchor\" href=\"#5224-column常用参数表\"></a> 5.2.2.4 Column常用参数表</h4>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>primary_key</td>\n<td>如果设为True，该列就是表的主键</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>如果设为True，该列每个值唯一，也就是该字段不允许出现重复值</td>\n</tr>\n<tr>\n<td>index</td>\n<td>如果设为True，为这列创建索引，用于提升查询效率</td>\n</tr>\n<tr>\n<td>nullable</td>\n<td>如果设为True，这列允许使用空值，反之则不允许使用空值。</td>\n</tr>\n<tr>\n<td>server_default</td>\n<td>为这列定义默认值, 默认值只支持字符串，其他类型需要db.text()方法指定</td>\n</tr>\n<tr>\n<td>default</td>\n<td>为这列定义默认值，但是该约束并不会真正映射到表结构中，该约束只会在ORM层面实现(不推荐使用)</td>\n</tr>\n<tr>\n<td>comment</td>\n<td>该字段的注释</td>\n</tr>\n<tr>\n<td>name</td>\n<td>可以使用该参数直接指定字段名</td>\n</tr>\n<tr>\n<td>autoincrement</td>\n<td>设置这个字段为自动增长的。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"server_default常用配置\"><a class=\"markdownIt-Anchor\" href=\"#server_default常用配置\"></a> <strong>server_default常用配置</strong></h5>\n<table>\n<thead>\n<tr>\n<th>配置默认值类型</th>\n<th>代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>更新datatime时间</td>\n<td>server_default = db.text(“CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP”)</td>\n</tr>\n<tr>\n<td>当前的datatime时间</td>\n<td>server_default = db.text(“CURRENT_TIMESTAMP”)</td>\n</tr>\n<tr>\n<td>数字</td>\n<td>server_default=“数字”</td>\n</tr>\n<tr>\n<td>布尔</td>\n<td>server_default=db.text(‘True’) / server_default=db.text(‘False’)/ server_default=‘数字’</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5225-将写好的模型映射到数据库\"><a class=\"markdownIt-Anchor\" href=\"#5225-将写好的模型映射到数据库\"></a> 5.2.2.5 将写好的模型映射到数据库</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;user_info&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer,primary_key=<span class=\"literal\">True</span>,autoincrement=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">20</span>),nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">db.create_all()</span><br></pre></td></tr></table></figure>\n<p>如果你已经定义好了模型：一个继承<code>db.Model</code>的类</p>\n<p>想把这个模型映射到数据库中（在数据库中创建这个模型所描述的一张表）：使用<code>db.create_all()</code>可以实现把继承了该<code>db.model</code>的所有模型创建到数据库中。查看数据库的时候我们会发现多了一张<code>user_info</code>表。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222012642-1301719010..png\" alt=\"1549800892083\" /></p>\n<h4 id=\"5226-更新模型\"><a class=\"markdownIt-Anchor\" href=\"#5226-更新模型\"></a> 5.2.2.6 更新模型</h4>\n<p>对已存在的表的模型，使用<code>db.create_all()</code>无效</p>\n<ol>\n<li>先<code>db.drop_all()</code>删除该库下的所有继承了<code>db.model</code>的模型表，</li>\n<li>然后再<code>db.create_all()</code>使得继承了<code>db.model</code>的所有模型表映射到数据库中，从而创建我们更新的表。</li>\n</ol>\n<p>弊端：会销毁原有的数据</p>\n<p>解决弊端：看下一章</p>\n<hr />\n<h3 id=\"523-数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#523-数据库操作\"></a> 5.2.3 数据库操作</h3>\n<h4 id=\"5231-增\"><a class=\"markdownIt-Anchor\" href=\"#5231-增\"></a> 5.2.3.1 增</h4>\n<p><strong>模型表 映射到数据中</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&quot;school&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer,primary_key=<span class=\"literal\">True</span>,nullable=<span class=\"literal\">False</span>,autoincrement=<span class=\"literal\">True</span>,comment=<span class=\"string\">&quot;ID&quot;</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">30</span>),nullable=<span class=\"literal\">False</span>,server_default=<span class=\"string\">&#x27;&#x27;</span>,comment=<span class=\"string\">&quot;学校名称&quot;</span>)</span><br><span class=\"line\">    area = db.Column(db.String(<span class=\"number\">30</span>),nullable=<span class=\"literal\">False</span>,server_default=<span class=\"string\">&#x27;&#x27;</span>,comment=<span class=\"string\">&quot;所属地区&quot;</span>)</span><br><span class=\"line\">    score = db.Column(db.Integer,nullable=<span class=\"literal\">False</span>,server_default=<span class=\"string\">&#x27;600&#x27;</span>,comment=<span class=\"string\">&quot;录取分数线&quot;</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;School(name:&#123;&#125;)&gt;&quot;</span>.<span class=\"built_in\">format</span>(self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">db.create_all()</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong> — <strong>新增四条记录映射到数据库中</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">school_01 =School(name=<span class=\"string\">&quot;北京大学&quot;</span>,area=<span class=\"string\">&quot;北京&quot;</span>,score=<span class=\"number\">658</span>)  <span class=\"comment\"># 实例化模型类作为一条记录</span></span><br><span class=\"line\">school_02 =School(name=<span class=\"string\">&quot;清华大学&quot;</span>,area=<span class=\"string\">&quot;北京&quot;</span>,score=<span class=\"number\">667</span>)</span><br><span class=\"line\">school_03 =School(name=<span class=\"string\">&quot;中山大学&quot;</span>,area=<span class=\"string\">&quot;广东&quot;</span>,score=<span class=\"number\">645</span>)</span><br><span class=\"line\">school_04 =School(name=<span class=\"string\">&quot;复旦大学&quot;</span>,area=<span class=\"string\">&quot;上海&quot;</span>,score=<span class=\"number\">650</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">db.session.add(school_01)   <span class=\"comment\"># 把新创建的记录添加到数据库会话</span></span><br><span class=\"line\">db.session.add(school_02)</span><br><span class=\"line\">db.session.add(school_03)</span><br><span class=\"line\">db.session.add(school_04)</span><br><span class=\"line\"></span><br><span class=\"line\">db.session.commit()  <span class=\"comment\"># 提交数据库会话</span></span><br></pre></td></tr></table></figure>\n<p><em>提示：数据库会话db.session和后面介绍的Flasksession对象没有关系。db.session是数据库会话也称为事务。</em></p>\n<ol>\n<li>实例化模型类创建对象，该对象作为一条记录，实例化的过程传入的参数为字段内容。</li>\n<li>把新创建的记录添加到数据库会话。</li>\n<li>提交数据库会话</li>\n</ol>\n<p><strong>查看数据库</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014255-1197439633..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014255-1197439633..png\" alt=\"1549869497823\" /></a></p>\n<p><em>提示1 ：如果add多条记录可以使用add_all()一次添加包含多条记录的列表</em></p>\n<p><em>如：<code>db.session.add_all([school_01,school_02,school_03，school_04])</code></em></p>\n<h4 id=\"5232-查\"><a class=\"markdownIt-Anchor\" href=\"#5232-查\"></a> 5.2.3.2 查</h4>\n<p>在我们的flask中 <code>db.session</code> 出的对象调用<code>query</code>属性，可以通过query属性调用各种过滤方法完成查询。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模型类.&lt;过滤方法&gt;.&lt;查询方法&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>常用过滤器表：</strong></p>\n<table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter()</td>\n<td>使用指定的规则过滤记录相当于sql的where约束条件，返回一个新查询</td>\n</tr>\n<tr>\n<td>filter_by()</td>\n<td>同filter原理，不同的是查询的时要使用关键字参数，返回一个新查询</td>\n</tr>\n<tr>\n<td>limit()</td>\n<td>使用指定的值限制原查询返回的结果的数量，返回一个新查询</td>\n</tr>\n<tr>\n<td>offset()</td>\n<td>偏移原查询返回的结果，返回一个新查询</td>\n</tr>\n<tr>\n<td>order_by()</td>\n<td>根据指定条件对原查询结构进行排序，返回一个新查询</td>\n</tr>\n<tr>\n<td>group_by()</td>\n<td>根据指定条件对原来查询结构进行分组，返回一个新查询</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例</strong></p>\n<p><em>下面几个查询案例需要在<code>示例 5.2.3.1</code>完成的基础上操作</em></p>\n<p><strong>all()</strong> 返回一个列表，列表里存放所有符合条件的记录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all_school = School.query.<span class=\"built_in\">all</span>()</span><br><span class=\"line\">print(all_school) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：[&lt;School(name:北京大学)&gt;, &lt;School(name:清华大学)&gt;, &lt;School(name:中山大学)&gt;, &lt;School(name:复旦大学)&gt;]</span></span><br></pre></td></tr></table></figure>\n<p>**first() **返回符合条件的第一条记录：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">school_01 =School.query.first()</span><br><span class=\"line\">print(school_01)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：&lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>get()</strong> 返回指定主键值（id字段）的记录：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">school_01 = School.query.get(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(school_01)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>filter()</strong> 使用指定的规则过滤记录相当于 sql 的where约束条件，返回新产生的查询对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beijing_all = School.query.<span class=\"built_in\">filter</span>(School.area == <span class=\"string\">&quot;北京&quot;</span>).<span class=\"built_in\">all</span>()</span><br><span class=\"line\">beijing_first = School.query.<span class=\"built_in\">filter</span>(School.area == <span class=\"string\">&quot;北京&quot;</span>).first()</span><br><span class=\"line\">print(beijing_all)</span><br><span class=\"line\">print(beijing_first)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：[&lt;School(name:北京大学)&gt;, &lt;School(name:清华大学)&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">#       &lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>filter_by</strong>：同filter()效果一样，查询的时候使用关键字参数查询（无法进行多表复杂查询，不推荐使用）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhongshan_school = School.query.filter_by(name=<span class=\"string\">&#x27;中山大学&#x27;</span>).<span class=\"built_in\">all</span>()</span><br><span class=\"line\">print(zhongshan_school)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：[&lt;School(name:中山大学)&gt;]</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>db.session.qury(模型类)</code>等价于<code>模型类.query</code>，db.session.query功能更强大一些，可以进行多表查询。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fudan_school = School.query.<span class=\"built_in\">filter</span>(School.name == <span class=\"string\">&#x27;复旦大学&#x27;</span>).first()</span><br><span class=\"line\">print(fudan_school)  </span><br><span class=\"line\"><span class=\"comment\"># 输出：&lt;School(name:复旦大学)&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fudan_school = db.session.query(School).<span class=\"built_in\">filter</span>(School.name == <span class=\"string\">&#x27;复旦大学&#x27;</span>).first()</span><br><span class=\"line\">print(fudan_school)</span><br><span class=\"line\"><span class=\"comment\"># 输出：&lt;School(name:复旦大学)&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>提示：其他的过滤器会在接下来的章节具体根据实际案例讲解</em></p>\n<h4 id=\"5233-改\"><a class=\"markdownIt-Anchor\" href=\"#5233-改\"></a> 5.2.3.3 改</h4>\n<p><strong>示例</strong></p>\n<p><strong>修改北京大学的录取成绩</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beida = School.query.<span class=\"built_in\">filter</span>(School.name==<span class=\"string\">&#x27;北京大学&#x27;</span>).first()</span><br><span class=\"line\">beida.score = <span class=\"number\">630</span></span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014677-1830233725..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014677-1830233725..png\" alt=\"1549872535950\" /></a></p>\n<p>更新一条记录分为一下几部：</p>\n<ol>\n<li>\n<p>找到对应的记录对象</p>\n</li>\n<li>\n<p>修改记录对象的属性</p>\n</li>\n<li>\n<p>直接调用<code>db.session.commit()</code>提交会话</p>\n<p><em>提示：只有要插入新的记录或要将现有的记录添加到会话中时才需要使用add（）方法。只是更新现有记录的时可以修改记录对象属性后直接提交会话</em></p>\n</li>\n</ol>\n<h4 id=\"5234-删\"><a class=\"markdownIt-Anchor\" href=\"#5234-删\"></a> 5.2.3.4 删</h4>\n<p><strong>示例</strong></p>\n<p><strong>从数据库中删除清华大学相关信息</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qinghua = School.query.<span class=\"built_in\">filter</span>(School.name==<span class=\"string\">&#x27;清华大学&#x27;</span>).first()</span><br><span class=\"line\">db.session.delete(qinghua)</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222015098-425693015..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222015098-425693015..png\" alt=\"1549872948198\" /></a></p>\n<p>删除一条记录分为以下几步：</p>\n<ol>\n<li>找到对应的记录对象</li>\n<li>需要调用<code>delete()</code>方法在会话中标识需要删除的记录，具体是把该记录对象传入<code>db.session.delete(记录对象)</code>实现标识。</li>\n<li>调用<code>db.session.commit()</code>提交会话。</li>\n</ol>\n","more":"<meta name=\"referrer\" content=\"no-referrer\"/>\n<h2 id=\"51-orm\"><a class=\"markdownIt-Anchor\" href=\"#51-orm\"></a> 5.1 ORM</h2>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222009447-565965275.gif\" alt=\"img\" /></p>\n<p>对象关系映射（英语：<strong>(Object Relational Mapping</strong>，简称<strong>ORM</strong>，或<strong>O/RM</strong>，或<strong>O/R mapping</strong>），是一种程序技术，<strong>用于实现面向对象编程语言里不同类型系统的数据之间的转换</strong> 。</p>\n<p>ORM是“对象-关系-映射”的简称。在我们的web应用开发中<strong>ORM把底层的SQL数据实体转化成高层的Python对象</strong>。只需要<strong>通过Python代码即可完成数据库操作</strong>。</p>\n<h2 id=\"52-在flask中应用orm\"><a class=\"markdownIt-Anchor\" href=\"#52-在flask中应用orm\"></a> 5.2 在Flask中应用ORM</h2>\n<p>选择ORM框架时，在我们Flask中更推荐使用Flask的扩展组件<code>Flask-SQLchemy</code> 。</p>\n<p>Python实现的ORM有<code>SQLAlchemy</code>、<code>Peewee</code>、<code>PonyORM</code>等，</p>\n<p>其中<code>SQLAlchemy</code>是Python社区使用最广泛的ORM之一，Flask-<code>SQLchemy</code>正是基于<code>SQLchemy</code>。</p>\n<h3 id=\"521-连接数据库\"><a class=\"markdownIt-Anchor\" href=\"#521-连接数据库\"></a> 5.2.1 连接数据库</h3>\n<p>安装 <code>Flask-SQLchemy</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-sqlalchemy</span><br><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n<p>这里我们的<code>DBMS</code>以<code>mysql</code>数据库为例， 连接数据库</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">HOST = <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">PORT = <span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\">DATABASE_NAME = <span class=\"string\">&#x27;01_db&#x27;</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">PASSWORD = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DB_URI = <span class=\"string\">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\\</span><br><span class=\"line\">.<span class=\"built_in\">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]= <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong></p>\n<ol>\n<li>从<code>flask_sqlalchemy</code>模块中导入<code>SQLAlchemy</code>类</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_sqlalchemy import SQLAlchemy</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>app对象通过变量<code>SQLALCHEMY_DATABASE_URI</code>加载配置好的<code>URI</code>(统一资源标识符)，URI内包含了各种用于连接数据库的信息，指向一个具体的库。</li>\n</ol>\n<p><strong>常用数据库的URI格式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOST = <span class=\"string\">&#x27;127.0.0.1&#x27;</span>   <span class=\"comment\"># ip</span></span><br><span class=\"line\">PORT = <span class=\"string\">&#x27;3306&#x27;</span>\t\t     <span class=\"comment\"># 端口</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">&#x27;root&#x27;</span>\t     <span class=\"comment\"># 数据库账号</span></span><br><span class=\"line\">PASSWORD = <span class=\"string\">&#x27;root&#x27;</span>        <span class=\"comment\"># 密码</span></span><br><span class=\"line\">DATABASE_NAME = <span class=\"string\">&#x27;01_db&#x27;</span>  <span class=\"comment\"># 具体的一个库名</span></span><br><span class=\"line\">DB_URI = <span class=\"string\">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\\</span><br><span class=\"line\">.<span class=\"built_in\">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = DB_URI</span><br></pre></td></tr></table></figure>\n<p><strong>3</strong> <code>SQLALCHEMY_TRACK_MODIFICATIONS</code>这个配置变量决定是否追踪对象的修改，这用于<code>FLask- SQLALchemy</code>的事件通知系统。这个配置键默认值为<code>None</code>，如果没有特殊需要我们把它设置为<code>Flase</code>, 避免造成一些没必要的性能浪费。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config[<span class=\"string\">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>]= <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p><strong>4</strong> <code>SQLAlchemy</code>类传入<code>app</code>类，引用<code>app</code>配置定位到具体的数据库，并且实例化出<code>db</code>对象，这个db对象代表我们的数据库，并且通过这个对象操作我们的<code>ORM</code></p>\n<h2 id=\"-code5-\"><a class=\"markdownIt-Anchor\" href=\"#-code5-\"></a> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure></h2>\n<h3 id=\"522-数据库模型\"><a class=\"markdownIt-Anchor\" href=\"#522-数据库模型\"></a> 5.2.2 数据库模型</h3>\n<p><strong>数据库模型</strong>： 继承了<code>db.Model</code>的python类，并且这个python类映射到数据库为一个表 。 每个数据库模型都对应着数据库中的一个表。</p>\n<h4 id=\"5221-数据库模型示例\"><a class=\"markdownIt-Anchor\" href=\"#5221-数据库模型示例\"></a> 5.2.2.1 数据库模型示例</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;user_info&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer,primary_key=<span class=\"literal\">True</span>,autoincrement=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">20</span>),nullable=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>__tablename__</code>：</p>\n<p>可以直接指定表名（推荐使用）。如果没有写<code>__tablename__</code></p>\n<p>指定表名，此类名可以自动转化为表名（不推荐使用）。</p>\n<ul>\n<li>类名自动转化表名的方式为<code>User</code>–&gt; <code>user</code># 单个单词转换为小写<br />\n<code>UserInfo</code>–&gt; <code>user_info</code># 多个单词转换为小写并使用下划线分隔</li>\n<li>如UserInfo类在没有<code>__tablename__</code>指定表名时候，UserInfo类会自动映射到数据库的表名为<code>user_info</code>。</li>\n</ul>\n</li>\n<li>\n<p><code>db.Column</code></p>\n<p>类实例化表示字段（表示数据库中的列），该类实例化出的对象被一个变量接受，该变量表示字段名。该类实例化时传入的参数表示字段的约束。</p>\n<ul>\n<li>如：<code>id = db.Column(db.Integer,primary_key=True,autoincrement=True)</code>表示该表内id字段为主键并且自动增长。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5223-常见的字段类型表\"><a class=\"markdownIt-Anchor\" href=\"#5223-常见的字段类型表\"></a> 5.2.2.3 常见的字段类型表</h4>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n<th>映射到数据库对应类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Integer</td>\n<td>整数</td>\n<td>int类型</td>\n</tr>\n<tr>\n<td>String</td>\n<td>字符串，<code>String</code>类内可选择<code>length</code>参数的值用于设置最大字符个数</td>\n<td>varchar类型</td>\n</tr>\n<tr>\n<td>Text</td>\n<td>用于储存较长的Unicode文本，,理论上可以储存65535个字节</td>\n<td>text类型</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>日期，存储<code>Python</code>的<code>datetime.date</code> 对象</td>\n<td>date类型</td>\n</tr>\n<tr>\n<td>Time</td>\n<td>时间，存储<code>Python</code>的<code>datetime.time</code> 对象</td>\n<td>time类型</td>\n</tr>\n<tr>\n<td>DateTime</td>\n<td>时间和日期，存储<code>Python</code> 的<code>datetime</code> 对象</td>\n<td>datetime类型</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>浮点类型</td>\n<td>float类型</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>双精度浮点类型，比浮点类型小数位精度更高。</td>\n<td>double类型，占据64位。</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值</td>\n<td>tinyint类型</td>\n</tr>\n<tr>\n<td>Enum</td>\n<td>枚举类型</td>\n<td>enum类型</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5224-column常用参数表\"><a class=\"markdownIt-Anchor\" href=\"#5224-column常用参数表\"></a> 5.2.2.4 Column常用参数表</h4>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>primary_key</td>\n<td>如果设为True，该列就是表的主键</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>如果设为True，该列每个值唯一，也就是该字段不允许出现重复值</td>\n</tr>\n<tr>\n<td>index</td>\n<td>如果设为True，为这列创建索引，用于提升查询效率</td>\n</tr>\n<tr>\n<td>nullable</td>\n<td>如果设为True，这列允许使用空值，反之则不允许使用空值。</td>\n</tr>\n<tr>\n<td>server_default</td>\n<td>为这列定义默认值, 默认值只支持字符串，其他类型需要db.text()方法指定</td>\n</tr>\n<tr>\n<td>default</td>\n<td>为这列定义默认值，但是该约束并不会真正映射到表结构中，该约束只会在ORM层面实现(不推荐使用)</td>\n</tr>\n<tr>\n<td>comment</td>\n<td>该字段的注释</td>\n</tr>\n<tr>\n<td>name</td>\n<td>可以使用该参数直接指定字段名</td>\n</tr>\n<tr>\n<td>autoincrement</td>\n<td>设置这个字段为自动增长的。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"server_default常用配置\"><a class=\"markdownIt-Anchor\" href=\"#server_default常用配置\"></a> <strong>server_default常用配置</strong></h5>\n<table>\n<thead>\n<tr>\n<th>配置默认值类型</th>\n<th>代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>更新datatime时间</td>\n<td>server_default = db.text(“CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP”)</td>\n</tr>\n<tr>\n<td>当前的datatime时间</td>\n<td>server_default = db.text(“CURRENT_TIMESTAMP”)</td>\n</tr>\n<tr>\n<td>数字</td>\n<td>server_default=“数字”</td>\n</tr>\n<tr>\n<td>布尔</td>\n<td>server_default=db.text(‘True’) / server_default=db.text(‘False’)/ server_default=‘数字’</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"5225-将写好的模型映射到数据库\"><a class=\"markdownIt-Anchor\" href=\"#5225-将写好的模型映射到数据库\"></a> 5.2.2.5 将写好的模型映射到数据库</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;user_info&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer,primary_key=<span class=\"literal\">True</span>,autoincrement=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">20</span>),nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">db.create_all()</span><br></pre></td></tr></table></figure>\n<p>如果你已经定义好了模型：一个继承<code>db.Model</code>的类</p>\n<p>想把这个模型映射到数据库中（在数据库中创建这个模型所描述的一张表）：使用<code>db.create_all()</code>可以实现把继承了该<code>db.model</code>的所有模型创建到数据库中。查看数据库的时候我们会发现多了一张<code>user_info</code>表。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222012642-1301719010..png\" alt=\"1549800892083\" /></p>\n<h4 id=\"5226-更新模型\"><a class=\"markdownIt-Anchor\" href=\"#5226-更新模型\"></a> 5.2.2.6 更新模型</h4>\n<p>对已存在的表的模型，使用<code>db.create_all()</code>无效</p>\n<ol>\n<li>先<code>db.drop_all()</code>删除该库下的所有继承了<code>db.model</code>的模型表，</li>\n<li>然后再<code>db.create_all()</code>使得继承了<code>db.model</code>的所有模型表映射到数据库中，从而创建我们更新的表。</li>\n</ol>\n<p>弊端：会销毁原有的数据</p>\n<p>解决弊端：看下一章</p>\n<hr />\n<h3 id=\"523-数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#523-数据库操作\"></a> 5.2.3 数据库操作</h3>\n<h4 id=\"5231-增\"><a class=\"markdownIt-Anchor\" href=\"#5231-增\"></a> 5.2.3.1 增</h4>\n<p><strong>模型表 映射到数据中</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">School</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&quot;school&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer,primary_key=<span class=\"literal\">True</span>,nullable=<span class=\"literal\">False</span>,autoincrement=<span class=\"literal\">True</span>,comment=<span class=\"string\">&quot;ID&quot;</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">30</span>),nullable=<span class=\"literal\">False</span>,server_default=<span class=\"string\">&#x27;&#x27;</span>,comment=<span class=\"string\">&quot;学校名称&quot;</span>)</span><br><span class=\"line\">    area = db.Column(db.String(<span class=\"number\">30</span>),nullable=<span class=\"literal\">False</span>,server_default=<span class=\"string\">&#x27;&#x27;</span>,comment=<span class=\"string\">&quot;所属地区&quot;</span>)</span><br><span class=\"line\">    score = db.Column(db.Integer,nullable=<span class=\"literal\">False</span>,server_default=<span class=\"string\">&#x27;600&#x27;</span>,comment=<span class=\"string\">&quot;录取分数线&quot;</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;School(name:&#123;&#125;)&gt;&quot;</span>.<span class=\"built_in\">format</span>(self.name)</span><br><span class=\"line\"></span><br><span class=\"line\">db.create_all()</span><br></pre></td></tr></table></figure>\n<p><strong>示例</strong> — <strong>新增四条记录映射到数据库中</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">school_01 =School(name=<span class=\"string\">&quot;北京大学&quot;</span>,area=<span class=\"string\">&quot;北京&quot;</span>,score=<span class=\"number\">658</span>)  <span class=\"comment\"># 实例化模型类作为一条记录</span></span><br><span class=\"line\">school_02 =School(name=<span class=\"string\">&quot;清华大学&quot;</span>,area=<span class=\"string\">&quot;北京&quot;</span>,score=<span class=\"number\">667</span>)</span><br><span class=\"line\">school_03 =School(name=<span class=\"string\">&quot;中山大学&quot;</span>,area=<span class=\"string\">&quot;广东&quot;</span>,score=<span class=\"number\">645</span>)</span><br><span class=\"line\">school_04 =School(name=<span class=\"string\">&quot;复旦大学&quot;</span>,area=<span class=\"string\">&quot;上海&quot;</span>,score=<span class=\"number\">650</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">db.session.add(school_01)   <span class=\"comment\"># 把新创建的记录添加到数据库会话</span></span><br><span class=\"line\">db.session.add(school_02)</span><br><span class=\"line\">db.session.add(school_03)</span><br><span class=\"line\">db.session.add(school_04)</span><br><span class=\"line\"></span><br><span class=\"line\">db.session.commit()  <span class=\"comment\"># 提交数据库会话</span></span><br></pre></td></tr></table></figure>\n<p><em>提示：数据库会话db.session和后面介绍的Flasksession对象没有关系。db.session是数据库会话也称为事务。</em></p>\n<ol>\n<li>实例化模型类创建对象，该对象作为一条记录，实例化的过程传入的参数为字段内容。</li>\n<li>把新创建的记录添加到数据库会话。</li>\n<li>提交数据库会话</li>\n</ol>\n<p><strong>查看数据库</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014255-1197439633..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014255-1197439633..png\" alt=\"1549869497823\" /></a></p>\n<p><em>提示1 ：如果add多条记录可以使用add_all()一次添加包含多条记录的列表</em></p>\n<p><em>如：<code>db.session.add_all([school_01,school_02,school_03，school_04])</code></em></p>\n<h4 id=\"5232-查\"><a class=\"markdownIt-Anchor\" href=\"#5232-查\"></a> 5.2.3.2 查</h4>\n<p>在我们的flask中 <code>db.session</code> 出的对象调用<code>query</code>属性，可以通过query属性调用各种过滤方法完成查询。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模型类.&lt;过滤方法&gt;.&lt;查询方法&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>常用过滤器表：</strong></p>\n<table>\n<thead>\n<tr>\n<th>过滤器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter()</td>\n<td>使用指定的规则过滤记录相当于sql的where约束条件，返回一个新查询</td>\n</tr>\n<tr>\n<td>filter_by()</td>\n<td>同filter原理，不同的是查询的时要使用关键字参数，返回一个新查询</td>\n</tr>\n<tr>\n<td>limit()</td>\n<td>使用指定的值限制原查询返回的结果的数量，返回一个新查询</td>\n</tr>\n<tr>\n<td>offset()</td>\n<td>偏移原查询返回的结果，返回一个新查询</td>\n</tr>\n<tr>\n<td>order_by()</td>\n<td>根据指定条件对原查询结构进行排序，返回一个新查询</td>\n</tr>\n<tr>\n<td>group_by()</td>\n<td>根据指定条件对原来查询结构进行分组，返回一个新查询</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例</strong></p>\n<p><em>下面几个查询案例需要在<code>示例 5.2.3.1</code>完成的基础上操作</em></p>\n<p><strong>all()</strong> 返回一个列表，列表里存放所有符合条件的记录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">all_school = School.query.<span class=\"built_in\">all</span>()</span><br><span class=\"line\">print(all_school) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：[&lt;School(name:北京大学)&gt;, &lt;School(name:清华大学)&gt;, &lt;School(name:中山大学)&gt;, &lt;School(name:复旦大学)&gt;]</span></span><br></pre></td></tr></table></figure>\n<p>**first() **返回符合条件的第一条记录：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">school_01 =School.query.first()</span><br><span class=\"line\">print(school_01)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：&lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>get()</strong> 返回指定主键值（id字段）的记录：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">school_01 = School.query.get(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(school_01)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#输出：&lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>filter()</strong> 使用指定的规则过滤记录相当于 sql 的where约束条件，返回新产生的查询对象。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beijing_all = School.query.<span class=\"built_in\">filter</span>(School.area == <span class=\"string\">&quot;北京&quot;</span>).<span class=\"built_in\">all</span>()</span><br><span class=\"line\">beijing_first = School.query.<span class=\"built_in\">filter</span>(School.area == <span class=\"string\">&quot;北京&quot;</span>).first()</span><br><span class=\"line\">print(beijing_all)</span><br><span class=\"line\">print(beijing_first)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：[&lt;School(name:北京大学)&gt;, &lt;School(name:清华大学)&gt;]</span></span><br><span class=\"line\"><span class=\"comment\">#       &lt;School(name:北京大学)&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>filter_by</strong>：同filter()效果一样，查询的时候使用关键字参数查询（无法进行多表复杂查询，不推荐使用）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhongshan_school = School.query.filter_by(name=<span class=\"string\">&#x27;中山大学&#x27;</span>).<span class=\"built_in\">all</span>()</span><br><span class=\"line\">print(zhongshan_school)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出：[&lt;School(name:中山大学)&gt;]</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>db.session.qury(模型类)</code>等价于<code>模型类.query</code>，db.session.query功能更强大一些，可以进行多表查询。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fudan_school = School.query.<span class=\"built_in\">filter</span>(School.name == <span class=\"string\">&#x27;复旦大学&#x27;</span>).first()</span><br><span class=\"line\">print(fudan_school)  </span><br><span class=\"line\"><span class=\"comment\"># 输出：&lt;School(name:复旦大学)&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">fudan_school = db.session.query(School).<span class=\"built_in\">filter</span>(School.name == <span class=\"string\">&#x27;复旦大学&#x27;</span>).first()</span><br><span class=\"line\">print(fudan_school)</span><br><span class=\"line\"><span class=\"comment\"># 输出：&lt;School(name:复旦大学)&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>提示：其他的过滤器会在接下来的章节具体根据实际案例讲解</em></p>\n<h4 id=\"5233-改\"><a class=\"markdownIt-Anchor\" href=\"#5233-改\"></a> 5.2.3.3 改</h4>\n<p><strong>示例</strong></p>\n<p><strong>修改北京大学的录取成绩</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beida = School.query.<span class=\"built_in\">filter</span>(School.name==<span class=\"string\">&#x27;北京大学&#x27;</span>).first()</span><br><span class=\"line\">beida.score = <span class=\"number\">630</span></span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014677-1830233725..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222014677-1830233725..png\" alt=\"1549872535950\" /></a></p>\n<p>更新一条记录分为一下几部：</p>\n<ol>\n<li>\n<p>找到对应的记录对象</p>\n</li>\n<li>\n<p>修改记录对象的属性</p>\n</li>\n<li>\n<p>直接调用<code>db.session.commit()</code>提交会话</p>\n<p><em>提示：只有要插入新的记录或要将现有的记录添加到会话中时才需要使用add（）方法。只是更新现有记录的时可以修改记录对象属性后直接提交会话</em></p>\n</li>\n</ol>\n<h4 id=\"5234-删\"><a class=\"markdownIt-Anchor\" href=\"#5234-删\"></a> 5.2.3.4 删</h4>\n<p><strong>示例</strong></p>\n<p><strong>从数据库中删除清华大学相关信息</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qinghua = School.query.<span class=\"built_in\">filter</span>(School.name==<span class=\"string\">&#x27;清华大学&#x27;</span>).first()</span><br><span class=\"line\">db.session.delete(qinghua)</span><br><span class=\"line\">db.session.commit()</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222015098-425693015..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191011222015098-425693015..png\" alt=\"1549872948198\" /></a></p>\n<p>删除一条记录分为以下几步：</p>\n<ol>\n<li>找到对应的记录对象</li>\n<li>需要调用<code>delete()</code>方法在会话中标识需要删除的记录，具体是把该记录对象传入<code>db.session.delete(记录对象)</code>实现标识。</li>\n<li>调用<code>db.session.commit()</code>提交会话。</li>\n</ol>\n","categories":[{"name":"flask","path":"api/categories/flask.json"}],"tags":[{"name":"flask","path":"api/tags/flask.json"},{"name":"python","path":"api/tags/python.json"}]}