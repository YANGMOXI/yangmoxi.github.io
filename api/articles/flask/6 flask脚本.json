{"title":"6 flask脚本","slug":"flask/6 flask脚本","date":"2021-01-18T11:39:27.089Z","updated":"2021-01-18T14:58:42.847Z","comments":true,"path":"api/articles/flask/6 flask脚本.json","excerpt":null,"covers":["https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155049684-1372091286..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050107-2129786014..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050295-237683571..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050820-1276211128..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051193-1643881132..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051362-794772624..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051827-500166934..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051992-1462678497..png"],"content":"<h2 id=\"61-集成python-shell\"><a class=\"markdownIt-Anchor\" href=\"#61-集成python-shell\"></a> 6.1 集成Python shell</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在实际的开发中，不免有一些任务需要在`shell`下完成。如：</span><br><span class=\"line\">\t- 为cms后台添加超级管理员的需求，</span><br><span class=\"line\">    - 如迁移数据库的需求，定时任务等等，</span><br><span class=\"line\">诸如这类需求更适合在shell中去操作（大部分需要在shell中去操作的都是权限比较高的任务）。 </span><br></pre></td></tr></table></figure>\n<p><em>提示：迁移数据库就是用来解决数据库更新问题，解决之前我们学的<code>db.create_all()</code>和<code>db.drop_all()</code>更新数据库的时候丢失数据的问题。</em></p>\n<p>flask官方提供了一个扩展组件<code>flask-script</code>可以实现在<code>shell</code>下操作我们的<code>Flask</code>项目。</p>\n<h3 id=\"611-flask-script的用法\"><a class=\"markdownIt-Anchor\" href=\"#611-flask-script的用法\"></a> 6.1.1 flask-script的用法：</h3>\n<p>1 由于<code>flask-script</code>是Flask的一个扩展组件，同往常一样首先在虚拟环境中安装我们的<code>flask_script</code>包。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-script\t</span><br></pre></td></tr></table></figure>\n<h4 id=\"6111-示例flask-script的简单实现\"><a class=\"markdownIt-Anchor\" href=\"#6111-示例flask-script的简单实现\"></a> 6.1.1.1 示例：flask-script的简单实现</h4>\n<ul>\n<li>项目目录</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  manage.py</span><br><span class=\"line\">│  server.py</span><br><span class=\"line\">│</span><br><span class=\"line\">├─static  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">├─templates <span class=\"comment\"># 文件夹</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://server.py\">server.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://manage.py\">manage.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"keyword\">from</span> server <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<p><strong>解读：<a href=\"http://manage.py\">manage.py</a></strong></p>\n<p><strong>（1）</strong> 从<code>flask_script</code>模块中导入<code>flask_script</code>的核心类<code>Manager</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_script import Manager </span><br></pre></td></tr></table></figure>\n<p><strong>（2）</strong> 从<code>server.py</code>模块中把<code>app</code>对象导入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> server <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure>\n<p><strong>（3）</strong> 从<code>Manager()</code>类传入<code>app</code>对象实例化出<code>manager</code>对象，<code>manager</code>对象用于以后所有添加命令相关操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager = Manager(app)</span><br></pre></td></tr></table></figure>\n<p>**（4）**利用<code>@manager.command</code>装饰器添加<code>以被装饰函数的名字命名的一条命令</code>与<code>被装饰函数的映射</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@manager.command   </span><span class=\"comment\"># 相当于添加了一条hello命令，可以调用到hello函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>（5）</strong><code>manager</code>调用<code>run</code>方法之前定义的命令才会生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<p><strong>在<code>shell</code>下操作命令</strong></p>\n<p>在<code>shell</code>中切入到该<code>manage.py</code>的目录下，并且进入虚拟环境。输入命令<code>python manage.py hello</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;python manage.py hello</span><br></pre></td></tr></table></figure>\n<p>命令中的<code>hello</code>是<code>@manager.command</code>装饰器装饰的函数名</p>\n<p>执行命令后会调用<code>hello</code>函数</p>\n<p>如图所示实现了调用<code>hello</code>函数</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155049684-1372091286..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155049684-1372091286..png\" alt=\"1549965903321\" /></a></p>\n<h4 id=\"6111命令添加方式\"><a class=\"markdownIt-Anchor\" href=\"#6111命令添加方式\"></a> 6.1.1.1命令添加方式：</h4>\n<h5 id=\"第一种无参命令\"><a class=\"markdownIt-Anchor\" href=\"#第一种无参命令\"></a> 第一种（无参命令）：</h5>\n<p>使用<code>manager.commad</code>方式添加命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;无参命令&#x27;</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;python manage.py demo</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050107-2129786014..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050107-2129786014..png\" alt=\"1549967813932\" /></a></p>\n<h5 id=\"第二种有参命令\"><a class=\"markdownIt-Anchor\" href=\"#第二种有参命令\"></a> 第二种（有参命令）:</h5>\n<p>使用<code>manager.option('-简写的命令'，‘--全写的命令’，dest=‘传给函数的形参’)</code>添加命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@manager.option(<span class=\"params\"><span class=\"string\">&quot;-u&quot;</span>,<span class=\"string\">&quot;--username&quot;</span>,dest=<span class=\"string\">&quot;username&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@manager.option(<span class=\"params\"><span class=\"string\">&quot;-p&quot;</span>,<span class=\"string\">&quot;--password&quot;</span>,dest=<span class=\"string\">&quot;password&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>(<span class=\"params\">username, password</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;用户名:&#123;&#125;  密码: &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(username,password))</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;python manage.py login -u mark -p <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050295-237683571..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050295-237683571..png\" alt=\"1549968703583\" /></a></p>\n<h5 id=\"第三种子命令\"><a class=\"markdownIt-Anchor\" href=\"#第三种子命令\"></a> 第三种（子命令）：</h5>\n<p>比如一个功能对应着很多个命令，这个时候就可以用子命令来实现，可以将这些命令的映射单独放到一个文件方便管理。在这个放着很多命令映射的文件中实例化Manager类出一个新的对象，并在<code>manage.py</code>文件中通过<code>manager.add_command(&quot;子命令&quot;,Manager对象)</code>来添加子命令</p>\n<p><strong>示例：</strong></p>\n<p>在之前的6.1.1.1实例的项目目录中新建文件<code>db_script.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  manage.py</span><br><span class=\"line\">│  server.py</span><br><span class=\"line\">│  db_script.py</span><br><span class=\"line\">│</span><br><span class=\"line\">├─static  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">├─templates <span class=\"comment\"># 文件夹</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>db_script.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"></span><br><span class=\"line\">db_Manager = Manager()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@db_Manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;初始迁移仓库&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@db_Manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">migrate</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;生成迁移脚本&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@db_Manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upgrade</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;迁移脚本映射到数据库&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://manage.py\">manage.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"keyword\">from</span> server <span class=\"keyword\">import</span> app</span><br><span class=\"line\"><span class=\"keyword\">from</span> db_script <span class=\"keyword\">import</span> db_Manager <span class=\"comment\"># 导入子命令文件的Manager类实例化出的对象</span></span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\">manager.add_command(<span class=\"string\">&quot;db&quot;</span>,db_Manager) <span class=\"comment\"># 添加子命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py db init</span><br><span class=\"line\">python manage.py db migrate</span><br><span class=\"line\">python manage.py db upgrade</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050820-1276211128..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050820-1276211128..png\" alt=\"1549969697643\" /></a></p>\n<h2 id=\"62-项目重构\"><a class=\"markdownIt-Anchor\" href=\"#62-项目重构\"></a> 6.2 项目重构</h2>\n<h3 id=\"621-解耦配置信息以及模型文件信息触发循环导入问题\"><a class=\"markdownIt-Anchor\" href=\"#621-解耦配置信息以及模型文件信息触发循环导入问题\"></a> 6.2.1 解耦配置信息以及模型文件信息触发循环导入问题</h3>\n<p>随着项目代码的增多 我们再把连接数据库的信息放到主<code>app</code>文件当中会应影响我们代码的可读性，那么我们相关数据库配置的信息应该放到一个<code>config</code>文件当中去，像我们当时加载debug配置一样使用<code>app.config.from_object(config)</code>一样加载我们的数据库连接信息。</p>\n<p>新建<code>config.py</code>文件,把连接数据库相关的信息放到<code>config.py</code>中去</p>\n<p>然后在主<code>app</code>文件中加载配置信息<code>app.config.from_object(config)</code></p>\n<ul>\n<li><a href=\"http://config.py\">config.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOST = <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">PORT = <span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\">DATABASE_NAME = <span class=\"string\">&#x27;01_db&#x27;</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">PASSWORD = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DB_URI = <span class=\"string\">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\\</span><br><span class=\"line\">    .<span class=\"built_in\">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">SQLALCHEMY_DATABASE_URI = DB_URI</span><br><span class=\"line\">SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>那么主<code>app</code>中的模型的文件也十分影响代码易读性，也应该新开一个<code>modles</code>文件夹，把我们的模型表放到<code>modles</code>中去</p>\n<ul>\n<li><a href=\"http://models.py\">models.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> db</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer,primary_key=<span class=\"literal\">True</span>,autoincrement=<span class=\"literal\">True</span>,nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">30</span>),server_default=<span class=\"string\">&#x27;&#x27;</span>,comment=<span class=\"string\">&quot;姓名&quot;</span>)</span><br><span class=\"line\">    tel = db.Column(db.String(<span class=\"number\">16</span>),server_default=<span class=\"string\">&#x27;&#x27;</span>,comment=<span class=\"string\">&quot;电话&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://app.py\">app.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">from</span> models <span class=\"keyword\">import</span> UserInfo</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.from_object(config)</span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>这是代码易读性提高了，但是新的问题随之出现了，出现了一个循环导入的问题。</p>\n<p><code>app.py</code> 文件导入了<code>models</code>，我们<code>python</code>中而导入文件必然会把需要导入的文件从上到下执行一遍，那么就触发了<code>models</code>的执行，而models执行的时候需要从<code>app</code>导入<code>db</code>，出现了一个死循环如下图，这就是python循环导入的问题。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051193-1643881132..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051193-1643881132..png\" alt=\"1549982777399\" /></a></p>\n<h3 id=\"622-重构项目解决循环导入问题\"><a class=\"markdownIt-Anchor\" href=\"#622-重构项目解决循环导入问题\"></a> 6.2.2 重构项目解决循环导入问题</h3>\n<p>为了解耦配置信息以及模型表信息，导致了<code>models.py</code>和<code>app.py</code>出现了循环导入问题，我们的解决方案是新开启一个文件<code>exts.py</code>，在<code>exts.py</code>中生成db对象，解决循环导入问题。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051362-794772624..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051362-794772624..png\" alt=\"1549982940543\" /></a></p>\n<h4 id=\"实例6221解决循环导入问题之后重构项目\"><a class=\"markdownIt-Anchor\" href=\"#实例6221解决循环导入问题之后重构项目\"></a> <strong>实例6.2.2.1：解决循环导入问题之后重构项目</strong></h4>\n<ul>\n<li>项目目录：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  app.py</span><br><span class=\"line\">│  config.py</span><br><span class=\"line\">│  exts.py</span><br><span class=\"line\">│  models.py</span><br><span class=\"line\">│</span><br><span class=\"line\">├─static \t<span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">├─templates  <span class=\"comment\"># 文件夹</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://config.py\">config.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOST = <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">PORT = <span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\">DATABASE_NAME = <span class=\"string\">&#x27;01_db&#x27;</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">PASSWORD = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DB_URI = <span class=\"string\">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\\</span><br><span class=\"line\">    .<span class=\"built_in\">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">SQLALCHEMY_DATABASE_URI = DB_URI</span><br><span class=\"line\">SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://exts.py\">exts.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy()</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://models.py\">models.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> exts <span class=\"keyword\">import</span> db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;user_info&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>, autoincrement=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">20</span>),nullable=<span class=\"literal\">False</span>,server_default=<span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://app.py\">app.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> exts <span class=\"keyword\">import</span> db</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">from</span> models <span class=\"keyword\">import</span> UserInfo</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.from_object(config)</span><br><span class=\"line\"></span><br><span class=\"line\">db.init_app(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<h2 id=\"63-使用flask-migrate迁移数据库\"><a class=\"markdownIt-Anchor\" href=\"#63-使用flask-migrate迁移数据库\"></a> 6.3 使用Flask-Migrate迁移数据库</h2>\n<p>之前我们更新数据库的方式是先删除表然后再创建表简单粗暴，但是会丢失掉所有原来表中的数据。做web开发的我们应该深知数据无价，所以这个时候需要数据库迁移工具来完成这个工作，<code>SQLAlcheme</code>的开发者<code>Michael Bayer</code>开发了一个数据库迁移工具—<code>Alembic</code>来实现数据库的迁移，<code>SQLAlchemy</code>翻译成汉语是炼金术，而蒸馏器（<code>Alembic</code>）正是炼金术士最需要的工具。</p>\n<p>我们的<code>flask-sqlalchmy</code>扩展组件正是基于<code>SQLAlchemy</code>，当然<code>Flask</code>也有专门做数据库迁移的扩展组件<code>Flask-Migrate</code>，同样<code>Flask-Migrate</code>正是基于<code>Alembic</code>。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051827-500166934..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051827-500166934..png\" alt=\"img\" /></a></p>\n<h3 id=\"631-flask-migrate的用法\"><a class=\"markdownIt-Anchor\" href=\"#631-flask-migrate的用法\"></a> 6.3.1 Flask-Migrate的用法：</h3>\n<p>1 由于<code>flask-migrate</code>是Flask的一个扩展组件，同往常一样首先在虚拟环境中安装我们的<code>flask_migrate</code>包。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-migrate</span><br></pre></td></tr></table></figure>\n<p>为了导出数据库迁移命令，Flask-Migrate提供了一个MigrateCommand类，可附加到Flask-Script的manager对象上。在这个例子中，MigrateCommand类使用db命令附加。</p>\n<p>我们的<code>Flask_Migrate</code>的操作是在<code>shell</code>下完成的，所以要基于<code>Flask-script</code>，<code>Flask-Migrate</code>提供了一个<code>MigrateCommand</code>类，需要附加到<code>Flask-Script</code>的<code>manager</code>对象上，完成命令的创建，并且<code>Flask_Migrate</code>同时体统了<code>Migrate</code>类，需要加载核心对象<code>app</code>和数据库对象<code>db</code>。完成迁移工具的配置。</p>\n<h4 id=\"示例6311配置flask_migrate\"><a class=\"markdownIt-Anchor\" href=\"#示例6311配置flask_migrate\"></a> 示例6.3.1.1：配置Flask_Migrate</h4>\n<p>首先在<code>实例6.2.2.1</code><a href=\"http://xn--manage-9v7ii2ykk5a.py\">中创建manage.py</a></p>\n<ul>\n<li>manage.py代码如下</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_migrate <span class=\"keyword\">import</span> Migrate,MigrateCommand</span><br><span class=\"line\"><span class=\"keyword\">from</span> exts <span class=\"keyword\">import</span> db</span><br><span class=\"line\"><span class=\"keyword\">from</span> server <span class=\"keyword\">import</span> app</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Migrate(app,db)</span><br><span class=\"line\"></span><br><span class=\"line\">manager.add_command(<span class=\"string\">&#x27;db&#x27;</span>,MigrateCommand)</span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong></p>\n<p><strong>（1）</strong> 首先从<code>flask_migrate</code>中导入 <code>Migrate，MigrateCommand</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_migrate <span class=\"keyword\">import</span> Migrate,MigrateCommand</span><br></pre></td></tr></table></figure>\n<p><strong>（2）</strong><code>Migrate</code>加载<code>app</code>对象和<code>db</code>对象获取数据库的配置信息以及模型表信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Migrate(app,db)</span><br></pre></td></tr></table></figure>\n<p>**（3）**把<code>MigrateCommand</code>附加到<code>manager</code>创建迁移数据库的子命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager.add_command(<span class=\"string\">&#x27;db&#x27;</span>,MigrateCommand)</span><br></pre></td></tr></table></figure>\n<h4 id=\"迁移脚本命令\"><a class=\"markdownIt-Anchor\" href=\"#迁移脚本命令\"></a> <strong>迁移脚本命令</strong></h4>\n<p><strong>（1）</strong> <strong>创建迁移仓库</strong></p>\n<p>首先切换到项目目录下并且切入到虚拟环境中输入命令<code>python manage.py db init</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; python manage.py db init</span><br></pre></td></tr></table></figure>\n<p>该命令初始化我们的迁移仓库，并且在我们的项目目录中创建迁移仓库文件</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051992-1462678497..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051992-1462678497..png\" alt=\"1549988156697\" /></a></p>\n<p><strong>（2）</strong> <strong>创建迁移脚本</strong></p>\n<p>依然在我们的<code>shell</code>中输入命令<code>python manage.py db migrate</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; python manage.py db migrate</span><br></pre></td></tr></table></figure>\n<p>该命令会在数据库创建一张 <code>alembic_version</code> 表，存放着数据库迁移脚本的版本信息，该命令会搜集到需要迁移的模型表信息，写入到脚本中，但是并没有真正的映射到数据库中。</p>\n<p><strong>（3）更新数据库</strong></p>\n<p>依然在我们的<code>shell</code>中输入命令<code>python manage.py db upgrade</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py db upgrade</span><br></pre></td></tr></table></figure>\n<p>对于第一次迁移来说，其作用和db.create_all()方法一样，但是在随后的迁移中，upgrade命令可以把模型表改动的部分映射到数据库中，实现了一个更新的效果，并且不影响之前保存的数据。</p>\n<p><em>提示：在首次执行这个命令之前如果该数据库的库内已经有了一些表，并且这些表没有与我们的模型映射，会自动删除掉这些表。</em></p>\n","more":"<h2 id=\"61-集成python-shell\"><a class=\"markdownIt-Anchor\" href=\"#61-集成python-shell\"></a> 6.1 集成Python shell</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在实际的开发中，不免有一些任务需要在`shell`下完成。如：</span><br><span class=\"line\">\t- 为cms后台添加超级管理员的需求，</span><br><span class=\"line\">    - 如迁移数据库的需求，定时任务等等，</span><br><span class=\"line\">诸如这类需求更适合在shell中去操作（大部分需要在shell中去操作的都是权限比较高的任务）。 </span><br></pre></td></tr></table></figure>\n<p><em>提示：迁移数据库就是用来解决数据库更新问题，解决之前我们学的<code>db.create_all()</code>和<code>db.drop_all()</code>更新数据库的时候丢失数据的问题。</em></p>\n<p>flask官方提供了一个扩展组件<code>flask-script</code>可以实现在<code>shell</code>下操作我们的<code>Flask</code>项目。</p>\n<h3 id=\"611-flask-script的用法\"><a class=\"markdownIt-Anchor\" href=\"#611-flask-script的用法\"></a> 6.1.1 flask-script的用法：</h3>\n<p>1 由于<code>flask-script</code>是Flask的一个扩展组件，同往常一样首先在虚拟环境中安装我们的<code>flask_script</code>包。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-script\t</span><br></pre></td></tr></table></figure>\n<h4 id=\"6111-示例flask-script的简单实现\"><a class=\"markdownIt-Anchor\" href=\"#6111-示例flask-script的简单实现\"></a> 6.1.1.1 示例：flask-script的简单实现</h4>\n<ul>\n<li>项目目录</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  manage.py</span><br><span class=\"line\">│  server.py</span><br><span class=\"line\">│</span><br><span class=\"line\">├─static  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">├─templates <span class=\"comment\"># 文件夹</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://server.py\">server.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://manage.py\">manage.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"keyword\">from</span> server <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<p><strong>解读：<a href=\"http://manage.py\">manage.py</a></strong></p>\n<p><strong>（1）</strong> 从<code>flask_script</code>模块中导入<code>flask_script</code>的核心类<code>Manager</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from flask_script import Manager </span><br></pre></td></tr></table></figure>\n<p><strong>（2）</strong> 从<code>server.py</code>模块中把<code>app</code>对象导入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> server <span class=\"keyword\">import</span> app</span><br></pre></td></tr></table></figure>\n<p><strong>（3）</strong> 从<code>Manager()</code>类传入<code>app</code>对象实例化出<code>manager</code>对象，<code>manager</code>对象用于以后所有添加命令相关操作</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager = Manager(app)</span><br></pre></td></tr></table></figure>\n<p>**（4）**利用<code>@manager.command</code>装饰器添加<code>以被装饰函数的名字命名的一条命令</code>与<code>被装饰函数的映射</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@manager.command   </span><span class=\"comment\"># 相当于添加了一条hello命令，可以调用到hello函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>（5）</strong><code>manager</code>调用<code>run</code>方法之前定义的命令才会生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    manager.run()</span><br></pre></td></tr></table></figure>\n<p><strong>在<code>shell</code>下操作命令</strong></p>\n<p>在<code>shell</code>中切入到该<code>manage.py</code>的目录下，并且进入虚拟环境。输入命令<code>python manage.py hello</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;python manage.py hello</span><br></pre></td></tr></table></figure>\n<p>命令中的<code>hello</code>是<code>@manager.command</code>装饰器装饰的函数名</p>\n<p>执行命令后会调用<code>hello</code>函数</p>\n<p>如图所示实现了调用<code>hello</code>函数</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155049684-1372091286..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155049684-1372091286..png\" alt=\"1549965903321\" /></a></p>\n<h4 id=\"6111命令添加方式\"><a class=\"markdownIt-Anchor\" href=\"#6111命令添加方式\"></a> 6.1.1.1命令添加方式：</h4>\n<h5 id=\"第一种无参命令\"><a class=\"markdownIt-Anchor\" href=\"#第一种无参命令\"></a> 第一种（无参命令）：</h5>\n<p>使用<code>manager.commad</code>方式添加命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;无参命令&#x27;</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;python manage.py demo</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050107-2129786014..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050107-2129786014..png\" alt=\"1549967813932\" /></a></p>\n<h5 id=\"第二种有参命令\"><a class=\"markdownIt-Anchor\" href=\"#第二种有参命令\"></a> 第二种（有参命令）:</h5>\n<p>使用<code>manager.option('-简写的命令'，‘--全写的命令’，dest=‘传给函数的形参’)</code>添加命令：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@manager.option(<span class=\"params\"><span class=\"string\">&quot;-u&quot;</span>,<span class=\"string\">&quot;--username&quot;</span>,dest=<span class=\"string\">&quot;username&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@manager.option(<span class=\"params\"><span class=\"string\">&quot;-p&quot;</span>,<span class=\"string\">&quot;--password&quot;</span>,dest=<span class=\"string\">&quot;password&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>(<span class=\"params\">username, password</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;用户名:&#123;&#125;  密码: &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(username,password))</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;python manage.py login -u mark -p <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050295-237683571..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050295-237683571..png\" alt=\"1549968703583\" /></a></p>\n<h5 id=\"第三种子命令\"><a class=\"markdownIt-Anchor\" href=\"#第三种子命令\"></a> 第三种（子命令）：</h5>\n<p>比如一个功能对应着很多个命令，这个时候就可以用子命令来实现，可以将这些命令的映射单独放到一个文件方便管理。在这个放着很多命令映射的文件中实例化Manager类出一个新的对象，并在<code>manage.py</code>文件中通过<code>manager.add_command(&quot;子命令&quot;,Manager对象)</code>来添加子命令</p>\n<p><strong>示例：</strong></p>\n<p>在之前的6.1.1.1实例的项目目录中新建文件<code>db_script.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  manage.py</span><br><span class=\"line\">│  server.py</span><br><span class=\"line\">│  db_script.py</span><br><span class=\"line\">│</span><br><span class=\"line\">├─static  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">├─templates <span class=\"comment\"># 文件夹</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>db_script.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"></span><br><span class=\"line\">db_Manager = Manager()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@db_Manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;初始迁移仓库&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@db_Manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">migrate</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;生成迁移脚本&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@db_Manager.command</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">upgrade</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;迁移脚本映射到数据库&quot;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://manage.py\">manage.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"keyword\">from</span> server <span class=\"keyword\">import</span> app</span><br><span class=\"line\"><span class=\"keyword\">from</span> db_script <span class=\"keyword\">import</span> db_Manager <span class=\"comment\"># 导入子命令文件的Manager类实例化出的对象</span></span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\">manager.add_command(<span class=\"string\">&quot;db&quot;</span>,db_Manager) <span class=\"comment\"># 添加子命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>切入到manage.py所在的目录中，切入到虚拟环境，执行如下命令.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py db init</span><br><span class=\"line\">python manage.py db migrate</span><br><span class=\"line\">python manage.py db upgrade</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050820-1276211128..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155050820-1276211128..png\" alt=\"1549969697643\" /></a></p>\n<h2 id=\"62-项目重构\"><a class=\"markdownIt-Anchor\" href=\"#62-项目重构\"></a> 6.2 项目重构</h2>\n<h3 id=\"621-解耦配置信息以及模型文件信息触发循环导入问题\"><a class=\"markdownIt-Anchor\" href=\"#621-解耦配置信息以及模型文件信息触发循环导入问题\"></a> 6.2.1 解耦配置信息以及模型文件信息触发循环导入问题</h3>\n<p>随着项目代码的增多 我们再把连接数据库的信息放到主<code>app</code>文件当中会应影响我们代码的可读性，那么我们相关数据库配置的信息应该放到一个<code>config</code>文件当中去，像我们当时加载debug配置一样使用<code>app.config.from_object(config)</code>一样加载我们的数据库连接信息。</p>\n<p>新建<code>config.py</code>文件,把连接数据库相关的信息放到<code>config.py</code>中去</p>\n<p>然后在主<code>app</code>文件中加载配置信息<code>app.config.from_object(config)</code></p>\n<ul>\n<li><a href=\"http://config.py\">config.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOST = <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">PORT = <span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\">DATABASE_NAME = <span class=\"string\">&#x27;01_db&#x27;</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">PASSWORD = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DB_URI = <span class=\"string\">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\\</span><br><span class=\"line\">    .<span class=\"built_in\">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">SQLALCHEMY_DATABASE_URI = DB_URI</span><br><span class=\"line\">SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<p>那么主<code>app</code>中的模型的文件也十分影响代码易读性，也应该新开一个<code>modles</code>文件夹，把我们的模型表放到<code>modles</code>中去</p>\n<ul>\n<li><a href=\"http://models.py\">models.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> db</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer,primary_key=<span class=\"literal\">True</span>,autoincrement=<span class=\"literal\">True</span>,nullable=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    name = db.Column(db.String(<span class=\"number\">30</span>),server_default=<span class=\"string\">&#x27;&#x27;</span>,comment=<span class=\"string\">&quot;姓名&quot;</span>)</span><br><span class=\"line\">    tel = db.Column(db.String(<span class=\"number\">16</span>),server_default=<span class=\"string\">&#x27;&#x27;</span>,comment=<span class=\"string\">&quot;电话&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://app.py\">app.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">from</span> models <span class=\"keyword\">import</span> UserInfo</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.from_object(config)</span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>这是代码易读性提高了，但是新的问题随之出现了，出现了一个循环导入的问题。</p>\n<p><code>app.py</code> 文件导入了<code>models</code>，我们<code>python</code>中而导入文件必然会把需要导入的文件从上到下执行一遍，那么就触发了<code>models</code>的执行，而models执行的时候需要从<code>app</code>导入<code>db</code>，出现了一个死循环如下图，这就是python循环导入的问题。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051193-1643881132..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051193-1643881132..png\" alt=\"1549982777399\" /></a></p>\n<h3 id=\"622-重构项目解决循环导入问题\"><a class=\"markdownIt-Anchor\" href=\"#622-重构项目解决循环导入问题\"></a> 6.2.2 重构项目解决循环导入问题</h3>\n<p>为了解耦配置信息以及模型表信息，导致了<code>models.py</code>和<code>app.py</code>出现了循环导入问题，我们的解决方案是新开启一个文件<code>exts.py</code>，在<code>exts.py</code>中生成db对象，解决循环导入问题。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051362-794772624..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051362-794772624..png\" alt=\"1549982940543\" /></a></p>\n<h4 id=\"实例6221解决循环导入问题之后重构项目\"><a class=\"markdownIt-Anchor\" href=\"#实例6221解决循环导入问题之后重构项目\"></a> <strong>实例6.2.2.1：解决循环导入问题之后重构项目</strong></h4>\n<ul>\n<li>项目目录：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  app.py</span><br><span class=\"line\">│  config.py</span><br><span class=\"line\">│  exts.py</span><br><span class=\"line\">│  models.py</span><br><span class=\"line\">│</span><br><span class=\"line\">├─static \t<span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">├─templates  <span class=\"comment\"># 文件夹</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://config.py\">config.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOST = <span class=\"string\">&#x27;127.0.0.1&#x27;</span></span><br><span class=\"line\">PORT = <span class=\"string\">&#x27;3306&#x27;</span></span><br><span class=\"line\">DATABASE_NAME = <span class=\"string\">&#x27;01_db&#x27;</span></span><br><span class=\"line\">USERNAME = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\">PASSWORD = <span class=\"string\">&#x27;root&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">DB_URI = <span class=\"string\">&quot;mysql+pymysql://&#123;username&#125;:&#123;password&#125;@&#123;host&#125;:&#123;port&#125;/&#123;databasename&#125;?charset=utf8mb4&quot;</span>\\</span><br><span class=\"line\">    .<span class=\"built_in\">format</span>(username=USERNAME,password=PASSWORD,host=HOST,port=PORT,databasename=DATABASE_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">SQLALCHEMY_DATABASE_URI = DB_URI</span><br><span class=\"line\">SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://exts.py\">exts.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_sqlalchemy <span class=\"keyword\">import</span> SQLAlchemy</span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy()</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://models.py\">models.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> exts <span class=\"keyword\">import</span> db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserInfo</span>(<span class=\"params\">db.Model</span>):</span></span><br><span class=\"line\">    __tablename__ = <span class=\"string\">&#x27;user_info&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"literal\">True</span>, autoincrement=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    username = db.Column(db.String(<span class=\"number\">20</span>),nullable=<span class=\"literal\">False</span>,server_default=<span class=\"string\">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://app.py\">app.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> exts <span class=\"keyword\">import</span> db</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">from</span> models <span class=\"keyword\">import</span> UserInfo</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config.from_object(config)</span><br><span class=\"line\"></span><br><span class=\"line\">db.init_app(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<h2 id=\"63-使用flask-migrate迁移数据库\"><a class=\"markdownIt-Anchor\" href=\"#63-使用flask-migrate迁移数据库\"></a> 6.3 使用Flask-Migrate迁移数据库</h2>\n<p>之前我们更新数据库的方式是先删除表然后再创建表简单粗暴，但是会丢失掉所有原来表中的数据。做web开发的我们应该深知数据无价，所以这个时候需要数据库迁移工具来完成这个工作，<code>SQLAlcheme</code>的开发者<code>Michael Bayer</code>开发了一个数据库迁移工具—<code>Alembic</code>来实现数据库的迁移，<code>SQLAlchemy</code>翻译成汉语是炼金术，而蒸馏器（<code>Alembic</code>）正是炼金术士最需要的工具。</p>\n<p>我们的<code>flask-sqlalchmy</code>扩展组件正是基于<code>SQLAlchemy</code>，当然<code>Flask</code>也有专门做数据库迁移的扩展组件<code>Flask-Migrate</code>，同样<code>Flask-Migrate</code>正是基于<code>Alembic</code>。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051827-500166934..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051827-500166934..png\" alt=\"img\" /></a></p>\n<h3 id=\"631-flask-migrate的用法\"><a class=\"markdownIt-Anchor\" href=\"#631-flask-migrate的用法\"></a> 6.3.1 Flask-Migrate的用法：</h3>\n<p>1 由于<code>flask-migrate</code>是Flask的一个扩展组件，同往常一样首先在虚拟环境中安装我们的<code>flask_migrate</code>包。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install flask-migrate</span><br></pre></td></tr></table></figure>\n<p>为了导出数据库迁移命令，Flask-Migrate提供了一个MigrateCommand类，可附加到Flask-Script的manager对象上。在这个例子中，MigrateCommand类使用db命令附加。</p>\n<p>我们的<code>Flask_Migrate</code>的操作是在<code>shell</code>下完成的，所以要基于<code>Flask-script</code>，<code>Flask-Migrate</code>提供了一个<code>MigrateCommand</code>类，需要附加到<code>Flask-Script</code>的<code>manager</code>对象上，完成命令的创建，并且<code>Flask_Migrate</code>同时体统了<code>Migrate</code>类，需要加载核心对象<code>app</code>和数据库对象<code>db</code>。完成迁移工具的配置。</p>\n<h4 id=\"示例6311配置flask_migrate\"><a class=\"markdownIt-Anchor\" href=\"#示例6311配置flask_migrate\"></a> 示例6.3.1.1：配置Flask_Migrate</h4>\n<p>首先在<code>实例6.2.2.1</code><a href=\"http://xn--manage-9v7ii2ykk5a.py\">中创建manage.py</a></p>\n<ul>\n<li>manage.py代码如下</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_script <span class=\"keyword\">import</span> Manager</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_migrate <span class=\"keyword\">import</span> Migrate,MigrateCommand</span><br><span class=\"line\"><span class=\"keyword\">from</span> exts <span class=\"keyword\">import</span> db</span><br><span class=\"line\"><span class=\"keyword\">from</span> server <span class=\"keyword\">import</span> app</span><br><span class=\"line\">manager = Manager(app)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Migrate(app,db)</span><br><span class=\"line\"></span><br><span class=\"line\">manager.add_command(<span class=\"string\">&#x27;db&#x27;</span>,MigrateCommand)</span><br></pre></td></tr></table></figure>\n<p><strong>解读：</strong></p>\n<p><strong>（1）</strong> 首先从<code>flask_migrate</code>中导入 <code>Migrate，MigrateCommand</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask_migrate <span class=\"keyword\">import</span> Migrate,MigrateCommand</span><br></pre></td></tr></table></figure>\n<p><strong>（2）</strong><code>Migrate</code>加载<code>app</code>对象和<code>db</code>对象获取数据库的配置信息以及模型表信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Migrate(app,db)</span><br></pre></td></tr></table></figure>\n<p>**（3）**把<code>MigrateCommand</code>附加到<code>manager</code>创建迁移数据库的子命令</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager.add_command(<span class=\"string\">&#x27;db&#x27;</span>,MigrateCommand)</span><br></pre></td></tr></table></figure>\n<h4 id=\"迁移脚本命令\"><a class=\"markdownIt-Anchor\" href=\"#迁移脚本命令\"></a> <strong>迁移脚本命令</strong></h4>\n<p><strong>（1）</strong> <strong>创建迁移仓库</strong></p>\n<p>首先切换到项目目录下并且切入到虚拟环境中输入命令<code>python manage.py db init</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; python manage.py db init</span><br></pre></td></tr></table></figure>\n<p>该命令初始化我们的迁移仓库，并且在我们的项目目录中创建迁移仓库文件</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051992-1462678497..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155051992-1462678497..png\" alt=\"1549988156697\" /></a></p>\n<p><strong>（2）</strong> <strong>创建迁移脚本</strong></p>\n<p>依然在我们的<code>shell</code>中输入命令<code>python manage.py db migrate</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt; python manage.py db migrate</span><br></pre></td></tr></table></figure>\n<p>该命令会在数据库创建一张 <code>alembic_version</code> 表，存放着数据库迁移脚本的版本信息，该命令会搜集到需要迁移的模型表信息，写入到脚本中，但是并没有真正的映射到数据库中。</p>\n<p><strong>（3）更新数据库</strong></p>\n<p>依然在我们的<code>shell</code>中输入命令<code>python manage.py db upgrade</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py db upgrade</span><br></pre></td></tr></table></figure>\n<p>对于第一次迁移来说，其作用和db.create_all()方法一样，但是在随后的迁移中，upgrade命令可以把模型表改动的部分映射到数据库中，实现了一个更新的效果，并且不影响之前保存的数据。</p>\n<p><em>提示：在首次执行这个命令之前如果该数据库的库内已经有了一些表，并且这些表没有与我们的模型映射，会自动删除掉这些表。</em></p>\n","categories":[{"name":"flask","path":"api/categories/flask.json"}],"tags":[{"name":"flask","path":"api/tags/flask.json"}]}