{"title":"8-2 flask之分析线程和协程","slug":"flask/8-2 flask之分析线程和协程","date":"2021-01-18T11:39:27.102Z","updated":"2021-01-18T14:58:54.775Z","comments":true,"path":"api/articles/flask/8-2 flask之分析线程和协程.json","excerpt":null,"covers":["https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249423-1956623278..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249911-1462606510..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155250365-1961757116..png"],"content":"<h2 id=\"01-思考每个请求之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#01-思考每个请求之间的关系\"></a> 01 思考：每个请求之间的关系</h2>\n<p>我们每一个请求进来的时候都开一个进程肯定不合理，那么如果每一个请求进来都是串行的，那么根本实现不了并发，所以我们假定每一个请求进来使用的是线程。</p>\n<p>那么线程中数据互相不隔离，存在修改数据的时候数据不安全的问题。</p>\n<p>假定我们的需求是，每个线程都要设置值，并且该线程打印该线程修改的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread,current_thread</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.name = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = Foo()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    locals_values.name = num</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)             <span class=\"comment\"># 取出该线程的名字</span></span><br><span class=\"line\">    print(locals_values.name, current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">                                    <span class=\"comment\"># 设置该线程的名字</span></span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>很明显阻塞了2秒的时间所有的线程都完成了修改值，而2秒后所有的线程打印出来的时候都是9了，就产生了数据不安全的问题。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249423-1956623278..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249423-1956623278..png\" alt=\"1552975111079\" /></a></p>\n<p>所以我们要解决这种线程不安全的问题，有如下两种解决方案。</p>\n<ul>\n<li>\n<p>方案一：是加锁</p>\n</li>\n<li>\n<p>方案二：使用<code>threading.local</code>对象把要修改的数据复制一份，使得每个数据互不影响。</p>\n<p>我们要实现的并发是多个请求实现并发，而不是纯粹的只是修改一个数据，所以第二种思路更适合做我们每个请求的并发，把每个请求对象的内容都复制一份让其互相不影响。</p>\n<p><em>详解：为什么不用加锁的思路？加锁的思路是多个线程要真正实现共用一个数据，并且该线程修改了数据之后会影响到其他线程，更适合类似于12306抢票的应用场景，而我们是要做请求对象的并发，想要实现的是该线程对于请求对象这部分内容有任何修改并不影响其他线程。所以使用方案二</em></p>\n</li>\n</ul>\n<h2 id=\"02-threadinglocal\"><a class=\"markdownIt-Anchor\" href=\"#02-threadinglocal\"></a> 02 threading.local</h2>\n<p>多个线程修改同一个数据，复制多份数据给每个线程用,为每个线程开辟一块空间进行数据存储</p>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread,current_thread,local</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = local()</span><br><span class=\"line\"><span class=\"comment\"># 可以简单理解为，识别到新的线程的时候，都会开辟一片新的内存空间，相当于每个线程对该值进行了拷贝。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    locals_values.name = num</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(locals_values.name, current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249911-1462606510..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249911-1462606510..png\" alt=\"1552976228090\" /></a></p>\n<p>如上通过threading.local实例化的对象，实现了多线程修改同一个数据，每个线程都复制了一份数据，并且修改的也都是自己的数据。达到了我们想要的效果。</p>\n<h2 id=\"03-通过字典自定义threadinglocal\"><a class=\"markdownIt-Anchor\" href=\"#03-通过字典自定义threadinglocal\"></a> 03 通过字典自定义threading.local</h2>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> get_ident,Thread,current_thread</span><br><span class=\"line\"><span class=\"comment\"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    storage = &#123;&#125;<span class=\"comment\"># 初始化一个字典</span></span><br><span class=\"line\">    get_ident = get_ident <span class=\"comment\"># 拿到get_ident的地址</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set</span>(<span class=\"params\">self,k,v</span>):</span></span><br><span class=\"line\">        ident =self.get_ident()<span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        origin = self.storage.get(ident)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> origin:</span><br><span class=\"line\">            origin=&#123;&#125;</span><br><span class=\"line\">        origin[k] = v</span><br><span class=\"line\">        self.storage[ident] = origin</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self,k</span>):</span></span><br><span class=\"line\">        ident = self.get_ident() <span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        v= self.storage[ident].get(k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v</span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = Local()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># get_ident() 获取当前线程的唯一标记</span></span><br><span class=\"line\">    locals_values.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;KEY&#x27;</span>,num)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(locals_values.get(<span class=\"string\">&#x27;KEY&#x27;</span>),current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p><strong>讲解：</strong></p>\n<p>利用<code>get_ident()</code>获取每个线程的唯一标记作为键，然后组织一个字典storage。</p>\n<p><strong>如</strong>：｛线程1的唯一标记：{k:v}，线程2的唯一标记：{k:v}…｝</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">｛</span><br><span class=\"line\"><span class=\"number\">15088</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">8856</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">   <span class=\"number\">17052</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">2</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">8836</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">3</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">13832</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">4</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">15504</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">5</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">16588</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">6</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">5164</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">7</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">560</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">8</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">1812</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">       \t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>运行效果</strong>：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155250365-1961757116..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155250365-1961757116..png\" alt=\"1552981453617\" /></a></p>\n<h2 id=\"04-通过setattr和getattr实现自定义threthreadinglocal\"><a class=\"markdownIt-Anchor\" href=\"#04-通过setattr和getattr实现自定义threthreadinglocal\"></a> 04 通过setattr和getattr实现自定义threthreading.local</h2>\n<p><strong>实例</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> get_ident,Thread,current_thread</span><br><span class=\"line\"><span class=\"comment\"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    storage = &#123;&#125;<span class=\"comment\"># 初始化一个字典</span></span><br><span class=\"line\">    get_ident = get_ident <span class=\"comment\"># 拿到get_ident的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span>(<span class=\"params\">self, k, v</span>):</span></span><br><span class=\"line\">        ident =self.get_ident()<span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        origin = self.storage.get(ident)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> origin:</span><br><span class=\"line\">            origin=&#123;&#125;</span><br><span class=\"line\">        origin[k] = v</span><br><span class=\"line\">        self.storage[ident] = origin</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        ident = self.get_ident() <span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        v= self.storage[ident].get(k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v</span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = Local()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># get_ident() 获取当前线程的唯一标记</span></span><br><span class=\"line\">    locals_values.KEY=num</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(locals_values.KEY,current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<h2 id=\"05-每个对象有自己的存储空间字典\"><a class=\"markdownIt-Anchor\" href=\"#05-每个对象有自己的存储空间字典\"></a> 05 每个对象有自己的存储空间（字典）</h2>\n<p>我们可以自定义实现了threading.local的功能，但是现在存在一个问题，如果我们想生成多个Local对象，但是会导致多个Local对象所管理的线程设置的内容都放到了类属性storage = {}里面，所以我们如果想实现每一个Local对象所对应的线程设置的内容都放到自己的storage里面，就需要重新设计代码。</p>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> get_ident,Thread,current_thread</span><br><span class=\"line\"><span class=\"comment\"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 千万不要按照注释里这么写，否则会造成递归死循环，死循环在__getattr__中,不理解的话可以全程使用debug测试。</span></span><br><span class=\"line\">        <span class=\"comment\"># self.storage = &#123;&#125;</span></span><br><span class=\"line\">        <span class=\"comment\"># self.get_ident =get_ident</span></span><br><span class=\"line\">        <span class=\"built_in\">object</span>.__setattr__(self,<span class=\"string\">&quot;storage&quot;</span>,&#123;&#125;)</span><br><span class=\"line\">        <span class=\"built_in\">object</span>.__setattr__(self,<span class=\"string\">&quot;get_ident&quot;</span>,get_ident) <span class=\"comment\">#借用父类设置对象的属性，避免递归死循环。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span>(<span class=\"params\">self, k, v</span>):</span></span><br><span class=\"line\">        ident =self.get_ident()<span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        origin = self.storage.get(ident)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> origin:</span><br><span class=\"line\">            origin=&#123;&#125;</span><br><span class=\"line\">        origin[k] = v</span><br><span class=\"line\">        self.storage[ident] = origin</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        ident = self.get_ident() <span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        v= self.storage[ident].get(k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v</span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = Local()</span><br><span class=\"line\">locals_values2 = Local()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># get_ident() 获取当前线程的唯一标记</span></span><br><span class=\"line\">    <span class=\"comment\"># locals_values.set(&#x27;KEY&#x27;,num)</span></span><br><span class=\"line\">    locals_values.KEY=num</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(locals_values.KEY,current_thread().name)</span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;locals_values2.storage：&#x27;,locals_values2.storage) #查看locals_values2.storage的私有的storage</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>显示效果我们就不做演示了，和前几个案例演示效果一样。</p>\n<h2 id=\"06-如果是你会如何设计flask的请求并发\"><a class=\"markdownIt-Anchor\" href=\"#06-如果是你会如何设计flask的请求并发\"></a> 06 如果是你会如何设计flask的请求并发？</h2>\n<ul>\n<li>\n<p>情况一：单进程单线程，基于全局变量就可以做</p>\n</li>\n<li>\n<p>情况二：单进程多线程，基于threading.local对象做</p>\n</li>\n<li>\n<p>情况三：单进程多线程多协程，如何做？</p>\n<p><em>提示：协程属于应用级别的，协程会替代操作系统自动切换遇到 <code>IO</code>的任务或者运行级别低的任务，而应用级别的切换速度远高于操作系统的切换</em></p>\n<p>当然如果是自己来设计框架，为了提升程序的并发性能，一定是上诉的情况三，不光考虑多线程并且要多协程，那么该如何设计呢？</p>\n<p>在我们的flask中为了这种并发需求，依赖于底层的<code>werkzeug</code>外部包，<code>werkzeug</code>实现了保证多线程和多携程的安全，<code>werkzeug</code>基本的设计理念和上一个案例一致，唯一的区别就是在导入的时候做了一步处理，且看<code>werkzeug</code>源码。</p>\n<p><strong><code>werkzeug.local.py</code>部分源码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> greenlet <span class=\"keyword\">import</span> getcurrent <span class=\"keyword\">as</span> get_ident <span class=\"comment\"># 拿到携程的唯一标识</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">from</span> thread <span class=\"keyword\">import</span> get_ident <span class=\"comment\">#线程的唯一标识</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">        <span class=\"keyword\">from</span> _thread <span class=\"keyword\">import</span> get_ident</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">object</span>.__setattr__(self, <span class=\"string\">&#x27;__storage__&#x27;</span>, &#123;&#125;)</span><br><span class=\"line\">        <span class=\"built_in\">object</span>.__setattr__(self, <span class=\"string\">&#x27;__ident_func__&#x27;</span>, get_ident)</span><br><span class=\"line\"></span><br><span class=\"line\">  \t...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span>(<span class=\"params\">self, name, value</span>):</span></span><br><span class=\"line\">        ident = self.__ident_func__()</span><br><span class=\"line\">        storage = self.__storage__</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            storage[ident][name] = value</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            storage[ident] = &#123;name: value&#125;</span><br></pre></td></tr></table></figure>\n<p>讲解：</p>\n<p>原理就是在最开始导入线程和协程的唯一标识的时候统一命名为<code>get_ident</code>，并且先导入协程模块的时候如果报错说明不支持协程，就会去导入线程的<code>get_ident</code>，这样无论是只有线程运行还是协程运行都可以获取唯一标识，并且把这个标识的线程或协程需要设置的内容都分类存放于<code>__storage__</code>字典中。</p>\n</li>\n</ul>\n","more":"<h2 id=\"01-思考每个请求之间的关系\"><a class=\"markdownIt-Anchor\" href=\"#01-思考每个请求之间的关系\"></a> 01 思考：每个请求之间的关系</h2>\n<p>我们每一个请求进来的时候都开一个进程肯定不合理，那么如果每一个请求进来都是串行的，那么根本实现不了并发，所以我们假定每一个请求进来使用的是线程。</p>\n<p>那么线程中数据互相不隔离，存在修改数据的时候数据不安全的问题。</p>\n<p>假定我们的需求是，每个线程都要设置值，并且该线程打印该线程修改的值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread,current_thread</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.name = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = Foo()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    locals_values.name = num</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)             <span class=\"comment\"># 取出该线程的名字</span></span><br><span class=\"line\">    print(locals_values.name, current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">                                    <span class=\"comment\"># 设置该线程的名字</span></span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>很明显阻塞了2秒的时间所有的线程都完成了修改值，而2秒后所有的线程打印出来的时候都是9了，就产生了数据不安全的问题。</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249423-1956623278..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249423-1956623278..png\" alt=\"1552975111079\" /></a></p>\n<p>所以我们要解决这种线程不安全的问题，有如下两种解决方案。</p>\n<ul>\n<li>\n<p>方案一：是加锁</p>\n</li>\n<li>\n<p>方案二：使用<code>threading.local</code>对象把要修改的数据复制一份，使得每个数据互不影响。</p>\n<p>我们要实现的并发是多个请求实现并发，而不是纯粹的只是修改一个数据，所以第二种思路更适合做我们每个请求的并发，把每个请求对象的内容都复制一份让其互相不影响。</p>\n<p><em>详解：为什么不用加锁的思路？加锁的思路是多个线程要真正实现共用一个数据，并且该线程修改了数据之后会影响到其他线程，更适合类似于12306抢票的应用场景，而我们是要做请求对象的并发，想要实现的是该线程对于请求对象这部分内容有任何修改并不影响其他线程。所以使用方案二</em></p>\n</li>\n</ul>\n<h2 id=\"02-threadinglocal\"><a class=\"markdownIt-Anchor\" href=\"#02-threadinglocal\"></a> 02 threading.local</h2>\n<p>多个线程修改同一个数据，复制多份数据给每个线程用,为每个线程开辟一块空间进行数据存储</p>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread,current_thread,local</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = local()</span><br><span class=\"line\"><span class=\"comment\"># 可以简单理解为，识别到新的线程的时候，都会开辟一片新的内存空间，相当于每个线程对该值进行了拷贝。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    locals_values.name = num</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(locals_values.name, current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249911-1462606510..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155249911-1462606510..png\" alt=\"1552976228090\" /></a></p>\n<p>如上通过threading.local实例化的对象，实现了多线程修改同一个数据，每个线程都复制了一份数据，并且修改的也都是自己的数据。达到了我们想要的效果。</p>\n<h2 id=\"03-通过字典自定义threadinglocal\"><a class=\"markdownIt-Anchor\" href=\"#03-通过字典自定义threadinglocal\"></a> 03 通过字典自定义threading.local</h2>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> get_ident,Thread,current_thread</span><br><span class=\"line\"><span class=\"comment\"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    storage = &#123;&#125;<span class=\"comment\"># 初始化一个字典</span></span><br><span class=\"line\">    get_ident = get_ident <span class=\"comment\"># 拿到get_ident的地址</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set</span>(<span class=\"params\">self,k,v</span>):</span></span><br><span class=\"line\">        ident =self.get_ident()<span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        origin = self.storage.get(ident)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> origin:</span><br><span class=\"line\">            origin=&#123;&#125;</span><br><span class=\"line\">        origin[k] = v</span><br><span class=\"line\">        self.storage[ident] = origin</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self,k</span>):</span></span><br><span class=\"line\">        ident = self.get_ident() <span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        v= self.storage[ident].get(k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v</span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = Local()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># get_ident() 获取当前线程的唯一标记</span></span><br><span class=\"line\">    locals_values.<span class=\"built_in\">set</span>(<span class=\"string\">&#x27;KEY&#x27;</span>,num)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(locals_values.get(<span class=\"string\">&#x27;KEY&#x27;</span>),current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p><strong>讲解：</strong></p>\n<p>利用<code>get_ident()</code>获取每个线程的唯一标记作为键，然后组织一个字典storage。</p>\n<p><strong>如</strong>：｛线程1的唯一标记：{k:v}，线程2的唯一标记：{k:v}…｝</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">｛</span><br><span class=\"line\"><span class=\"number\">15088</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">0</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">8856</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">   <span class=\"number\">17052</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">2</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">8836</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">3</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">13832</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">4</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">15504</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">5</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">16588</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">6</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">5164</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">7</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">560</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">8</span>&#125;, </span><br><span class=\"line\">   <span class=\"number\">1812</span>: &#123;<span class=\"string\">&#x27;KEY&#x27;</span>: <span class=\"number\">9</span>&#125;</span><br><span class=\"line\">       \t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>运行效果</strong>：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155250365-1961757116..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155250365-1961757116..png\" alt=\"1552981453617\" /></a></p>\n<h2 id=\"04-通过setattr和getattr实现自定义threthreadinglocal\"><a class=\"markdownIt-Anchor\" href=\"#04-通过setattr和getattr实现自定义threthreadinglocal\"></a> 04 通过setattr和getattr实现自定义threthreading.local</h2>\n<p><strong>实例</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> get_ident,Thread,current_thread</span><br><span class=\"line\"><span class=\"comment\"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    storage = &#123;&#125;<span class=\"comment\"># 初始化一个字典</span></span><br><span class=\"line\">    get_ident = get_ident <span class=\"comment\"># 拿到get_ident的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span>(<span class=\"params\">self, k, v</span>):</span></span><br><span class=\"line\">        ident =self.get_ident()<span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        origin = self.storage.get(ident)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> origin:</span><br><span class=\"line\">            origin=&#123;&#125;</span><br><span class=\"line\">        origin[k] = v</span><br><span class=\"line\">        self.storage[ident] = origin</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        ident = self.get_ident() <span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        v= self.storage[ident].get(k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v</span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = Local()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># get_ident() 获取当前线程的唯一标记</span></span><br><span class=\"line\">    locals_values.KEY=num</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(locals_values.KEY,current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<h2 id=\"05-每个对象有自己的存储空间字典\"><a class=\"markdownIt-Anchor\" href=\"#05-每个对象有自己的存储空间字典\"></a> 05 每个对象有自己的存储空间（字典）</h2>\n<p>我们可以自定义实现了threading.local的功能，但是现在存在一个问题，如果我们想生成多个Local对象，但是会导致多个Local对象所管理的线程设置的内容都放到了类属性storage = {}里面，所以我们如果想实现每一个Local对象所对应的线程设置的内容都放到自己的storage里面，就需要重新设计代码。</p>\n<p><strong>实例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> get_ident,Thread,current_thread</span><br><span class=\"line\"><span class=\"comment\"># get_ident()可以获取每个线程的唯一标记，</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 千万不要按照注释里这么写，否则会造成递归死循环，死循环在__getattr__中,不理解的话可以全程使用debug测试。</span></span><br><span class=\"line\">        <span class=\"comment\"># self.storage = &#123;&#125;</span></span><br><span class=\"line\">        <span class=\"comment\"># self.get_ident =get_ident</span></span><br><span class=\"line\">        <span class=\"built_in\">object</span>.__setattr__(self,<span class=\"string\">&quot;storage&quot;</span>,&#123;&#125;)</span><br><span class=\"line\">        <span class=\"built_in\">object</span>.__setattr__(self,<span class=\"string\">&quot;get_ident&quot;</span>,get_ident) <span class=\"comment\">#借用父类设置对象的属性，避免递归死循环。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span>(<span class=\"params\">self, k, v</span>):</span></span><br><span class=\"line\">        ident =self.get_ident()<span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        origin = self.storage.get(ident)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> origin:</span><br><span class=\"line\">            origin=&#123;&#125;</span><br><span class=\"line\">        origin[k] = v</span><br><span class=\"line\">        self.storage[ident] = origin</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        ident = self.get_ident() <span class=\"comment\"># 获取当前线程的唯一标记</span></span><br><span class=\"line\">        v= self.storage[ident].get(k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v</span><br><span class=\"line\"></span><br><span class=\"line\">locals_values = Local()</span><br><span class=\"line\">locals_values2 = Local()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># get_ident() 获取当前线程的唯一标记</span></span><br><span class=\"line\">    <span class=\"comment\"># locals_values.set(&#x27;KEY&#x27;,num)</span></span><br><span class=\"line\">    locals_values.KEY=num</span><br><span class=\"line\">    time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">    print(locals_values.KEY,current_thread().name)</span><br><span class=\"line\">    <span class=\"comment\"># print(&#x27;locals_values2.storage：&#x27;,locals_values2.storage) #查看locals_values2.storage的私有的storage</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    t = Thread(target=func,args=(i,),name=<span class=\"string\">&#x27;线程%s&#x27;</span>%i)</span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>显示效果我们就不做演示了，和前几个案例演示效果一样。</p>\n<h2 id=\"06-如果是你会如何设计flask的请求并发\"><a class=\"markdownIt-Anchor\" href=\"#06-如果是你会如何设计flask的请求并发\"></a> 06 如果是你会如何设计flask的请求并发？</h2>\n<ul>\n<li>\n<p>情况一：单进程单线程，基于全局变量就可以做</p>\n</li>\n<li>\n<p>情况二：单进程多线程，基于threading.local对象做</p>\n</li>\n<li>\n<p>情况三：单进程多线程多协程，如何做？</p>\n<p><em>提示：协程属于应用级别的，协程会替代操作系统自动切换遇到 <code>IO</code>的任务或者运行级别低的任务，而应用级别的切换速度远高于操作系统的切换</em></p>\n<p>当然如果是自己来设计框架，为了提升程序的并发性能，一定是上诉的情况三，不光考虑多线程并且要多协程，那么该如何设计呢？</p>\n<p>在我们的flask中为了这种并发需求，依赖于底层的<code>werkzeug</code>外部包，<code>werkzeug</code>实现了保证多线程和多携程的安全，<code>werkzeug</code>基本的设计理念和上一个案例一致，唯一的区别就是在导入的时候做了一步处理，且看<code>werkzeug</code>源码。</p>\n<p><strong><code>werkzeug.local.py</code>部分源码</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> greenlet <span class=\"keyword\">import</span> getcurrent <span class=\"keyword\">as</span> get_ident <span class=\"comment\"># 拿到携程的唯一标识</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">from</span> thread <span class=\"keyword\">import</span> get_ident <span class=\"comment\">#线程的唯一标识</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">        <span class=\"keyword\">from</span> _thread <span class=\"keyword\">import</span> get_ident</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">object</span>.__setattr__(self, <span class=\"string\">&#x27;__storage__&#x27;</span>, &#123;&#125;)</span><br><span class=\"line\">        <span class=\"built_in\">object</span>.__setattr__(self, <span class=\"string\">&#x27;__ident_func__&#x27;</span>, get_ident)</span><br><span class=\"line\"></span><br><span class=\"line\">  \t...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span>(<span class=\"params\">self, name, value</span>):</span></span><br><span class=\"line\">        ident = self.__ident_func__()</span><br><span class=\"line\">        storage = self.__storage__</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            storage[ident][name] = value</span><br><span class=\"line\">        <span class=\"keyword\">except</span> KeyError:</span><br><span class=\"line\">            storage[ident] = &#123;name: value&#125;</span><br></pre></td></tr></table></figure>\n<p>讲解：</p>\n<p>原理就是在最开始导入线程和协程的唯一标识的时候统一命名为<code>get_ident</code>，并且先导入协程模块的时候如果报错说明不支持协程，就会去导入线程的<code>get_ident</code>，这样无论是只有线程运行还是协程运行都可以获取唯一标识，并且把这个标识的线程或协程需要设置的内容都分类存放于<code>__storage__</code>字典中。</p>\n</li>\n</ul>\n","categories":[{"name":"flask","path":"api/categories/flask.json"}],"tags":[{"name":"flask","path":"api/tags/flask.json"}]}