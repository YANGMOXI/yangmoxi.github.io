{"title":"8-1 flask高级","slug":"flask/8-1 flask高级","date":"2021-01-18T11:39:27.097Z","updated":"2021-01-18T15:02:40.218Z","comments":true,"path":"api/articles/flask/8-1 flask高级.json","excerpt":null,"covers":["https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215474-577184084..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215854-919173490..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216014-1683480120..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216222-141055298..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216436-1555848420..png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216641-888219773..png"],"content":"<h2 id=\"01-请求扩展\"><a class=\"markdownIt-Anchor\" href=\"#01-请求扩展\"></a> 01 请求扩展</h2>\n<h3 id=\"01-before_first_request-项目启动后第一次请求的时候执行\"><a class=\"markdownIt-Anchor\" href=\"#01-before_first_request-项目启动后第一次请求的时候执行\"></a> 01 before_first_request ：项目启动后第一次请求的时候执行</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.before_first_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_first_request</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;第一次请求的时候执行&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"02-before_request每次请求之前执行\"><a class=\"markdownIt-Anchor\" href=\"#02-before_request每次请求之前执行\"></a> 02 before_request：每次请求之前执行</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.before_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_request</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;每次请求之前执行&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># return &#x27;直接return&#x27;    # 如果有一个写了return返回值，那么其他的before_request不会执行，视图也不会执行。</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ul>\n<li>可以写多个</li>\n<li>如果有一个写了return返回值，那么其他的before_request不会执行，视图也不会执行。</li>\n</ul>\n<h3 id=\"03-after_request每次请求之后执行请求出现异常不会执行\"><a class=\"markdownIt-Anchor\" href=\"#03-after_request每次请求之后执行请求出现异常不会执行\"></a> 03 after_request：每次请求之后执行，请求出现异常不会执行</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_request</span>(<span class=\"params\">result</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;每次请求之后执行，请求出现异常不会执行&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 这个result是封装的响应对象，需要return否则报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h3 id=\"04-errorhandler可以自定义监听响应的状态码并处理\"><a class=\"markdownIt-Anchor\" href=\"#04-errorhandler可以自定义监听响应的状态码并处理\"></a> 04 errorhandler：可以自定义监听响应的状态码并处理：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.errorhandler(<span class=\"params\"><span class=\"number\">404</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">errorhandler</span>(<span class=\"params\">error</span>):</span></span><br><span class=\"line\">    print(error)  <span class=\"comment\"># 是具体的错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;404页面跑到了火星上面去了&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(<span class=\"params\"><span class=\"number\">500</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">errorhandler</span>(<span class=\"params\">error</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;errorhandler的错误信息&#x27;</span>)</span><br><span class=\"line\">    print(error)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;服务器内部错误500&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"05-teardown_request每次请求之后绑定了一个函数在非debug模式下即使遇到了异常也会执行\"><a class=\"markdownIt-Anchor\" href=\"#05-teardown_request每次请求之后绑定了一个函数在非debug模式下即使遇到了异常也会执行\"></a> 05 teardown_request：每次请求之后绑定了一个函数，在<code>非debug</code>模式下即使遇到了异常也会执行。</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.teardown_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">terardown_reqquest</span>(<span class=\"params\">error</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;无论视图函数是否有错误，视图函数执行完都会执行&#x27;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;想要此函数生效，debug不能为True&#x27;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;error 是具体的错误信息&#x27;</span>)</span><br><span class=\"line\">    print(error)</span><br></pre></td></tr></table></figure>\n<h3 id=\"06-template_global全局模板标签\"><a class=\"markdownIt-Anchor\" href=\"#06-template_global全局模板标签\"></a> 06 template_global()：全局模板标签</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.template_global()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">a1, a2</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a1+a2</span><br><span class=\"line\"><span class=\"comment\">#&#123;&#123;add(1,2)&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这个可以在模板中作为全局的标签使用,在模板中可以直接调用，调用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;add(1,2)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"07-template_filter全局模板过滤器\"><a class=\"markdownIt-Anchor\" href=\"#07-template_filter全局模板过滤器\"></a> 07 template_filter：全局模板过滤器</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.template_filter()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_filter</span>(<span class=\"params\">a1, a2, a3</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a1 + a2 + a3</span><br></pre></td></tr></table></figure>\n<p>这个可以在模板中作为全局过滤器使用，在模板中可以直接调用，调用方式(<em>注意同template_global的区别</em>) ：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;<span class=\"number\">1</span>|add_filter(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优势：</strong></p>\n<p>全局模板标签和全局模板过滤器简化了需要手动传一个函数给模板调用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app.py</span></span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">a1,a2</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a1+a2</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>,test=test)</span><br><span class=\"line\"></span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># index.html</span></span><br><span class=\"line\">```</span><br><span class=\"line\">&#123;&#123;test(<span class=\"number\">22</span>,<span class=\"number\">22</span>)&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<h2 id=\"02-flask中间件\"><a class=\"markdownIt-Anchor\" href=\"#02-flask中间件\"></a> 02 flask中间件</h2>\n<p>Flask的中间件的性质，就是可以理解为在整个请求的过程的前后定制一些个性化的功能。</p>\n<h5 id=\"flask的中间件的实现案例\"><a class=\"markdownIt-Anchor\" href=\"#flask的中间件的实现案例\"></a> flask的中间件的实现案例：</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;视图函数中&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">my_middle</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,wsgi_app</span>):</span></span><br><span class=\"line\">        self.wsgi_app = wsgi_app</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, *args, **kwargs</span>):</span></span><br><span class=\"line\">        print(<span class=\"string\">&#x27;中间件的代码上&#x27;</span>)</span><br><span class=\"line\">        obj = self.wsgi_app( *args, **kwargs)</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;中间件的代码下&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">   </span><br><span class=\"line\">    app.wsgi_app = my_middle(app.wsgi_app)</span><br><span class=\"line\">     <span class=\"comment\"># app.wsgi_app(environ, start_response)</span></span><br><span class=\"line\">    app.run()</span><br><span class=\"line\">    <span class=\"comment\"># 梳理一下 根据werkzeug我们可以知道 每次请求必然经历了app（）</span></span><br><span class=\"line\">    <span class=\"comment\"># 所以我们要查看Flask的源码找到__call__方法</span></span><br><span class=\"line\">    <span class=\"comment\"># 找到了__call__方法后发现执行了return self.wsgi_app(environ, start_response)</span></span><br><span class=\"line\">    <span class=\"comment\"># 然后flask里面所有的内容调度都是基于这个self.wsgi_app(environ, start_response)，这就是就是flask的入口</span></span><br><span class=\"line\">    <span class=\"comment\"># 如何实现中间件呢？ 原理上就是重写app.wsgi_app，然后在里面添加上一些自己想要实现的功能。</span></span><br><span class=\"line\">    <span class=\"comment\"># 首先分析  app.wsgi_app需要加括号执行  所以我们把app.wsgi_app做成一个对象，并且这个对象需要加括号运行</span></span><br><span class=\"line\">    <span class=\"comment\"># 也就是会触发这个对象的类的__call__()方法</span></span><br><span class=\"line\">    <span class=\"comment\"># 1 那么就是app.wsgi_app=对象=自己重写的类(app.wsgi_app) ，我们需要在自己重写的类里面实现flask源码中的app.wsgi_app,在实例化的过程把原来的app.wsgi_app变成对象的属性</span></span><br><span class=\"line\">    <span class=\"comment\"># 2         app.wsgi_app() =对象() = 自己重写的类.call()方法</span></span><br><span class=\"line\">    <span class=\"comment\"># 3         那么上面的代码就可以理解了，在自己重写的类中实现了原有的__call__方法</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"梳理\"><a class=\"markdownIt-Anchor\" href=\"#梳理\"></a> 梳理：</h5>\n<ul>\n<li>根据<code>werkzeug</code>我们可以知道 每次请求必然经历了<code>app（）</code></li>\n<li>所以我们要查看Flask的源码找到<code>__call__</code>方法</li>\n<li>找到了Flask的<code>__call__</code>方法后发现执行了<code>return self.wsgi_app(environ, start_response)</code></li>\n<li>flask里面所有的内容调度都是基于这个<code>self.wsgi_app(environ, start_response)</code>，这就是就是<code>flask</code>的入口，也就是selef是app，也就是<code>app.wsgi_app（environ, start_response）</code>为程序的入口。</li>\n<li>如何实现中间件呢？ 原理上就是重写app.wsgi_app，然后在里面添加上一些自己想要实现的功能。</li>\n<li>首先分析 app.wsgi_app需要加括号执行 所以我们把app.wsgi_app做成一个对象，并且这个对象需要加括号运行。</li>\n<li>也就是会触发这个对象的类的<code>__call__()</code>方法。</li>\n</ul>\n<h5 id=\"实操理解\"><a class=\"markdownIt-Anchor\" href=\"#实操理解\"></a> 实操理解：</h5>\n<ol>\n<li>\n<p><strong>app.wsgi_app=对象=自己重写的类(app.wsgi_app)</strong></p>\n<p><em>提示：我们需要在自己重写的类里面实现flask源码中的app.wsgi_app,在实例化的过程把原来的 app.wsgi_app变成对象的属性</em></p>\n</li>\n<li>\n<p><strong>app.wsgi_app(） =对象() = 自己重写的类.call()方法</strong></p>\n</li>\n</ol>\n<p>app.wsgi_app(实参） =对象(实参) = 自己重写的类.call(实参)方法</p>\n<ol start=\"3\">\n<li><strong>那么上面的代码就可以理解了，在自己重写的类中实现了原有的call方法，并且重新调用了原有的app.wsgi_app</strong></li>\n</ol>\n<h2 id=\"03-蓝图\"><a class=\"markdownIt-Anchor\" href=\"#03-蓝图\"></a> 03 蓝图：</h2>\n<h3 id=\"31-蓝图的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#31-蓝图的基本使用\"></a> 3.1 蓝图的基本使用</h3>\n<p>在我的flask中，我们可以利用蓝图对程序目录的划分。</p>\n<p>思考如果我们有很多个视图函数，比如下面这样我们是不是应该抽取出来专门的py文件进行管理呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;logout&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;add_order&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;modify_order&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;modify_order&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>上面的这种是不是会显得主运行文件特别乱，这个时候我们的蓝图就闪亮登场了。</p>\n<h5 id=\"311实例\"><a class=\"markdownIt-Anchor\" href=\"#311实例\"></a> <strong>3.1.1实例：</strong></h5>\n<p>项目目录：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-templates</span><br><span class=\"line\">-static</span><br><span class=\"line\">-views</span><br><span class=\"line\">    -user.py</span><br><span class=\"line\">    -order.py</span><br><span class=\"line\">-app.py</span><br></pre></td></tr></table></figure>\n<p>views/user.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 创建蓝图</span></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 利用蓝图创建路由关系</span></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;logout&quot;</span></span><br></pre></td></tr></table></figure>\n<p>views/order.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">order_bp = Blueprint(<span class=\"string\">&#x27;order&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;add_order&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/modify_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;modify_order&quot;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://app.py\">app.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> views.user <span class=\"keyword\">import</span> user_bp</span><br><span class=\"line\"><span class=\"keyword\">from</span> views.order <span class=\"keyword\">import</span> order_bp</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 3 注册蓝图</span></span><br><span class=\"line\">app.register_blueprint(user_bp)</span><br><span class=\"line\">app.register_blueprint(order_bp)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>访问：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215474-577184084..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215474-577184084..png\" alt=\"1552424766233\" /></a></p>\n<p>其他的几条路由也是直接访问，在此就不做展示了。</p>\n<p><strong>讲解：</strong></p>\n<p>观察views/user.py</p>\n<ul>\n<li>\n<p>我们可以把所有的视图函数抽出来多个文件。</p>\n</li>\n<li>\n<p>在这里我们通过<code>user_bp = Blueprint('user',__name__)</code>创建一个蓝图对象</p>\n<p>参数讲解：</p>\n<ul>\n<li>user_bp ：是用于指向创建出的蓝图对象，可以自由命名。</li>\n<li>Blueprint的第一个参数自定义命名的<code>‘user’</code>用于<code>url_for</code>翻转<code>url</code>时使用。</li>\n<li><code>__name__</code>用于寻找蓝图自定义的模板和静态文件使用。</li>\n</ul>\n</li>\n<li>\n<p>蓝图对象的用法和之前实例化出来的app对象用法很像，可以进行注册路由。</p>\n</li>\n</ul>\n<p><a href=\"http://xn--app-jn0fj93r.py\">观察app.py</a></p>\n<ul>\n<li>这里我们需要手动的去注册一下蓝图，才会建立上url和视图函数的映射关系。</li>\n</ul>\n<p><strong>关键词：</strong></p>\n<ol>\n<li>\n<p>创建蓝图</p>\n<p><code>user_bp = Blueprint('user',__name__)</code></p>\n</li>\n<li>\n<p>利用蓝图创建路由关系</p>\n<p>@bp.route(’/login/’)<br />\ndef login():<br />\nreturn “login”</p>\n</li>\n<li>\n<p>注册蓝图<br />\napp.register_blueprint(bp)</p>\n</li>\n</ol>\n<h3 id=\"32-蓝图的高级使用重点备课内容\"><a class=\"markdownIt-Anchor\" href=\"#32-蓝图的高级使用重点备课内容\"></a> 3.2 蓝图的高级使用（重点备课内容）</h3>\n<h4 id=\"321-蓝图中实现path部分的url前缀\"><a class=\"markdownIt-Anchor\" href=\"#321-蓝图中实现path部分的url前缀\"></a> 3.2.1 蓝图中实现path部分的url前缀</h4>\n<p>创建蓝图的时候填写<code>url_prefix</code>可以为增加url的path部分的前缀，可以更方便的去管理访问视图函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 创建蓝图</span></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 注意斜杠跟视图函数的url连起来时候不要重复了。</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215854-919173490..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215854-919173490..png\" alt=\"1552425130691\" /></a></p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>\n<p>斜杠跟视图函数的url连起来时候不要重复了。</p>\n<p>图解：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216014-1683480120..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216014-1683480120..png\" alt=\"1552426158515\" /></a></p>\n</li>\n</ol>\n<p>2.url加前缀的时候也可以再注册蓝图的时候加上，更推荐这么做，因为代码的可读性更强。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.register_blueprint(user_bp,url_prefix=<span class=\"string\">&#x27;/order&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"332-蓝图中自定义模板路径\"><a class=\"markdownIt-Anchor\" href=\"#332-蓝图中自定义模板路径\"></a> 3.3.2 蓝图中自定义模板路径</h4>\n<p>创建蓝图的时候填写<code>template_folder</code>可以指定自定义模板路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 创建蓝图                                           #所对应的参数路径是相对于蓝图文件的</span></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>,template_folder=<span class=\"string\">&#x27;views_templates&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：</p>\n<ol>\n<li>\n<p>蓝图虽然指定了自定义的模板查找路径，但是查找顺序还是会先找主app规定的模板路径(templates)，找不到再找蓝图自定义的模板路径。</p>\n</li>\n<li>\n<p><code>Blueprint</code>的<code>template_folder</code>参数指定的自定义模板路径是相对于蓝图文件的路径。</p>\n<p>图解：</p>\n<p><strong>(01)</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216222-141055298..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216222-141055298..png\" alt=\"1552425776786\" /></a></p>\n<p><strong>(02)</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216436-1555848420..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216436-1555848420..png\" alt=\"1552425616132\" /></a></p>\n</li>\n</ol>\n<h4 id=\"333-蓝图中自定义静态文件路径\"><a class=\"markdownIt-Anchor\" href=\"#333-蓝图中自定义静态文件路径\"></a> 3.3.3 蓝图中自定义静态文件路径</h4>\n<p>创建蓝图的时候填写<code>static_folder</code>可以指定自定义静态文件的路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>,template_folder=<span class=\"string\">&#x27;views_templates&#x27;</span>,</span><br><span class=\"line\">                    static_folder=<span class=\"string\">&#x27;views_static&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ol>\n<li>在模板中使用自定义的静态文件路径需要依赖<code>url_for()</code></li>\n<li>下节讲解如何在模板中应用蓝图自定义的静态文件。</li>\n</ol>\n<h4 id=\"334-url_for翻转蓝图\"><a class=\"markdownIt-Anchor\" href=\"#334-url_for翻转蓝图\"></a> 3.3.4 url_for()翻转蓝图</h4>\n<h5 id=\"视图中翻转url\"><a class=\"markdownIt-Anchor\" href=\"#视图中翻转url\"></a> 视图中翻转url:</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(<span class=\"string\">&#x27;创建蓝图时第一个参数.蓝图下的函数名&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 如：</span></span><br><span class=\"line\">url_for(<span class=\"string\">&#x27;user.login&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"模板中翻转url\"><a class=\"markdownIt-Anchor\" href=\"#模板中翻转url\"></a> 模板中翻转url:</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; url_for(&#39;创建蓝图时第一个参数.蓝图下的函数名&#39;) &#125;&#125;</span><br><span class=\"line\"># 如：</span><br><span class=\"line\">&#123;&#123; url_for(&#39;user.login&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"模板中应用蓝图自定义路径的静态文件\"><a class=\"markdownIt-Anchor\" href=\"#模板中应用蓝图自定义路径的静态文件\"></a> 模板中应用蓝图自定义路径的静态文件：</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; url_for(&#39;创建蓝图时第一个参数.static&#39;,filename&#x3D;&#39;蓝图自定义静态文件路径下的文件&#39;) &#125;&#125;</span><br><span class=\"line\"># 如：</span><br><span class=\"line\">&#123;&#123; url_for(&#39;user.static&#39;,filename&#x3D;&#39;login.css&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"335-蓝图子域名的实现\"><a class=\"markdownIt-Anchor\" href=\"#335-蓝图子域名的实现\"></a> 3.3.5 蓝图子域名的实现</h4>\n<p>创建蓝图的时候填写<code>subdomain</code>可以指定子域名，可以参考之前注册路由中实现子域名。</p>\n<p><strong>（1）</strong> 配置C:\\Windows\\System32\\drivers\\etc\\hosts</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> bookmanage.com</span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> admin.bookmanage.com</span><br></pre></td></tr></table></figure>\n<p>**（2）**给app增加配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config[<span class=\"string\">&#x27;SERVER_NAME&#x27;</span>] = <span class=\"string\">&#x27;bookmanage.com:5000&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>**（3）**创建蓝图的时候添加子域名 <code>subdomain='admin'</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 创建蓝图                                           </span></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>,template_folder=<span class=\"string\">&#x27;views_templates&#x27;</span>,</span><br><span class=\"line\">                    static_folder=<span class=\"string\">&#x27;views_static&#x27;</span>,subdomain=<span class=\"string\">&#x27;admin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 利用蓝图创建路由关系</span></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login_master.html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>（4）</strong> <a href=\"http://xn--admin-6u8oj48c.bookmanage.com:5000/user/login/\">访问admin.bookmanage.com:5000/user/login/</a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216641-888219773..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216641-888219773..png\" alt=\"1552428071447\" /></a></p>\n<h4 id=\"336-蓝图中使用自己请求扩展\"><a class=\"markdownIt-Anchor\" href=\"#336-蓝图中使用自己请求扩展\"></a> 3.3.6 蓝图中使用自己请求扩展</h4>\n<p>在蓝图中我们可以利用创建好的蓝图对象，设置访问蓝图的视图函数的时候触发蓝图独有的请求扩展。</p>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order_bp = Blueprint(<span class=\"string\">&#x27;order&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;add_order&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.before_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">order_bp_before_request</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;请登录&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>只有访问该蓝图下的视图函数时候才会触发该蓝图的请求扩展。</li>\n<li>可以这么理解：相当app的请求扩展是全局的，而蓝图的请求扩展是局部的只对本蓝图下的视图函数有效。</li>\n</ul>\n<h3 id=\"33-使用蓝图之中小型系统\"><a class=\"markdownIt-Anchor\" href=\"#33-使用蓝图之中小型系统\"></a> 3.3 使用蓝图之中小型系统</h3>\n<p>目录结构：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-flask_small_pro</span><br><span class=\"line\">\t-app01</span><br><span class=\"line\">    \t-__init__.py</span><br><span class=\"line\">    \t-static</span><br><span class=\"line\">        -templates</span><br><span class=\"line\">        -views</span><br><span class=\"line\">        \t-order.py</span><br><span class=\"line\">            -user.py</span><br><span class=\"line\">     -manage.py </span><br><span class=\"line\">        </span><br><span class=\"line\">__init__.py</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> app01.views.user <span class=\"keyword\">import</span> user_bp</span><br><span class=\"line\"><span class=\"keyword\">from</span> app01.views.order <span class=\"keyword\">import</span> order_bp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">app.register_blueprint(user_bp,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\">app.register_blueprint(order_bp)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://user.py\">user.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;login&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;logout&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://order.py\">order.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">order_bp = Blueprint(<span class=\"string\">&#x27;order&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;buy_order&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/modify_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;modify_order&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://manage.py\">manage.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app01 <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<h3 id=\"34-使用蓝图之使用大型系统\"><a class=\"markdownIt-Anchor\" href=\"#34-使用蓝图之使用大型系统\"></a> 3.4 使用蓝图之使用大型系统</h3>\n<p>这里所谓的大型系统并不是绝对的大型系统，而是相对规整的大型系统，相当于提供了一个参考，在真实的生成环境中会根据公司的项目以及需求，规划自己的目录结构。</p>\n<p>文件路径：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  run.py  </span><br><span class=\"line\">│</span><br><span class=\"line\">│</span><br><span class=\"line\">└─pro_flask  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    │  __init__.py </span><br><span class=\"line\">    │</span><br><span class=\"line\">    ├─admin\t <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    │  │  views.py</span><br><span class=\"line\">    │  │  __init__.py</span><br><span class=\"line\">    │  │</span><br><span class=\"line\">    │  ├─static <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    │  └─templates  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    │</span><br><span class=\"line\">    └─web\t<span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">       │  views.py</span><br><span class=\"line\">       │  __init__.py</span><br><span class=\"line\">       │</span><br><span class=\"line\">       ├─static  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">       └─templates <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<p><a href=\"http://run.py\">run.py</a> 启动app</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pro_flask <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><code>__init__.py</code> 实例化核心类，导入蓝图对象，注册蓝图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> .admin <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .web <span class=\"keyword\">import</span> web</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.register_blueprint(admin, url_prefix=<span class=\"string\">&#x27;/admin&#x27;</span>)</span><br><span class=\"line\">app.register_blueprint(web)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://admin.views.py\">admin.views.py</a> 完成注册路由以及视图函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.route(<span class=\"params\"><span class=\"string\">&#x27;/index&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Admin.Index&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>admin.__init__.py</code> 生成蓝图对象导入views，使得views的代码运行完成注册路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">admin = Blueprint(</span><br><span class=\"line\">    <span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">    __name__,</span><br><span class=\"line\">    template_folder=<span class=\"string\">&#x27;templates&#x27;</span>,</span><br><span class=\"line\">    static_folder=<span class=\"string\">&#x27;static&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br></pre></td></tr></table></figure>\n<p>web文件夹下和admin文件夹下目录构成完全一致，这里就不举例子了。</p>\n","more":"<h2 id=\"01-请求扩展\"><a class=\"markdownIt-Anchor\" href=\"#01-请求扩展\"></a> 01 请求扩展</h2>\n<h3 id=\"01-before_first_request-项目启动后第一次请求的时候执行\"><a class=\"markdownIt-Anchor\" href=\"#01-before_first_request-项目启动后第一次请求的时候执行\"></a> 01 before_first_request ：项目启动后第一次请求的时候执行</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.before_first_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_first_request</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;第一次请求的时候执行&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"02-before_request每次请求之前执行\"><a class=\"markdownIt-Anchor\" href=\"#02-before_request每次请求之前执行\"></a> 02 before_request：每次请求之前执行</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.before_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">before_request</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;每次请求之前执行&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># return &#x27;直接return&#x27;    # 如果有一个写了return返回值，那么其他的before_request不会执行，视图也不会执行。</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ul>\n<li>可以写多个</li>\n<li>如果有一个写了return返回值，那么其他的before_request不会执行，视图也不会执行。</li>\n</ul>\n<h3 id=\"03-after_request每次请求之后执行请求出现异常不会执行\"><a class=\"markdownIt-Anchor\" href=\"#03-after_request每次请求之后执行请求出现异常不会执行\"></a> 03 after_request：每次请求之后执行，请求出现异常不会执行</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">after_request</span>(<span class=\"params\">result</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;每次请求之后执行，请求出现异常不会执行&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 这个result是封装的响应对象，需要return否则报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<h3 id=\"04-errorhandler可以自定义监听响应的状态码并处理\"><a class=\"markdownIt-Anchor\" href=\"#04-errorhandler可以自定义监听响应的状态码并处理\"></a> 04 errorhandler：可以自定义监听响应的状态码并处理：</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.errorhandler(<span class=\"params\"><span class=\"number\">404</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">errorhandler</span>(<span class=\"params\">error</span>):</span></span><br><span class=\"line\">    print(error)  <span class=\"comment\"># 是具体的错误信息</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;404页面跑到了火星上面去了&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.errorhandler(<span class=\"params\"><span class=\"number\">500</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">errorhandler</span>(<span class=\"params\">error</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;errorhandler的错误信息&#x27;</span>)</span><br><span class=\"line\">    print(error)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;服务器内部错误500&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"05-teardown_request每次请求之后绑定了一个函数在非debug模式下即使遇到了异常也会执行\"><a class=\"markdownIt-Anchor\" href=\"#05-teardown_request每次请求之后绑定了一个函数在非debug模式下即使遇到了异常也会执行\"></a> 05 teardown_request：每次请求之后绑定了一个函数，在<code>非debug</code>模式下即使遇到了异常也会执行。</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.teardown_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">terardown_reqquest</span>(<span class=\"params\">error</span>):</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;无论视图函数是否有错误，视图函数执行完都会执行&#x27;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;想要此函数生效，debug不能为True&#x27;</span>)</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;error 是具体的错误信息&#x27;</span>)</span><br><span class=\"line\">    print(error)</span><br></pre></td></tr></table></figure>\n<h3 id=\"06-template_global全局模板标签\"><a class=\"markdownIt-Anchor\" href=\"#06-template_global全局模板标签\"></a> 06 template_global()：全局模板标签</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.template_global()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">a1, a2</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a1+a2</span><br><span class=\"line\"><span class=\"comment\">#&#123;&#123;add(1,2)&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>这个可以在模板中作为全局的标签使用,在模板中可以直接调用，调用方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;add(1,2)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"07-template_filter全局模板过滤器\"><a class=\"markdownIt-Anchor\" href=\"#07-template_filter全局模板过滤器\"></a> 07 template_filter：全局模板过滤器</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.template_filter()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_filter</span>(<span class=\"params\">a1, a2, a3</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a1 + a2 + a3</span><br></pre></td></tr></table></figure>\n<p>这个可以在模板中作为全局过滤器使用，在模板中可以直接调用，调用方式(<em>注意同template_global的区别</em>) ：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;<span class=\"number\">1</span>|add_filter(<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>优势：</strong></p>\n<p>全局模板标签和全局模板过滤器简化了需要手动传一个函数给模板调用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app.py</span></span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span>(<span class=\"params\">a1,a2</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a1+a2</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;index.html&#x27;</span>,test=test)</span><br><span class=\"line\"></span><br><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># index.html</span></span><br><span class=\"line\">```</span><br><span class=\"line\">&#123;&#123;test(<span class=\"number\">22</span>,<span class=\"number\">22</span>)&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<h2 id=\"02-flask中间件\"><a class=\"markdownIt-Anchor\" href=\"#02-flask中间件\"></a> 02 flask中间件</h2>\n<p>Flask的中间件的性质，就是可以理解为在整个请求的过程的前后定制一些个性化的功能。</p>\n<h5 id=\"flask的中间件的实现案例\"><a class=\"markdownIt-Anchor\" href=\"#flask的中间件的实现案例\"></a> flask的中间件的实现案例：</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;视图函数中&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">my_middle</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self,wsgi_app</span>):</span></span><br><span class=\"line\">        self.wsgi_app = wsgi_app</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self, *args, **kwargs</span>):</span></span><br><span class=\"line\">        print(<span class=\"string\">&#x27;中间件的代码上&#x27;</span>)</span><br><span class=\"line\">        obj = self.wsgi_app( *args, **kwargs)</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;中间件的代码下&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">   </span><br><span class=\"line\">    app.wsgi_app = my_middle(app.wsgi_app)</span><br><span class=\"line\">     <span class=\"comment\"># app.wsgi_app(environ, start_response)</span></span><br><span class=\"line\">    app.run()</span><br><span class=\"line\">    <span class=\"comment\"># 梳理一下 根据werkzeug我们可以知道 每次请求必然经历了app（）</span></span><br><span class=\"line\">    <span class=\"comment\"># 所以我们要查看Flask的源码找到__call__方法</span></span><br><span class=\"line\">    <span class=\"comment\"># 找到了__call__方法后发现执行了return self.wsgi_app(environ, start_response)</span></span><br><span class=\"line\">    <span class=\"comment\"># 然后flask里面所有的内容调度都是基于这个self.wsgi_app(environ, start_response)，这就是就是flask的入口</span></span><br><span class=\"line\">    <span class=\"comment\"># 如何实现中间件呢？ 原理上就是重写app.wsgi_app，然后在里面添加上一些自己想要实现的功能。</span></span><br><span class=\"line\">    <span class=\"comment\"># 首先分析  app.wsgi_app需要加括号执行  所以我们把app.wsgi_app做成一个对象，并且这个对象需要加括号运行</span></span><br><span class=\"line\">    <span class=\"comment\"># 也就是会触发这个对象的类的__call__()方法</span></span><br><span class=\"line\">    <span class=\"comment\"># 1 那么就是app.wsgi_app=对象=自己重写的类(app.wsgi_app) ，我们需要在自己重写的类里面实现flask源码中的app.wsgi_app,在实例化的过程把原来的app.wsgi_app变成对象的属性</span></span><br><span class=\"line\">    <span class=\"comment\"># 2         app.wsgi_app() =对象() = 自己重写的类.call()方法</span></span><br><span class=\"line\">    <span class=\"comment\"># 3         那么上面的代码就可以理解了，在自己重写的类中实现了原有的__call__方法</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"梳理\"><a class=\"markdownIt-Anchor\" href=\"#梳理\"></a> 梳理：</h5>\n<ul>\n<li>根据<code>werkzeug</code>我们可以知道 每次请求必然经历了<code>app（）</code></li>\n<li>所以我们要查看Flask的源码找到<code>__call__</code>方法</li>\n<li>找到了Flask的<code>__call__</code>方法后发现执行了<code>return self.wsgi_app(environ, start_response)</code></li>\n<li>flask里面所有的内容调度都是基于这个<code>self.wsgi_app(environ, start_response)</code>，这就是就是<code>flask</code>的入口，也就是selef是app，也就是<code>app.wsgi_app（environ, start_response）</code>为程序的入口。</li>\n<li>如何实现中间件呢？ 原理上就是重写app.wsgi_app，然后在里面添加上一些自己想要实现的功能。</li>\n<li>首先分析 app.wsgi_app需要加括号执行 所以我们把app.wsgi_app做成一个对象，并且这个对象需要加括号运行。</li>\n<li>也就是会触发这个对象的类的<code>__call__()</code>方法。</li>\n</ul>\n<h5 id=\"实操理解\"><a class=\"markdownIt-Anchor\" href=\"#实操理解\"></a> 实操理解：</h5>\n<ol>\n<li>\n<p><strong>app.wsgi_app=对象=自己重写的类(app.wsgi_app)</strong></p>\n<p><em>提示：我们需要在自己重写的类里面实现flask源码中的app.wsgi_app,在实例化的过程把原来的 app.wsgi_app变成对象的属性</em></p>\n</li>\n<li>\n<p><strong>app.wsgi_app(） =对象() = 自己重写的类.call()方法</strong></p>\n</li>\n</ol>\n<p>app.wsgi_app(实参） =对象(实参) = 自己重写的类.call(实参)方法</p>\n<ol start=\"3\">\n<li><strong>那么上面的代码就可以理解了，在自己重写的类中实现了原有的call方法，并且重新调用了原有的app.wsgi_app</strong></li>\n</ol>\n<h2 id=\"03-蓝图\"><a class=\"markdownIt-Anchor\" href=\"#03-蓝图\"></a> 03 蓝图：</h2>\n<h3 id=\"31-蓝图的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#31-蓝图的基本使用\"></a> 3.1 蓝图的基本使用</h3>\n<p>在我的flask中，我们可以利用蓝图对程序目录的划分。</p>\n<p>思考如果我们有很多个视图函数，比如下面这样我们是不是应该抽取出来专门的py文件进行管理呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;logout&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;add_order&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;modify_order&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;modify_order&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>上面的这种是不是会显得主运行文件特别乱，这个时候我们的蓝图就闪亮登场了。</p>\n<h5 id=\"311实例\"><a class=\"markdownIt-Anchor\" href=\"#311实例\"></a> <strong>3.1.1实例：</strong></h5>\n<p>项目目录：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-templates</span><br><span class=\"line\">-static</span><br><span class=\"line\">-views</span><br><span class=\"line\">    -user.py</span><br><span class=\"line\">    -order.py</span><br><span class=\"line\">-app.py</span><br></pre></td></tr></table></figure>\n<p>views/user.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 创建蓝图</span></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 利用蓝图创建路由关系</span></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;login&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;logout&quot;</span></span><br></pre></td></tr></table></figure>\n<p>views/order.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">order_bp = Blueprint(<span class=\"string\">&#x27;order&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;add_order&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/modify_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;modify_order&quot;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://app.py\">app.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> views.user <span class=\"keyword\">import</span> user_bp</span><br><span class=\"line\"><span class=\"keyword\">from</span> views.order <span class=\"keyword\">import</span> order_bp</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># 3 注册蓝图</span></span><br><span class=\"line\">app.register_blueprint(user_bp)</span><br><span class=\"line\">app.register_blueprint(order_bp)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p>访问：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215474-577184084..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215474-577184084..png\" alt=\"1552424766233\" /></a></p>\n<p>其他的几条路由也是直接访问，在此就不做展示了。</p>\n<p><strong>讲解：</strong></p>\n<p>观察views/user.py</p>\n<ul>\n<li>\n<p>我们可以把所有的视图函数抽出来多个文件。</p>\n</li>\n<li>\n<p>在这里我们通过<code>user_bp = Blueprint('user',__name__)</code>创建一个蓝图对象</p>\n<p>参数讲解：</p>\n<ul>\n<li>user_bp ：是用于指向创建出的蓝图对象，可以自由命名。</li>\n<li>Blueprint的第一个参数自定义命名的<code>‘user’</code>用于<code>url_for</code>翻转<code>url</code>时使用。</li>\n<li><code>__name__</code>用于寻找蓝图自定义的模板和静态文件使用。</li>\n</ul>\n</li>\n<li>\n<p>蓝图对象的用法和之前实例化出来的app对象用法很像，可以进行注册路由。</p>\n</li>\n</ul>\n<p><a href=\"http://xn--app-jn0fj93r.py\">观察app.py</a></p>\n<ul>\n<li>这里我们需要手动的去注册一下蓝图，才会建立上url和视图函数的映射关系。</li>\n</ul>\n<p><strong>关键词：</strong></p>\n<ol>\n<li>\n<p>创建蓝图</p>\n<p><code>user_bp = Blueprint('user',__name__)</code></p>\n</li>\n<li>\n<p>利用蓝图创建路由关系</p>\n<p>@bp.route(’/login/’)<br />\ndef login():<br />\nreturn “login”</p>\n</li>\n<li>\n<p>注册蓝图<br />\napp.register_blueprint(bp)</p>\n</li>\n</ol>\n<h3 id=\"32-蓝图的高级使用重点备课内容\"><a class=\"markdownIt-Anchor\" href=\"#32-蓝图的高级使用重点备课内容\"></a> 3.2 蓝图的高级使用（重点备课内容）</h3>\n<h4 id=\"321-蓝图中实现path部分的url前缀\"><a class=\"markdownIt-Anchor\" href=\"#321-蓝图中实现path部分的url前缀\"></a> 3.2.1 蓝图中实现path部分的url前缀</h4>\n<p>创建蓝图的时候填写<code>url_prefix</code>可以为增加url的path部分的前缀，可以更方便的去管理访问视图函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1 创建蓝图</span></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 注意斜杠跟视图函数的url连起来时候不要重复了。</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215854-919173490..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155215854-919173490..png\" alt=\"1552425130691\" /></a></p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>\n<p>斜杠跟视图函数的url连起来时候不要重复了。</p>\n<p>图解：</p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216014-1683480120..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216014-1683480120..png\" alt=\"1552426158515\" /></a></p>\n</li>\n</ol>\n<p>2.url加前缀的时候也可以再注册蓝图的时候加上，更推荐这么做，因为代码的可读性更强。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.register_blueprint(user_bp,url_prefix=<span class=\"string\">&#x27;/order&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"332-蓝图中自定义模板路径\"><a class=\"markdownIt-Anchor\" href=\"#332-蓝图中自定义模板路径\"></a> 3.3.2 蓝图中自定义模板路径</h4>\n<p>创建蓝图的时候填写<code>template_folder</code>可以指定自定义模板路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 创建蓝图                                           #所对应的参数路径是相对于蓝图文件的</span></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>,template_folder=<span class=\"string\">&#x27;views_templates&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：</p>\n<ol>\n<li>\n<p>蓝图虽然指定了自定义的模板查找路径，但是查找顺序还是会先找主app规定的模板路径(templates)，找不到再找蓝图自定义的模板路径。</p>\n</li>\n<li>\n<p><code>Blueprint</code>的<code>template_folder</code>参数指定的自定义模板路径是相对于蓝图文件的路径。</p>\n<p>图解：</p>\n<p><strong>(01)</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216222-141055298..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216222-141055298..png\" alt=\"1552425776786\" /></a></p>\n<p><strong>(02)</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216436-1555848420..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216436-1555848420..png\" alt=\"1552425616132\" /></a></p>\n</li>\n</ol>\n<h4 id=\"333-蓝图中自定义静态文件路径\"><a class=\"markdownIt-Anchor\" href=\"#333-蓝图中自定义静态文件路径\"></a> 3.3.3 蓝图中自定义静态文件路径</h4>\n<p>创建蓝图的时候填写<code>static_folder</code>可以指定自定义静态文件的路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>,template_folder=<span class=\"string\">&#x27;views_templates&#x27;</span>,</span><br><span class=\"line\">                    static_folder=<span class=\"string\">&#x27;views_static&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<ol>\n<li>在模板中使用自定义的静态文件路径需要依赖<code>url_for()</code></li>\n<li>下节讲解如何在模板中应用蓝图自定义的静态文件。</li>\n</ol>\n<h4 id=\"334-url_for翻转蓝图\"><a class=\"markdownIt-Anchor\" href=\"#334-url_for翻转蓝图\"></a> 3.3.4 url_for()翻转蓝图</h4>\n<h5 id=\"视图中翻转url\"><a class=\"markdownIt-Anchor\" href=\"#视图中翻转url\"></a> 视图中翻转url:</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_for(<span class=\"string\">&#x27;创建蓝图时第一个参数.蓝图下的函数名&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 如：</span></span><br><span class=\"line\">url_for(<span class=\"string\">&#x27;user.login&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"模板中翻转url\"><a class=\"markdownIt-Anchor\" href=\"#模板中翻转url\"></a> 模板中翻转url:</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; url_for(&#39;创建蓝图时第一个参数.蓝图下的函数名&#39;) &#125;&#125;</span><br><span class=\"line\"># 如：</span><br><span class=\"line\">&#123;&#123; url_for(&#39;user.login&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"模板中应用蓝图自定义路径的静态文件\"><a class=\"markdownIt-Anchor\" href=\"#模板中应用蓝图自定义路径的静态文件\"></a> 模板中应用蓝图自定义路径的静态文件：</h5>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123; url_for(&#39;创建蓝图时第一个参数.static&#39;,filename&#x3D;&#39;蓝图自定义静态文件路径下的文件&#39;) &#125;&#125;</span><br><span class=\"line\"># 如：</span><br><span class=\"line\">&#123;&#123; url_for(&#39;user.static&#39;,filename&#x3D;&#39;login.css&#39;) &#125;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"335-蓝图子域名的实现\"><a class=\"markdownIt-Anchor\" href=\"#335-蓝图子域名的实现\"></a> 3.3.5 蓝图子域名的实现</h4>\n<p>创建蓝图的时候填写<code>subdomain</code>可以指定子域名，可以参考之前注册路由中实现子域名。</p>\n<p><strong>（1）</strong> 配置C:\\Windows\\System32\\drivers\\etc\\hosts</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> bookmanage.com</span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span> admin.bookmanage.com</span><br></pre></td></tr></table></figure>\n<p>**（2）**给app增加配置</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config[<span class=\"string\">&#x27;SERVER_NAME&#x27;</span>] = <span class=\"string\">&#x27;bookmanage.com:5000&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>**（3）**创建蓝图的时候添加子域名 <code>subdomain='admin'</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 创建蓝图                                           </span></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>,template_folder=<span class=\"string\">&#x27;views_templates&#x27;</span>,</span><br><span class=\"line\">                    static_folder=<span class=\"string\">&#x27;views_static&#x27;</span>,subdomain=<span class=\"string\">&#x27;admin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2 利用蓝图创建路由关系</span></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login_master.html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>（4）</strong> <a href=\"http://xn--admin-6u8oj48c.bookmanage.com:5000/user/login/\">访问admin.bookmanage.com:5000/user/login/</a></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216641-888219773..png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191012155216641-888219773..png\" alt=\"1552428071447\" /></a></p>\n<h4 id=\"336-蓝图中使用自己请求扩展\"><a class=\"markdownIt-Anchor\" href=\"#336-蓝图中使用自己请求扩展\"></a> 3.3.6 蓝图中使用自己请求扩展</h4>\n<p>在蓝图中我们可以利用创建好的蓝图对象，设置访问蓝图的视图函数的时候触发蓝图独有的请求扩展。</p>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">order_bp = Blueprint(<span class=\"string\">&#x27;order&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;add_order&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.before_request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">order_bp_before_request</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;请登录&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>只有访问该蓝图下的视图函数时候才会触发该蓝图的请求扩展。</li>\n<li>可以这么理解：相当app的请求扩展是全局的，而蓝图的请求扩展是局部的只对本蓝图下的视图函数有效。</li>\n</ul>\n<h3 id=\"33-使用蓝图之中小型系统\"><a class=\"markdownIt-Anchor\" href=\"#33-使用蓝图之中小型系统\"></a> 3.3 使用蓝图之中小型系统</h3>\n<p>目录结构：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-flask_small_pro</span><br><span class=\"line\">\t-app01</span><br><span class=\"line\">    \t-__init__.py</span><br><span class=\"line\">    \t-static</span><br><span class=\"line\">        -templates</span><br><span class=\"line\">        -views</span><br><span class=\"line\">        \t-order.py</span><br><span class=\"line\">            -user.py</span><br><span class=\"line\">     -manage.py </span><br><span class=\"line\">        </span><br><span class=\"line\">__init__.py</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> app01.views.user <span class=\"keyword\">import</span> user_bp</span><br><span class=\"line\"><span class=\"keyword\">from</span> app01.views.order <span class=\"keyword\">import</span> order_bp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">app.register_blueprint(user_bp,url_prefix=<span class=\"string\">&#x27;/user&#x27;</span>)</span><br><span class=\"line\">app.register_blueprint(order_bp)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://user.py\">user.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">user_bp = Blueprint(<span class=\"string\">&#x27;user&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;login&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@user_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">logout</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;logout&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://order.py\">order.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">order_bp = Blueprint(<span class=\"string\">&#x27;order&#x27;</span>,__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/add_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;buy_order&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@order_bp.route(<span class=\"params\"><span class=\"string\">&#x27;/modify_order/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">modify_order</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;modify_order&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://manage.py\">manage.py</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> app01 <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<h3 id=\"34-使用蓝图之使用大型系统\"><a class=\"markdownIt-Anchor\" href=\"#34-使用蓝图之使用大型系统\"></a> 3.4 使用蓝图之使用大型系统</h3>\n<p>这里所谓的大型系统并不是绝对的大型系统，而是相对规整的大型系统，相当于提供了一个参考，在真实的生成环境中会根据公司的项目以及需求，规划自己的目录结构。</p>\n<p>文件路径：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│  run.py  </span><br><span class=\"line\">│</span><br><span class=\"line\">│</span><br><span class=\"line\">└─pro_flask  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    │  __init__.py </span><br><span class=\"line\">    │</span><br><span class=\"line\">    ├─admin\t <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    │  │  views.py</span><br><span class=\"line\">    │  │  __init__.py</span><br><span class=\"line\">    │  │</span><br><span class=\"line\">    │  ├─static <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    │  └─templates  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    │</span><br><span class=\"line\">    └─web\t<span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">       │  views.py</span><br><span class=\"line\">       │  __init__.py</span><br><span class=\"line\">       │</span><br><span class=\"line\">       ├─static  <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">       └─templates <span class=\"comment\"># 文件夹</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<p><a href=\"http://run.py\">run.py</a> 启动app</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pro_flask <span class=\"keyword\">import</span> app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><code>__init__.py</code> 实例化核心类，导入蓝图对象，注册蓝图。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> .admin <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"><span class=\"keyword\">from</span> .web <span class=\"keyword\">import</span> web</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.register_blueprint(admin, url_prefix=<span class=\"string\">&#x27;/admin&#x27;</span>)</span><br><span class=\"line\">app.register_blueprint(web)</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://admin.views.py\">admin.views.py</a> 完成注册路由以及视图函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@admin.route(<span class=\"params\"><span class=\"string\">&#x27;/index&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Admin.Index&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>admin.__init__.py</code> 生成蓝图对象导入views，使得views的代码运行完成注册路由</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint</span><br><span class=\"line\"></span><br><span class=\"line\">admin = Blueprint(</span><br><span class=\"line\">    <span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">    __name__,</span><br><span class=\"line\">    template_folder=<span class=\"string\">&#x27;templates&#x27;</span>,</span><br><span class=\"line\">    static_folder=<span class=\"string\">&#x27;static&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br></pre></td></tr></table></figure>\n<p>web文件夹下和admin文件夹下目录构成完全一致，这里就不举例子了。</p>\n","categories":[{"name":"flask","path":"api/categories/flask.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"flask","path":"api/tags/flask.json"}]}