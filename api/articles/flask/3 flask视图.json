{"title":"3 flask视图","slug":"flask/3 flask视图","date":"2021-01-18T11:39:27.076Z","updated":"2021-01-19T05:54:24.574Z","comments":true,"path":"api/articles/flask/3 flask视图.json","excerpt":null,"covers":["https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222230423-1742169751.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222432221-608582097.jpg","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222510737-1061015223.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222556143-340794981.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222621609-1621658602.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222657669-1682091996.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222717747-459163041.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222809137-31438223.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222826146-1144854374.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223137828-581237383.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223409813-960893827.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223624037-1211906551.png","https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223643974-105951200.png"],"content":"<h2 id=\"31-http请求\"><a class=\"markdownIt-Anchor\" href=\"#31-http请求\"></a> 3.1 HTTP请求</h2>\n<h3 id=\"311-请求报文-和-响应报文\"><a class=\"markdownIt-Anchor\" href=\"#311-请求报文-和-响应报文\"></a> 3.1.1 请求报文 和 响应报文</h3>\n<ul>\n<li>请求报文：请求时浏览器发送的数据称为请求报文</li>\n<li>响应报文：服务器收到了请求返回给浏览器的数据称为响应报文</li>\n</ul>\n<p>报文中的GET请求 和 POST请求</p>\n<ul>\n<li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如<code>EditBook?name=test1&amp;id=123456</code></li>\n<li>POST方法是把提交的数据放在HTTP包的请求体中.</li>\n<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制）</li>\n<li>POST方法提交的数据没有限制。</li>\n<li>GET与POST请求在服务端获取请求数据方式不同。</li>\n</ul>\n<p>报文示例：</p>\n<h2 id=\"-code0-\"><a class=\"markdownIt-Anchor\" href=\"#-code0-\"></a> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">GET请求报文</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 请求首行</span></span><br><span class=\"line\">GET / HTTP/<span class=\"number\">1.1</span>\\r\\n</span><br><span class=\"line\"><span class=\"comment\"># get请求后面的参数</span></span><br><span class=\"line\">GET /?name=lqz&amp;age=18 HTTP/1.1\\r\\n</span><br><span class=\"line\"><span class=\"comment\"># 请求头</span></span><br><span class=\"line\">Host: <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8008</span>\\r\\n</span><br><span class=\"line\">Connection: keep-alive\\r\\n</span><br><span class=\"line\">Cache-Control: <span class=\"built_in\">max</span>-age=<span class=\"number\">0</span>\\r\\n</span><br><span class=\"line\">Upgrade-Insecure-Requests: <span class=\"number\">1</span>\\r\\n</span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span> (Windows NT <span class=\"number\">6.1</span>; Win64; x64) AppleWebKit/<span class=\"number\">537.36</span> (KHTML, like Gecko) Chrome/<span class=\"number\">65.0</span><span class=\"number\">.3325</span><span class=\"number\">.181</span> Safari/<span class=\"number\">537.36</span>\\r\\n</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/webp,image/apng,*/*;q=<span class=\"number\">0.8</span>\\r\\nAccept-Encoding: gzip, deflate, br\\r\\n</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=<span class=\"number\">0.9</span>\\r\\n</span><br><span class=\"line\">Cookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\\r\\n\\r\\n<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\"># 请求体（get请求，请求体为空）    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">POST请求报文</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"># 请求首行</span></span><br><span class=\"line\"><span class=\"string\">POST /?name=lqz&amp;age=18 HTTP/1.1\\r\\n</span></span><br><span class=\"line\"><span class=\"string\"># 请求头</span></span><br><span class=\"line\"><span class=\"string\">Host: 127.0.0.1:8008\\r\\nConnection: keep-alive\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Content-Length: 21\\r\\nCache-Control: max-age=0\\r\\n      </span></span><br><span class=\"line\"><span class=\"string\">Origin: http://127.0.0.1:8008\\r\\nUpgrade-Insecure-Requests: 1\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: application/x-www-form-urlencoded\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\\r\\n     \t\t\t\t\t   Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\\r\\nReferer: http://127.0.0.1:8008/?name=lqz&amp;age=18\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Accept-Encoding: gzip, deflate, br\\r\\nAccept-Language: zh-CN,zh;q=0.9\\r\\nCookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\\r\\n\\r\\n</span></span><br><span class=\"line\"><span class=\"string\"># 请求体</span></span><br><span class=\"line\"><span class=\"string\">name=lqz&amp;password=123&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br></pre></td></tr></table></figure></h2>\n<h3 id=\"312-request对象\"><a class=\"markdownIt-Anchor\" href=\"#312-request对象\"></a> 3.1.2 request对象</h3>\n<p>request对象封装解析了请求报文中的数据，其大部分功能是由依赖包werkzeug完成的，并且<strong>每个request对象都是线程隔离的，保证了数据的安全性</strong>。</p>\n<h4 id=\"3121-request对象常用方法\"><a class=\"markdownIt-Anchor\" href=\"#3121-request对象常用方法\"></a> 3.1.2.1 request对象常用方法</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</span><br></pre></td></tr></table></figure>\n<h4 id=\"3122-使用request属性获取url\"><a class=\"markdownIt-Anchor\" href=\"#3122-使用request属性获取url\"></a> 3.1.2.2 使用request属性获取url</h4>\n<p>​\t访问: <a href=\"http://127.0.0.1:5000/student_list/?name=mark\">http://127.0.0.1:5000/student_list/?name=mark</a> :</p>\n<p>​\t <strong>表2-1 使用request</strong>的属性获取<strong>url</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解析值</th>\n<th>属性</th>\n<th>解析值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>path</td>\n<td>u‘/student_list/’</td>\n<td>base_url</td>\n<td>u’<a href=\"http://127.0.0.1:5000/student_list/\">http://127.0.0.1:5000/student_list/</a>’</td>\n</tr>\n<tr>\n<td>full_path</td>\n<td>u‘/student_list/?name=mark’</td>\n<td>url</td>\n<td>u’<a href=\"http://127.0.0.1:5000/student_list/?name=mark\">http://127.0.0.1:5000/student_list/?name=mark</a>’</td>\n</tr>\n<tr>\n<td>host</td>\n<td>u’127.0.0.1:5000’</td>\n<td>url_root</td>\n<td>u’<a href=\"http://127.0.0.1:5000/\">http://127.0.0.1:5000/</a>’</td>\n</tr>\n<tr>\n<td>host_url</td>\n<td>u’<a href=\"http://127.0.0.1:5000/\">http://127.0.0.1:5000/</a>’</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>request的解析结果如下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_list/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student_list</span>():</span></span><br><span class=\"line\">    print(request.path)          <span class=\"comment\"># 输出 /student_list/</span></span><br><span class=\"line\">    print(request.full_path)     <span class=\"comment\"># 输出 /student_list/?name=mark</span></span><br><span class=\"line\">    print(request.host)          <span class=\"comment\"># 输出 127.0.0.1:5000</span></span><br><span class=\"line\">    print(request.host_url)      <span class=\"comment\"># 输出 http://127.0.0.1:5000/</span></span><br><span class=\"line\">    print(request.base_url)      <span class=\"comment\"># 输出 http://127.0.0.1:5000/student_list/</span></span><br><span class=\"line\">    print(request.url)           <span class=\"comment\"># 输出 http://127.0.0.1:5000/student_list/?name=mark</span></span><br><span class=\"line\">    print(request.url_root)      <span class=\"comment\"># 输出 http://127.0.0.1:5000/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;request.urldemo测试&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3123-其他request对象常用的属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#3123-其他request对象常用的属性和方法\"></a> 3.1.2.3  其他request对象常用的属性和方法。</h4>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222230423-1742169751.png\" alt=\"\" /></p>\n<h3 id=\"313-get-和-post\"><a class=\"markdownIt-Anchor\" href=\"#313-get-和-post\"></a> 3.1.3 GET 和 POST：</h3>\n<h4 id=\"3131-常见的http方法\"><a class=\"markdownIt-Anchor\" href=\"#3131-常见的http方法\"></a> 3.1.3.1 常见的HTTP方法</h4>\n<table>\n<thead>\n<tr>\n<th>请求</th>\n<th>说明</th>\n<th>请求</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>获取服务器资源</td>\n<td>DELETE</td>\n<td>删除服务器资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>处理服务器资源</td>\n<td>PATCH</td>\n<td>在服务器更新资源（客户端提供改变的属性）</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>在服务器更新资源（客户端提供改变后的完整资源）</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>一般常用的请求为GET和POST</p>\n<h4 id=\"3132-get请求\"><a class=\"markdownIt-Anchor\" href=\"#3132-get请求\"></a> 3…1.3.2 <code>GET</code>请求</h4>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222432221-608582097.jpg\" alt=\"\" /></p>\n<p><strong>GET请求一般用于在服务器上获取资源，不会更改服务器的状态。</strong></p>\n<p><strong>GET示例</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)  </span><span class=\"comment\"># 不写methods也可以 默认就接收get请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo_get</span>():</span></span><br><span class=\"line\">    print(request.args.get(<span class=\"string\">&#x27;name&#x27;</span>))  <span class=\"comment\"># 输出 mark</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#123;&#125;请求&#x27;</span>.<span class=\"built_in\">format</span>(request.method)</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li>使用request.args属性获取get传来的参数</li>\n<li>@app.route(’/’, methods=[‘GET’]) 指定浏览器只能以GET方法访问服务端。</li>\n</ul>\n<hr />\n<h4 id=\"3133-post请求\"><a class=\"markdownIt-Anchor\" href=\"#3133-post请求\"></a> 3.1.3.3 <code>POST</code>请求：</h4>\n<p><strong>POST 请求: 会给服务器提交一些数据或者文件，会对服务器的状态产生影响。</strong></p>\n<p>在了解POST请求之前我们先了解一下render_termplate</p>\n<h5 id=\"31331-render_template的简单使用\"><a class=\"markdownIt-Anchor\" href=\"#31331-render_template的简单使用\"></a> 3.1.3.3.1 render_template的简单使用</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template</span><br></pre></td></tr></table></figure>\n<p>我们暂时只简单的理解render_template模块可以把html文件返回给浏览器并渲染。</p>\n<p>如：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222510737-1061015223.png\" alt=\"\" /></p>\n<p><strong><a href=\"http://server.py\">server.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span>,methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>)\t</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li>\n<p>render_template()会去flask根目录下的templates里面寻找文件，所以给的参数路径是相对路径。</p>\n</li>\n<li>\n<p>render_template()中放的文件路径是与templates文件夹相对的路径</p>\n</li>\n</ul>\n<p><strong>templates/login.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录界面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/login_request/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span></span><br><span class=\"line\">    用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>:</p>\n<ul>\n<li>\n<p>form标签的<code>action</code>指定的是跳转的页面。并且会自动拼接成http://127.0.0.1:5000/login_request/</p>\n<p>也就是本项目的: ip地址+端口+/login_request/</p>\n</li>\n<li>\n<p>form标签的<code>method</code>指定的是以什么方法请求服务端，此案例中请求的方法为POST方法。</p>\n</li>\n</ul>\n<p>访问127.0.0.1:5000/login/ 后如下图</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222556143-340794981.png\" alt=\"\" /></p>\n<h5 id=\"31332-post案例\"><a class=\"markdownIt-Anchor\" href=\"#31332-post案例\"></a> 3.1.3.3.2 POST案例：</h5>\n<p><strong>项目目录：</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222621609-1621658602.png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222621609-1621658602.png\" alt=\"img\" /></a></p>\n<p><strong><a href=\"http://server.py\">server.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login_request/&#x27;</span>,methods=[<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_request</span>():</span></span><br><span class=\"line\">    print(request.form.get(<span class=\"string\">&#x27;username&#x27;</span>))  <span class=\"comment\"># &#x27;mark&#x27;</span></span><br><span class=\"line\">    print(request.form.get(<span class=\"string\">&#x27;password&#x27;</span>))  <span class=\"comment\"># &#x27;123&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&#x27;username&#x27;</span>) == <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"keyword\">and</span> request.form.get(<span class=\"string\">&#x27;password&#x27;</span>) == <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span>,methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>  __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li>request.form是专门用来针对表单取数据的，在这里如果前端是以表单的形式提交的，我们可以使用request.form来取值</li>\n<li>@app.route() 中的 methods=[‘POST’] 代表只接收浏览器的POST请求</li>\n</ul>\n<p><strong>templates/login.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录界面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/login_request/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span></span><br><span class=\"line\">    用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222657669-1682091996.png\" alt=\"\" /></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222717747-459163041.png\" alt=\"\" /></p>\n<p>总体的逻辑是 :</p>\n<ol>\n<li>首先访问127.0.0.1:5000/login/，默认是get请求。</li>\n<li>然后<code>return render_template('login.html')</code> 返回给浏览器页面。</li>\n<li>然后填写内容点击提交，以post方式请求 <a href=\"http://127.0.0.1:5000/login_request/%E3%80%82\">http://127.0.0.1:5000/login_request/。</a></li>\n<li>然后进入<code>def login_request()</code>视图函数 进行逻辑判断返回成功与否。</li>\n</ol>\n<h3 id=\"314-一个视图函数同时可以接收get和post请求\"><a class=\"markdownIt-Anchor\" href=\"#314-一个视图函数同时可以接收get和post请求\"></a> 3.1.4 一个视图函数同时可以接收GET和POST请求</h3>\n<p>我们的案例和3.3.2案例完成的业务逻辑是一样的，相当于简化了3.3.2的案例，把两个视图函数合并到一起，利用<code>request.method</code>属性可以获取字符串格式的请求方法。来区分本次请求是GET还是POST</p>\n<p><strong><a href=\"http://server.py\">server.py</a></strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login_inner/&#x27;</span>,methods=[<span class=\"string\">&#x27;POST&#x27;</span>,<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_inner</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;GET&#x27;</span>: <span class=\"comment\">#判断本次请求是否为get请求</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&#x27;username&#x27;</span>) == <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"keyword\">and</span> request.form.get(<span class=\"string\">&#x27;password&#x27;</span>) == <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>  __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li><code>@app.route()</code>的<code>methods</code>方法 指定该视图函数接收浏览器传过来的请求方法，可以指定多个。</li>\n<li><code>request.method</code>获取字符串格式的请求方法</li>\n</ul>\n<p><strong>templates/login.html</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录界面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span>  </span><br><span class=\"line\">    用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其展示效果</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222809137-31438223.png\" alt=\"\" /></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222826146-1144854374.png\" alt=\"\" /></p>\n<h2 id=\"32-视图函数-和-视图类\"><a class=\"markdownIt-Anchor\" href=\"#32-视图函数-和-视图类\"></a> 3.2 视图函数 和 视图类</h2>\n<h3 id=\"321-视图函数\"><a class=\"markdownIt-Anchor\" href=\"#321-视图函数\"></a> 3.2.1 视图函数</h3>\n<h4 id=\"3211-endpoint-别名\"><a class=\"markdownIt-Anchor\" href=\"#3211-endpoint-别名\"></a> 3.2.1.1 endpoint 别名</h4>\n<p><code>endpint</code>参数是写在注册路由的装饰器中的一个参数，学名叫端点，我们可以理解为函数的别名。</p>\n<p>原来我们翻转视图函数的<code>url</code>的时候是直接通过是如函数的名字，如<code>url_for('函数名')</code>，</p>\n<p>现在我们可以指定一个<code>endpoint='fbv'</code>参数来进行翻转<code>url</code>。如果不指定endpoint,默认就以函数名作为端点名。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/fbvtest/&#x27;</span>,methods=[<span class=\"string\">&#x27;GET&#x27;</span>,<span class=\"string\">&#x27;POST&#x27;</span>],endpoint=<span class=\"string\">&#x27;fbv&#x27;</span></span>)  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fbvtest</span>():</span></span><br><span class=\"line\">    url_demo = url_for(<span class=\"string\">&#x27;fbv&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;利用视图函数别名翻转的url为：&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(url_demo)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223137828-581237383.png\" alt=\"\" /></p>\n<p><strong>注</strong>：</p>\n<ul>\n<li>利用<code>@app.route()</code> 的<code>endpoint='fbv'</code>参数可以自由指定端点名，url_for可以根据指定的端点名进行翻转。</li>\n</ul>\n<h4 id=\"3212-装饰器注册路由源码浅析\"><a class=\"markdownIt-Anchor\" href=\"#3212-装饰器注册路由源码浅析\"></a> 3.2.1.2 装饰器注册路由源码浅析</h4>\n<p><strong>（1）</strong> 首先写一个小视图函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注册装饰器的原理</span></span><br><span class=\"line\"><span class=\"comment\">#1 v = app.route(&#x27;/source_code_demo/&#x27;,endpoint=&#x27;source_code&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#2 v(source_code_demo)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/source_code_demo/&#x27;</span>,endpoint=<span class=\"string\">&#x27;source_code&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">source_code_demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;source_code_demo&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）</strong> 查看<code>app.route()</code>源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">route</span>(<span class=\"params\">self, rule, **options</span>):</span></span><br><span class=\"line\">   ...</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span>(<span class=\"params\">f</span>):</span></span><br><span class=\"line\">               endpoint = options.pop(<span class=\"string\">&#x27;endpoint&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">               self.add_url_rule(rule, endpoint, f, **options)</span><br><span class=\"line\">               <span class=\"keyword\">return</span> f</span><br><span class=\"line\">           <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<p>解析：</p>\n<ul>\n<li>，发现<code>route()</code>返回的是<code>decorator</code>函数地址，然后基于语法糖和装饰器的原理，decorator会加括号运行，像这样<code>decorator(source_code_demo)</code></li>\n<li><code>decorator</code>函数中首先取出<code>endpoint</code>，然后运行<code>self.add_url_rule(rule, endpoint, f, **options)</code></li>\n<li><strong>所以</strong> <code>self.add_url_rule(rule, endpoint, f, **options)</code><strong>就是注册路由的核心</strong></li>\n</ul>\n<p><strong>（3）</strong> 点进<code>self.add_url_rule(rule, endpoint, f, **options)</code>查看源码,</p>\n<p>再点进<code>_endpoint_from_view_func(view_func)</code>查看源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@setupmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_url_rule</span>(<span class=\"params\">self, rule, endpoint=<span class=\"literal\">None</span>, view_func=<span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   provide_automatic_options=<span class=\"literal\">None</span>, **options</span>):</span></span><br><span class=\"line\">      </span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> endpoint <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">          endpoint = _endpoint_from_view_func(view_func)</span><br><span class=\"line\">      options[<span class=\"string\">&#x27;endpoint&#x27;</span>] = endpoint</span><br><span class=\"line\">      methods = options.pop(<span class=\"string\">&#x27;methods&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># if the methods are not given and the view_func object knows its</span></span><br><span class=\"line\">      <span class=\"comment\"># methods we can use that instead.  If neither exists, we go with</span></span><br><span class=\"line\">      <span class=\"comment\"># a tuple of only ``GET`` as default.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> methods <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">          methods = <span class=\"built_in\">getattr</span>(view_func, <span class=\"string\">&#x27;methods&#x27;</span>, <span class=\"literal\">None</span>) <span class=\"keyword\">or</span> (<span class=\"string\">&#x27;GET&#x27;</span>,)</span><br><span class=\"line\">          </span><br><span class=\"line\">      ...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_endpoint_from_view_func</span>(<span class=\"params\">view_func</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Internal helper that returns the default endpoint for a given</span></span><br><span class=\"line\"><span class=\"string\">    function.  This always is the function name.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> view_func <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>, <span class=\"string\">&#x27;expected view func if endpoint is not provided.&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view_func.__name__</span><br></pre></td></tr></table></figure>\n<p>解析：</p>\n<ul>\n<li>由上述代码我们可以直到如果没有指定<code>endpoint</code>，我们调用了 <code>_endpoint_from_view_func（）</code></li>\n<li>观察<code>_endpoint_from_view_func</code>函数我们可以知道，返回了视图函数的名字给了<code>endpoint</code>赋值</li>\n<li><code>methos</code>没有指定会给methos赋默认值<code>('GET',)</code></li>\n</ul>\n<p><strong>小结：</strong></p>\n<ol>\n<li><code>self.add_url_rule(rule, endpoint, f, options)</code>就是注册路由的核心</li>\n<li>观察<code>_endpoint_from_view_func</code>函数我们可以知道，返回了视图函数的名字给了<code>endpoint</code>赋值</li>\n<li><code>methos</code>没有指定会给<code>methods</code>赋默认值<code>('GET',)</code></li>\n</ol>\n<h4 id=\"3213-另一种注册路由的方式-appadd_url_rule\"><a class=\"markdownIt-Anchor\" href=\"#3213-另一种注册路由的方式-appadd_url_rule\"></a> 3.2.1.3 另一种注册路由的方式 —— app.add_url_rule()</h4>\n<p>通过看上一个小节写的源码，现在我们知道了app.route() 的核心就是<code>self.add_url_rule(rule, endpoint, f, options)</code>就是注册路由的核心。所以我们可以直接使用<code>app.add_url_rule()</code>的方式来注册路由。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_url_test</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;实现了add_url方式注册路由&#x27;</span></span><br><span class=\"line\">                 <span class=\"comment\"># url                       端点                 函数地址</span></span><br><span class=\"line\">app.add_url_rule(<span class=\"string\">&#x27;/add_url_test/&#x27;</span>,endpoint=<span class=\"string\">&#x27;add_demo&#x27;</span>,view_func=add_url_test)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223409813-960893827.png\" alt=\"\" /></p>\n<h4 id=\"3214-视图函数中添加自定义装饰器\"><a class=\"markdownIt-Anchor\" href=\"#3214-视图函数中添加自定义装饰器\"></a> 3.2.1.4 视图函数中添加自定义装饰器</h4>\n<p>我们在平时的开发的过程中，很多需要权限验证的功能需要用到装饰器，下面的代码是如何在flask中实现一个装饰器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span>  wraps</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_verify</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(<span class=\"params\">func</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span>(<span class=\"params\">*args, **kwargs</span>):</span></span><br><span class=\"line\">        user_name = request.args.get(<span class=\"string\">&#x27;user&#x27;</span>)</span><br><span class=\"line\">        password = request.args.get(<span class=\"string\">&#x27;password&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user_name == <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"keyword\">and</span> password == <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args,**kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;请登录&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/my_info/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@login_verify</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_info</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;个人信息页面&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ol>\n<li>\n<p>装饰器一定要写在注册路由的下面，写在视图函数的上面。</p>\n</li>\n<li>\n<p>装饰器内部一定要使用<code>@wraps(func)</code>方法，用于保护被装饰函数的属性。</p>\n<p><em><strong>它能保留原有函数的名称和docstring</strong></em></p>\n</li>\n</ol>\n<h3 id=\"322-视图类\"><a class=\"markdownIt-Anchor\" href=\"#322-视图类\"></a> 3.2.2 视图类</h3>\n<h4 id=\"3221-视图类的基本写法\"><a class=\"markdownIt-Anchor\" href=\"#3221-视图类的基本写法\"></a> 3.2.2.1 视图类的基本写法</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, views, request, url_for</span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_verify</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(<span class=\"params\">func</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span>(<span class=\"params\">*args, **kwargs</span>):</span></span><br><span class=\"line\">        user_name = request.args.get(<span class=\"string\">&#x27;user&#x27;</span>)</span><br><span class=\"line\">        password = request.args.get(<span class=\"string\">&#x27;password&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user_name == <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"keyword\">and</span> password == <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args,**kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;请登录&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CBVTest</span>(<span class=\"params\">views.MethodView</span>):</span></span><br><span class=\"line\">    methods = [<span class=\"string\">&#x27;GET&#x27;</span>,<span class=\"string\">&#x27;POST&#x27;</span>]  <span class=\"comment\"># 指定可以接收的方法有什么,可传list(),set()类型</span></span><br><span class=\"line\">    decorators = [login_verify,]  <span class=\"comment\"># 指定自定义的装饰器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        print(url_for(<span class=\"string\">&#x27;cbvtest&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;cbv_get&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;cbv_post&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">app.add_url_rule(<span class=\"string\">&#x27;/cbvtest&#x27;</span>,view_func=CBVTest.as_view(name=<span class=\"string\">&#x27;cbvtest&#x27;</span>),endpoint=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>讲解：</p>\n<ol>\n<li>\n<p>首先从flask中导入 <code>views</code></p>\n</li>\n<li>\n<p>写一个类一定要继承 <code>views.MethodView</code></p>\n</li>\n<li>\n<p>在类中写<code>methods = ['GET','POST']</code> 可以指定可接受的请求类型</p>\n</li>\n<li>\n<p>在类中写<code>decorators = [login_verify,]</code>可以指定装饰器，第一个装饰器是最里层函数依次往后包裹</p>\n</li>\n<li>\n<p>在类中写<code>def get(self):</code>用于获取get请求</p>\n</li>\n<li>\n<p>在类中写<code>def post(self):</code>用于获取post请求</p>\n</li>\n<li>\n<p>添加路由的方法使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.add_url_rule(<span class=\"string\">&#x27;路由&#x27;</span>,view_func=CBVTest.as_view(name=<span class=\"string\">&#x27;自定义一个端点名字&#x27;</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其原理是<code>CBVTest.as_view(name='自定义一个端点名字')</code>会返回一个函数，name是为这个函数命的名字，可以通过这个函数进行分发请求等操作。</p>\n<h4 id=\"323-详解注册路由的参数\"><a class=\"markdownIt-Anchor\" href=\"#323-详解注册路由的参数\"></a> 3.2.3 详解注册路由的参数</h4>\n<h4 id=\"常用的参数\"><a class=\"markdownIt-Anchor\" href=\"#常用的参数\"></a> 常用的参数</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route和app.add_url_rule参数:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">rule, URL规则</span><br><span class=\"line\">view_func, 视图函数名称</span><br><span class=\"line\">endpoint = <span class=\"literal\">None</span>, 名称，用于反向生成URL，即： url_for(<span class=\"string\">&#x27;名称&#x27;</span>)</span><br><span class=\"line\">methods = <span class=\"literal\">None</span>, 允许的请求方式，如：[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"不常用的参数\"><a class=\"markdownIt-Anchor\" href=\"#不常用的参数\"></a> 不常用的参数</h4>\n<p><strong>（1）</strong> 对URL最后的 / 符号是否严格要求 <code>strict_slashes = False</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strict_slashes = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    @app.route(&#x27;/index&#x27;, strict_slashes=False)</span></span><br><span class=\"line\"><span class=\"string\">    #访问http://www.xx.com/index/ 或http://www.xx.com/index均可</span></span><br><span class=\"line\"><span class=\"string\">    @app.route(&#x27;/index&#x27;, strict_slashes=True)</span></span><br><span class=\"line\"><span class=\"string\">    #仅访问http://www.xx.com/index</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）</strong> 重定向到指定地址<code>redirect_to=“ ”</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>,redirect_to=<span class=\"string\">&#x27;/home/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;根路径&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/home/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">admin_demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;home路径&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>（3）</strong> 为函数提供默认参数值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults = <span class=\"literal\">None</span>, 默认值, 当URL中无参数，函数需要参数时，使用defaults = &#123;<span class=\"string\">&#x27;k&#x27;</span>: <span class=\"string\">&#x27;v&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（4）</strong> 子域名设置<code>subdomain=“ ”</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,url_for</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">先在hosts设置域名解析(就是在本机的hosts文件上编辑上域名对应ip的关系) </span></span><br><span class=\"line\"><span class=\"string\">域名解析会先解析本地如果没有再解析dns服务器</span></span><br><span class=\"line\"><span class=\"string\">C:\\Windows\\System32\\drivers\\etc\\hosts</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1 mark.com</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1 admin.mark.com</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SERVER_NAME&#x27;</span>] = <span class=\"string\">&#x27;mark.com:5000&#x27;</span> <span class=\"comment\"># 这个代表访问这个域名的时候要访问5000端口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;设置域名成功&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/admin_demo/&quot;</span>,subdomain=<span class=\"string\">&#x27;admin&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">admin_demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;设置子域名成功&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">在浏览器中访问主域名</span></span><br><span class=\"line\"><span class=\"string\">mark.com:5000/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">在浏览器中访问子域名</span></span><br><span class=\"line\"><span class=\"string\">admin.mark.com:5000/admin_demo/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">注意：后面跟的path路径部分正常写</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,port=<span class=\"number\">5000</span>) <span class=\"comment\"># 测试服务器不稳定，尽量手动制定ip和端口</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223624037-1211906551.png\" alt=\"\" /></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223643974-105951200.png\" alt=\"\" /></p>\n","more":"<h2 id=\"31-http请求\"><a class=\"markdownIt-Anchor\" href=\"#31-http请求\"></a> 3.1 HTTP请求</h2>\n<h3 id=\"311-请求报文-和-响应报文\"><a class=\"markdownIt-Anchor\" href=\"#311-请求报文-和-响应报文\"></a> 3.1.1 请求报文 和 响应报文</h3>\n<ul>\n<li>请求报文：请求时浏览器发送的数据称为请求报文</li>\n<li>响应报文：服务器收到了请求返回给浏览器的数据称为响应报文</li>\n</ul>\n<p>报文中的GET请求 和 POST请求</p>\n<ul>\n<li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如<code>EditBook?name=test1&amp;id=123456</code></li>\n<li>POST方法是把提交的数据放在HTTP包的请求体中.</li>\n<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制）</li>\n<li>POST方法提交的数据没有限制。</li>\n<li>GET与POST请求在服务端获取请求数据方式不同。</li>\n</ul>\n<p>报文示例：</p>\n<h2 id=\"-code0-\"><a class=\"markdownIt-Anchor\" href=\"#-code0-\"></a> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">GET请求报文</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 请求首行</span></span><br><span class=\"line\">GET / HTTP/<span class=\"number\">1.1</span>\\r\\n</span><br><span class=\"line\"><span class=\"comment\"># get请求后面的参数</span></span><br><span class=\"line\">GET /?name=lqz&amp;age=18 HTTP/1.1\\r\\n</span><br><span class=\"line\"><span class=\"comment\"># 请求头</span></span><br><span class=\"line\">Host: <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8008</span>\\r\\n</span><br><span class=\"line\">Connection: keep-alive\\r\\n</span><br><span class=\"line\">Cache-Control: <span class=\"built_in\">max</span>-age=<span class=\"number\">0</span>\\r\\n</span><br><span class=\"line\">Upgrade-Insecure-Requests: <span class=\"number\">1</span>\\r\\n</span><br><span class=\"line\">User-Agent: Mozilla/<span class=\"number\">5.0</span> (Windows NT <span class=\"number\">6.1</span>; Win64; x64) AppleWebKit/<span class=\"number\">537.36</span> (KHTML, like Gecko) Chrome/<span class=\"number\">65.0</span><span class=\"number\">.3325</span><span class=\"number\">.181</span> Safari/<span class=\"number\">537.36</span>\\r\\n</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=<span class=\"number\">0.9</span>,image/webp,image/apng,*/*;q=<span class=\"number\">0.8</span>\\r\\nAccept-Encoding: gzip, deflate, br\\r\\n</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=<span class=\"number\">0.9</span>\\r\\n</span><br><span class=\"line\">Cookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\\r\\n\\r\\n<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\"># 请求体（get请求，请求体为空）    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">POST请求报文</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"># 请求首行</span></span><br><span class=\"line\"><span class=\"string\">POST /?name=lqz&amp;age=18 HTTP/1.1\\r\\n</span></span><br><span class=\"line\"><span class=\"string\"># 请求头</span></span><br><span class=\"line\"><span class=\"string\">Host: 127.0.0.1:8008\\r\\nConnection: keep-alive\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Content-Length: 21\\r\\nCache-Control: max-age=0\\r\\n      </span></span><br><span class=\"line\"><span class=\"string\">Origin: http://127.0.0.1:8008\\r\\nUpgrade-Insecure-Requests: 1\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Content-Type: application/x-www-form-urlencoded\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36\\r\\n     \t\t\t\t\t   Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\\r\\nReferer: http://127.0.0.1:8008/?name=lqz&amp;age=18\\r\\n</span></span><br><span class=\"line\"><span class=\"string\">Accept-Encoding: gzip, deflate, br\\r\\nAccept-Language: zh-CN,zh;q=0.9\\r\\nCookie: csrftoken=7xx6BxQDJ6KB0PM7qS8uTA892ACtooNbnnF4LDwlYk1Y7S7nTS81FBqwruizHsxF\\r\\n\\r\\n</span></span><br><span class=\"line\"><span class=\"string\"># 请求体</span></span><br><span class=\"line\"><span class=\"string\">name=lqz&amp;password=123&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br></pre></td></tr></table></figure></h2>\n<h3 id=\"312-request对象\"><a class=\"markdownIt-Anchor\" href=\"#312-request对象\"></a> 3.1.2 request对象</h3>\n<p>request对象封装解析了请求报文中的数据，其大部分功能是由依赖包werkzeug完成的，并且<strong>每个request对象都是线程隔离的，保证了数据的安全性</strong>。</p>\n<h4 id=\"3121-request对象常用方法\"><a class=\"markdownIt-Anchor\" href=\"#3121-request对象常用方法\"></a> 3.1.2.1 request对象常用方法</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</span><br></pre></td></tr></table></figure>\n<h4 id=\"3122-使用request属性获取url\"><a class=\"markdownIt-Anchor\" href=\"#3122-使用request属性获取url\"></a> 3.1.2.2 使用request属性获取url</h4>\n<p>​\t访问: <a href=\"http://127.0.0.1:5000/student_list/?name=mark\">http://127.0.0.1:5000/student_list/?name=mark</a> :</p>\n<p>​\t <strong>表2-1 使用request</strong>的属性获取<strong>url</strong></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解析值</th>\n<th>属性</th>\n<th>解析值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>path</td>\n<td>u‘/student_list/’</td>\n<td>base_url</td>\n<td>u’<a href=\"http://127.0.0.1:5000/student_list/\">http://127.0.0.1:5000/student_list/</a>’</td>\n</tr>\n<tr>\n<td>full_path</td>\n<td>u‘/student_list/?name=mark’</td>\n<td>url</td>\n<td>u’<a href=\"http://127.0.0.1:5000/student_list/?name=mark\">http://127.0.0.1:5000/student_list/?name=mark</a>’</td>\n</tr>\n<tr>\n<td>host</td>\n<td>u’127.0.0.1:5000’</td>\n<td>url_root</td>\n<td>u’<a href=\"http://127.0.0.1:5000/\">http://127.0.0.1:5000/</a>’</td>\n</tr>\n<tr>\n<td>host_url</td>\n<td>u’<a href=\"http://127.0.0.1:5000/\">http://127.0.0.1:5000/</a>’</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>request的解析结果如下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/student_list/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student_list</span>():</span></span><br><span class=\"line\">    print(request.path)          <span class=\"comment\"># 输出 /student_list/</span></span><br><span class=\"line\">    print(request.full_path)     <span class=\"comment\"># 输出 /student_list/?name=mark</span></span><br><span class=\"line\">    print(request.host)          <span class=\"comment\"># 输出 127.0.0.1:5000</span></span><br><span class=\"line\">    print(request.host_url)      <span class=\"comment\"># 输出 http://127.0.0.1:5000/</span></span><br><span class=\"line\">    print(request.base_url)      <span class=\"comment\"># 输出 http://127.0.0.1:5000/student_list/</span></span><br><span class=\"line\">    print(request.url)           <span class=\"comment\"># 输出 http://127.0.0.1:5000/student_list/?name=mark</span></span><br><span class=\"line\">    print(request.url_root)      <span class=\"comment\"># 输出 http://127.0.0.1:5000/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;request.urldemo测试&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3123-其他request对象常用的属性和方法\"><a class=\"markdownIt-Anchor\" href=\"#3123-其他request对象常用的属性和方法\"></a> 3.1.2.3  其他request对象常用的属性和方法。</h4>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222230423-1742169751.png\" alt=\"\" /></p>\n<h3 id=\"313-get-和-post\"><a class=\"markdownIt-Anchor\" href=\"#313-get-和-post\"></a> 3.1.3 GET 和 POST：</h3>\n<h4 id=\"3131-常见的http方法\"><a class=\"markdownIt-Anchor\" href=\"#3131-常见的http方法\"></a> 3.1.3.1 常见的HTTP方法</h4>\n<table>\n<thead>\n<tr>\n<th>请求</th>\n<th>说明</th>\n<th>请求</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>获取服务器资源</td>\n<td>DELETE</td>\n<td>删除服务器资源</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>处理服务器资源</td>\n<td>PATCH</td>\n<td>在服务器更新资源（客户端提供改变的属性）</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>在服务器更新资源（客户端提供改变后的完整资源）</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>一般常用的请求为GET和POST</p>\n<h4 id=\"3132-get请求\"><a class=\"markdownIt-Anchor\" href=\"#3132-get请求\"></a> 3…1.3.2 <code>GET</code>请求</h4>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222432221-608582097.jpg\" alt=\"\" /></p>\n<p><strong>GET请求一般用于在服务器上获取资源，不会更改服务器的状态。</strong></p>\n<p><strong>GET示例</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span>, methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)  </span><span class=\"comment\"># 不写methods也可以 默认就接收get请求</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">demo_get</span>():</span></span><br><span class=\"line\">    print(request.args.get(<span class=\"string\">&#x27;name&#x27;</span>))  <span class=\"comment\"># 输出 mark</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#123;&#125;请求&#x27;</span>.<span class=\"built_in\">format</span>(request.method)</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li>使用request.args属性获取get传来的参数</li>\n<li>@app.route(’/’, methods=[‘GET’]) 指定浏览器只能以GET方法访问服务端。</li>\n</ul>\n<hr />\n<h4 id=\"3133-post请求\"><a class=\"markdownIt-Anchor\" href=\"#3133-post请求\"></a> 3.1.3.3 <code>POST</code>请求：</h4>\n<p><strong>POST 请求: 会给服务器提交一些数据或者文件，会对服务器的状态产生影响。</strong></p>\n<p>在了解POST请求之前我们先了解一下render_termplate</p>\n<h5 id=\"31331-render_template的简单使用\"><a class=\"markdownIt-Anchor\" href=\"#31331-render_template的简单使用\"></a> 3.1.3.3.1 render_template的简单使用</h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template</span><br></pre></td></tr></table></figure>\n<p>我们暂时只简单的理解render_template模块可以把html文件返回给浏览器并渲染。</p>\n<p>如：</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222510737-1061015223.png\" alt=\"\" /></p>\n<p><strong><a href=\"http://server.py\">server.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span>,methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>)\t</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li>\n<p>render_template()会去flask根目录下的templates里面寻找文件，所以给的参数路径是相对路径。</p>\n</li>\n<li>\n<p>render_template()中放的文件路径是与templates文件夹相对的路径</p>\n</li>\n</ul>\n<p><strong>templates/login.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录界面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/login_request/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span></span><br><span class=\"line\">    用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>:</p>\n<ul>\n<li>\n<p>form标签的<code>action</code>指定的是跳转的页面。并且会自动拼接成http://127.0.0.1:5000/login_request/</p>\n<p>也就是本项目的: ip地址+端口+/login_request/</p>\n</li>\n<li>\n<p>form标签的<code>method</code>指定的是以什么方法请求服务端，此案例中请求的方法为POST方法。</p>\n</li>\n</ul>\n<p>访问127.0.0.1:5000/login/ 后如下图</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222556143-340794981.png\" alt=\"\" /></p>\n<h5 id=\"31332-post案例\"><a class=\"markdownIt-Anchor\" href=\"#31332-post案例\"></a> 3.1.3.3.2 POST案例：</h5>\n<p><strong>项目目录：</strong></p>\n<p><a href=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222621609-1621658602.png\"><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222621609-1621658602.png\" alt=\"img\" /></a></p>\n<p><strong><a href=\"http://server.py\">server.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login_request/&#x27;</span>,methods=[<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_request</span>():</span></span><br><span class=\"line\">    print(request.form.get(<span class=\"string\">&#x27;username&#x27;</span>))  <span class=\"comment\"># &#x27;mark&#x27;</span></span><br><span class=\"line\">    print(request.form.get(<span class=\"string\">&#x27;password&#x27;</span>))  <span class=\"comment\"># &#x27;123&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&#x27;username&#x27;</span>) == <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"keyword\">and</span> request.form.get(<span class=\"string\">&#x27;password&#x27;</span>) == <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login/&#x27;</span>,methods=[<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>  __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li>request.form是专门用来针对表单取数据的，在这里如果前端是以表单的形式提交的，我们可以使用request.form来取值</li>\n<li>@app.route() 中的 methods=[‘POST’] 代表只接收浏览器的POST请求</li>\n</ul>\n<p><strong>templates/login.html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录界面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/login_request/&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span></span><br><span class=\"line\">    用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222657669-1682091996.png\" alt=\"\" /></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222717747-459163041.png\" alt=\"\" /></p>\n<p>总体的逻辑是 :</p>\n<ol>\n<li>首先访问127.0.0.1:5000/login/，默认是get请求。</li>\n<li>然后<code>return render_template('login.html')</code> 返回给浏览器页面。</li>\n<li>然后填写内容点击提交，以post方式请求 <a href=\"http://127.0.0.1:5000/login_request/%E3%80%82\">http://127.0.0.1:5000/login_request/。</a></li>\n<li>然后进入<code>def login_request()</code>视图函数 进行逻辑判断返回成功与否。</li>\n</ol>\n<h3 id=\"314-一个视图函数同时可以接收get和post请求\"><a class=\"markdownIt-Anchor\" href=\"#314-一个视图函数同时可以接收get和post请求\"></a> 3.1.4 一个视图函数同时可以接收GET和POST请求</h3>\n<p>我们的案例和3.3.2案例完成的业务逻辑是一样的，相当于简化了3.3.2的案例，把两个视图函数合并到一起，利用<code>request.method</code>属性可以获取字符串格式的请求方法。来区分本次请求是GET还是POST</p>\n<p><strong><a href=\"http://server.py\">server.py</a></strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/login_inner/&#x27;</span>,methods=[<span class=\"string\">&#x27;POST&#x27;</span>,<span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_inner</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;GET&#x27;</span>: <span class=\"comment\">#判断本次请求是否为get请求</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;login.html&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.form.get(<span class=\"string\">&#x27;username&#x27;</span>) == <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"keyword\">and</span> request.form.get(<span class=\"string\">&#x27;password&#x27;</span>) == <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;error&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>  __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ul>\n<li><code>@app.route()</code>的<code>methods</code>方法 指定该视图函数接收浏览器传过来的请求方法，可以指定多个。</li>\n<li><code>request.method</code>获取字符串格式的请求方法</li>\n</ul>\n<p><strong>templates/login.html</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>登录界面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span>  </span><br><span class=\"line\">    用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span>&gt;</span></span><br><span class=\"line\">    密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其展示效果</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222809137-31438223.png\" alt=\"\" /></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009222826146-1144854374.png\" alt=\"\" /></p>\n<h2 id=\"32-视图函数-和-视图类\"><a class=\"markdownIt-Anchor\" href=\"#32-视图函数-和-视图类\"></a> 3.2 视图函数 和 视图类</h2>\n<h3 id=\"321-视图函数\"><a class=\"markdownIt-Anchor\" href=\"#321-视图函数\"></a> 3.2.1 视图函数</h3>\n<h4 id=\"3211-endpoint-别名\"><a class=\"markdownIt-Anchor\" href=\"#3211-endpoint-别名\"></a> 3.2.1.1 endpoint 别名</h4>\n<p><code>endpint</code>参数是写在注册路由的装饰器中的一个参数，学名叫端点，我们可以理解为函数的别名。</p>\n<p>原来我们翻转视图函数的<code>url</code>的时候是直接通过是如函数的名字，如<code>url_for('函数名')</code>，</p>\n<p>现在我们可以指定一个<code>endpoint='fbv'</code>参数来进行翻转<code>url</code>。如果不指定endpoint,默认就以函数名作为端点名。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/fbvtest/&#x27;</span>,methods=[<span class=\"string\">&#x27;GET&#x27;</span>,<span class=\"string\">&#x27;POST&#x27;</span>],endpoint=<span class=\"string\">&#x27;fbv&#x27;</span></span>)  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fbvtest</span>():</span></span><br><span class=\"line\">    url_demo = url_for(<span class=\"string\">&#x27;fbv&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;利用视图函数别名翻转的url为：&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(url_demo)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223137828-581237383.png\" alt=\"\" /></p>\n<p><strong>注</strong>：</p>\n<ul>\n<li>利用<code>@app.route()</code> 的<code>endpoint='fbv'</code>参数可以自由指定端点名，url_for可以根据指定的端点名进行翻转。</li>\n</ul>\n<h4 id=\"3212-装饰器注册路由源码浅析\"><a class=\"markdownIt-Anchor\" href=\"#3212-装饰器注册路由源码浅析\"></a> 3.2.1.2 装饰器注册路由源码浅析</h4>\n<p><strong>（1）</strong> 首先写一个小视图函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#注册装饰器的原理</span></span><br><span class=\"line\"><span class=\"comment\">#1 v = app.route(&#x27;/source_code_demo/&#x27;,endpoint=&#x27;source_code&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#2 v(source_code_demo)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/source_code_demo/&#x27;</span>,endpoint=<span class=\"string\">&#x27;source_code&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">source_code_demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;source_code_demo&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）</strong> 查看<code>app.route()</code>源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">route</span>(<span class=\"params\">self, rule, **options</span>):</span></span><br><span class=\"line\">   ...</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span>(<span class=\"params\">f</span>):</span></span><br><span class=\"line\">               endpoint = options.pop(<span class=\"string\">&#x27;endpoint&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\">               self.add_url_rule(rule, endpoint, f, **options)</span><br><span class=\"line\">               <span class=\"keyword\">return</span> f</span><br><span class=\"line\">           <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<p>解析：</p>\n<ul>\n<li>，发现<code>route()</code>返回的是<code>decorator</code>函数地址，然后基于语法糖和装饰器的原理，decorator会加括号运行，像这样<code>decorator(source_code_demo)</code></li>\n<li><code>decorator</code>函数中首先取出<code>endpoint</code>，然后运行<code>self.add_url_rule(rule, endpoint, f, **options)</code></li>\n<li><strong>所以</strong> <code>self.add_url_rule(rule, endpoint, f, **options)</code><strong>就是注册路由的核心</strong></li>\n</ul>\n<p><strong>（3）</strong> 点进<code>self.add_url_rule(rule, endpoint, f, **options)</code>查看源码,</p>\n<p>再点进<code>_endpoint_from_view_func(view_func)</code>查看源码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@setupmethod</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_url_rule</span>(<span class=\"params\">self, rule, endpoint=<span class=\"literal\">None</span>, view_func=<span class=\"literal\">None</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   provide_automatic_options=<span class=\"literal\">None</span>, **options</span>):</span></span><br><span class=\"line\">      </span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">\t   <span class=\"keyword\">if</span> endpoint <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">          endpoint = _endpoint_from_view_func(view_func)</span><br><span class=\"line\">      options[<span class=\"string\">&#x27;endpoint&#x27;</span>] = endpoint</span><br><span class=\"line\">      methods = options.pop(<span class=\"string\">&#x27;methods&#x27;</span>, <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># if the methods are not given and the view_func object knows its</span></span><br><span class=\"line\">      <span class=\"comment\"># methods we can use that instead.  If neither exists, we go with</span></span><br><span class=\"line\">      <span class=\"comment\"># a tuple of only ``GET`` as default.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> methods <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">          methods = <span class=\"built_in\">getattr</span>(view_func, <span class=\"string\">&#x27;methods&#x27;</span>, <span class=\"literal\">None</span>) <span class=\"keyword\">or</span> (<span class=\"string\">&#x27;GET&#x27;</span>,)</span><br><span class=\"line\">          </span><br><span class=\"line\">      ...</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_endpoint_from_view_func</span>(<span class=\"params\">view_func</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Internal helper that returns the default endpoint for a given</span></span><br><span class=\"line\"><span class=\"string\">    function.  This always is the function name.</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> view_func <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>, <span class=\"string\">&#x27;expected view func if endpoint is not provided.&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view_func.__name__</span><br></pre></td></tr></table></figure>\n<p>解析：</p>\n<ul>\n<li>由上述代码我们可以直到如果没有指定<code>endpoint</code>，我们调用了 <code>_endpoint_from_view_func（）</code></li>\n<li>观察<code>_endpoint_from_view_func</code>函数我们可以知道，返回了视图函数的名字给了<code>endpoint</code>赋值</li>\n<li><code>methos</code>没有指定会给methos赋默认值<code>('GET',)</code></li>\n</ul>\n<p><strong>小结：</strong></p>\n<ol>\n<li><code>self.add_url_rule(rule, endpoint, f, options)</code>就是注册路由的核心</li>\n<li>观察<code>_endpoint_from_view_func</code>函数我们可以知道，返回了视图函数的名字给了<code>endpoint</code>赋值</li>\n<li><code>methos</code>没有指定会给<code>methods</code>赋默认值<code>('GET',)</code></li>\n</ol>\n<h4 id=\"3213-另一种注册路由的方式-appadd_url_rule\"><a class=\"markdownIt-Anchor\" href=\"#3213-另一种注册路由的方式-appadd_url_rule\"></a> 3.2.1.3 另一种注册路由的方式 —— app.add_url_rule()</h4>\n<p>通过看上一个小节写的源码，现在我们知道了app.route() 的核心就是<code>self.add_url_rule(rule, endpoint, f, options)</code>就是注册路由的核心。所以我们可以直接使用<code>app.add_url_rule()</code>的方式来注册路由。</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_url_test</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;实现了add_url方式注册路由&#x27;</span></span><br><span class=\"line\">                 <span class=\"comment\"># url                       端点                 函数地址</span></span><br><span class=\"line\">app.add_url_rule(<span class=\"string\">&#x27;/add_url_test/&#x27;</span>,endpoint=<span class=\"string\">&#x27;add_demo&#x27;</span>,view_func=add_url_test)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223409813-960893827.png\" alt=\"\" /></p>\n<h4 id=\"3214-视图函数中添加自定义装饰器\"><a class=\"markdownIt-Anchor\" href=\"#3214-视图函数中添加自定义装饰器\"></a> 3.2.1.4 视图函数中添加自定义装饰器</h4>\n<p>我们在平时的开发的过程中，很多需要权限验证的功能需要用到装饰器，下面的代码是如何在flask中实现一个装饰器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request</span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span>  wraps</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_verify</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(<span class=\"params\">func</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span>(<span class=\"params\">*args, **kwargs</span>):</span></span><br><span class=\"line\">        user_name = request.args.get(<span class=\"string\">&#x27;user&#x27;</span>)</span><br><span class=\"line\">        password = request.args.get(<span class=\"string\">&#x27;password&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user_name == <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"keyword\">and</span> password == <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args,**kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;请登录&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Hello World!&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/my_info/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"meta\">@login_verify</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_info</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;个人信息页面&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注</strong>：</p>\n<ol>\n<li>\n<p>装饰器一定要写在注册路由的下面，写在视图函数的上面。</p>\n</li>\n<li>\n<p>装饰器内部一定要使用<code>@wraps(func)</code>方法，用于保护被装饰函数的属性。</p>\n<p><em><strong>它能保留原有函数的名称和docstring</strong></em></p>\n</li>\n</ol>\n<h3 id=\"322-视图类\"><a class=\"markdownIt-Anchor\" href=\"#322-视图类\"></a> 3.2.2 视图类</h3>\n<h4 id=\"3221-视图类的基本写法\"><a class=\"markdownIt-Anchor\" href=\"#3221-视图类的基本写法\"></a> 3.2.2.1 视图类的基本写法</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, views, request, url_for</span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> wraps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">login_verify</span>(<span class=\"params\">func</span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @wraps(<span class=\"params\">func</span>)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span>(<span class=\"params\">*args, **kwargs</span>):</span></span><br><span class=\"line\">        user_name = request.args.get(<span class=\"string\">&#x27;user&#x27;</span>)</span><br><span class=\"line\">        password = request.args.get(<span class=\"string\">&#x27;password&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> user_name == <span class=\"string\">&#x27;mark&#x27;</span> <span class=\"keyword\">and</span> password == <span class=\"string\">&#x27;123&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args,**kwargs)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;请登录&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CBVTest</span>(<span class=\"params\">views.MethodView</span>):</span></span><br><span class=\"line\">    methods = [<span class=\"string\">&#x27;GET&#x27;</span>,<span class=\"string\">&#x27;POST&#x27;</span>]  <span class=\"comment\"># 指定可以接收的方法有什么,可传list(),set()类型</span></span><br><span class=\"line\">    decorators = [login_verify,]  <span class=\"comment\"># 指定自定义的装饰器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        print(url_for(<span class=\"string\">&#x27;cbvtest&#x27;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;cbv_get&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;cbv_post&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">app.add_url_rule(<span class=\"string\">&#x27;/cbvtest&#x27;</span>,view_func=CBVTest.as_view(name=<span class=\"string\">&#x27;cbvtest&#x27;</span>),endpoint=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<p>讲解：</p>\n<ol>\n<li>\n<p>首先从flask中导入 <code>views</code></p>\n</li>\n<li>\n<p>写一个类一定要继承 <code>views.MethodView</code></p>\n</li>\n<li>\n<p>在类中写<code>methods = ['GET','POST']</code> 可以指定可接受的请求类型</p>\n</li>\n<li>\n<p>在类中写<code>decorators = [login_verify,]</code>可以指定装饰器，第一个装饰器是最里层函数依次往后包裹</p>\n</li>\n<li>\n<p>在类中写<code>def get(self):</code>用于获取get请求</p>\n</li>\n<li>\n<p>在类中写<code>def post(self):</code>用于获取post请求</p>\n</li>\n<li>\n<p>添加路由的方法使用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.add_url_rule(<span class=\"string\">&#x27;路由&#x27;</span>,view_func=CBVTest.as_view(name=<span class=\"string\">&#x27;自定义一个端点名字&#x27;</span>))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其原理是<code>CBVTest.as_view(name='自定义一个端点名字')</code>会返回一个函数，name是为这个函数命的名字，可以通过这个函数进行分发请求等操作。</p>\n<h4 id=\"323-详解注册路由的参数\"><a class=\"markdownIt-Anchor\" href=\"#323-详解注册路由的参数\"></a> 3.2.3 详解注册路由的参数</h4>\n<h4 id=\"常用的参数\"><a class=\"markdownIt-Anchor\" href=\"#常用的参数\"></a> 常用的参数</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route和app.add_url_rule参数:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">rule, URL规则</span><br><span class=\"line\">view_func, 视图函数名称</span><br><span class=\"line\">endpoint = <span class=\"literal\">None</span>, 名称，用于反向生成URL，即： url_for(<span class=\"string\">&#x27;名称&#x27;</span>)</span><br><span class=\"line\">methods = <span class=\"literal\">None</span>, 允许的请求方式，如：[<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;POST&quot;</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"不常用的参数\"><a class=\"markdownIt-Anchor\" href=\"#不常用的参数\"></a> 不常用的参数</h4>\n<p><strong>（1）</strong> 对URL最后的 / 符号是否严格要求 <code>strict_slashes = False</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strict_slashes = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    @app.route(&#x27;/index&#x27;, strict_slashes=False)</span></span><br><span class=\"line\"><span class=\"string\">    #访问http://www.xx.com/index/ 或http://www.xx.com/index均可</span></span><br><span class=\"line\"><span class=\"string\">    @app.route(&#x27;/index&#x27;, strict_slashes=True)</span></span><br><span class=\"line\"><span class=\"string\">    #仅访问http://www.xx.com/index</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>（2）</strong> 重定向到指定地址<code>redirect_to=“ ”</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span>,redirect_to=<span class=\"string\">&#x27;/home/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;根路径&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/home/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">admin_demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;home路径&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><strong>（3）</strong> 为函数提供默认参数值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults = <span class=\"literal\">None</span>, 默认值, 当URL中无参数，函数需要参数时，使用defaults = &#123;<span class=\"string\">&#x27;k&#x27;</span>: <span class=\"string\">&#x27;v&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（4）</strong> 子域名设置<code>subdomain=“ ”</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,url_for</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.debug = <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">先在hosts设置域名解析(就是在本机的hosts文件上编辑上域名对应ip的关系) </span></span><br><span class=\"line\"><span class=\"string\">域名解析会先解析本地如果没有再解析dns服务器</span></span><br><span class=\"line\"><span class=\"string\">C:\\Windows\\System32\\drivers\\etc\\hosts</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1 mark.com</span></span><br><span class=\"line\"><span class=\"string\">127.0.0.1 admin.mark.com</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SERVER_NAME&#x27;</span>] = <span class=\"string\">&#x27;mark.com:5000&#x27;</span> <span class=\"comment\"># 这个代表访问这个域名的时候要访问5000端口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;设置域名成功&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&quot;/admin_demo/&quot;</span>,subdomain=<span class=\"string\">&#x27;admin&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">admin_demo</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;设置子域名成功&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">在浏览器中访问主域名</span></span><br><span class=\"line\"><span class=\"string\">mark.com:5000/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">在浏览器中访问子域名</span></span><br><span class=\"line\"><span class=\"string\">admin.mark.com:5000/admin_demo/</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">注意：后面跟的path路径部分正常写</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,port=<span class=\"number\">5000</span>) <span class=\"comment\"># 测试服务器不稳定，尽量手动制定ip和端口</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223624037-1211906551.png\" alt=\"\" /></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1825659/201910/1825659-20191009223643974-105951200.png\" alt=\"\" /></p>\n","categories":[{"name":"flask","path":"api/categories/flask.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"flask","path":"api/tags/flask.json"}]}