{"title":"2 数据结构","slug":"算法_数据结构/2.数据结构","date":"2021-01-18T14:44:52.897Z","updated":"2021-01-18T15:17:49.043Z","comments":true,"path":"api/articles/算法_数据结构/2.数据结构.json","excerpt":null,"covers":["C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608538723475.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608567970517.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608568034654.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608617105287.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608618073618.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608627996382.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608818886301.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608819036458.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820256066.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820355406.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820375086.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820823435.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608821122628.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820982239.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608822078563.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608880133960.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880204461.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880252238.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880279154.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880298883.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880392429.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880555243.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880440395.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880477738.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608882204198.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608883544925.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1609047881922.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609052341605.png","C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1609055873038.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609344914649.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609344929808.png"],"content":"<h2 id=\"数据结构介绍\"><a class=\"markdownIt-Anchor\" href=\"#数据结构介绍\"></a> 数据结构介绍</h2>\n<p><strong>定义</strong>：数据结构是指 相互之间存在着一种或多种关系 的 数据元素的集合 和 该集合中数据元素之间的关系组成。</p>\n<p>简单说：<strong>数据结构就是设计数据以何什么方式组织并存储在计算机中</strong></p>\n<p>如：列表、集合、字典</p>\n<p>N.Wirth: “程序 = 数据结构 + 算法”</p>\n<h3 id=\"数据结构的分类\"><a class=\"markdownIt-Anchor\" href=\"#数据结构的分类\"></a> 数据结构的分类</h3>\n<p>数据结构按照其逻辑结构可分为：线性结构、树结构、图结构</p>\n<ul>\n<li>\n<p><strong>线性结构</strong>：数据结构中的元素存在<strong>一对一</strong>的相互关系</p>\n</li>\n<li>\n<p><strong>树结构</strong>：数据结构中的元素存在<strong>一对多</strong>的相互关系</p>\n</li>\n<li>\n<p><strong>图结构</strong>：数据结构中的元素存在着<strong>多对多</strong>的相互关系</p>\n</li>\n</ul>\n<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\"></a> 列表</h2>\n<p>最简单的线性结构</p>\n<p>存储：顺序表，一块连续的内存</p>\n<p>操作的时间复杂度：</p>\n<ul>\n<li>查找：O(1)\n<ul>\n<li>由于python列表中可以存不同类型的数据，</li>\n<li>所以实质：先为存入的元素分配内存，在将<strong>内存地址</strong>存入列表</li>\n</ul>\n</li>\n<li>插入(insert)：O(n)</li>\n<li>删除(remove)：O(n)</li>\n</ul>\n<h2 id=\"1-栈\"><a class=\"markdownIt-Anchor\" href=\"#1-栈\"></a> 1. 栈</h2>\n<h3 id=\"栈的介绍\"><a class=\"markdownIt-Anchor\" href=\"#栈的介绍\"></a> 栈的介绍</h3>\n<p>栈(Stack)是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。</p>\n<ul>\n<li>特点：后进先出 （如堆叠的书本、进出电梯）</li>\n<li>概念：栈顶、栈底\n<ul>\n<li>栈底：列表(list)最后一位</li>\n</ul>\n</li>\n<li>栈的基本操作：\n<ul>\n<li>进栈（压栈）：push</li>\n<li>出栈：pop</li>\n<li>取栈顶：gettop</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608538723475.png\" alt=\"1608538723475\" /></p>\n<h3 id=\"栈的实现\"><a class=\"markdownIt-Anchor\" href=\"#栈的实现\"></a> 栈的实现</h3>\n<p>使用一般的列表结构即可实现栈</p>\n<pre><code>* 进栈：`li.append`\n* 出栈：`li.pop`\n* 取栈顶：`li[-1]`\n</code></pre>\n<h3 id=\"栈的应用-括号匹配\"><a class=\"markdownIt-Anchor\" href=\"#栈的应用-括号匹配\"></a> 栈的应用 - 括号匹配</h3>\n<p><strong>示例</strong></p>\n<p>括号匹配问题：给一个字符串，其中包含小括号、中括号、大括号，求该字符串中的括号是否匹配。</p>\n<p><strong>例如</strong>：</p>\n<h2 id=\"-code0-\"><a class=\"markdownIt-Anchor\" href=\"#-code0-\"></a> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()()[]&#123;&#125;   匹配</span><br><span class=\"line\">([&#123;()&#125;])   匹配</span><br><span class=\"line\">[](        不匹配</span><br><span class=\"line\">[(])       不匹配</span><br></pre></td></tr></table></figure></h2>\n<p>解决</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">栈 - 括号匹配</span></span><br><span class=\"line\"><span class=\"string\">    ( 入栈</span></span><br><span class=\"line\"><span class=\"string\">    ) 出栈</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self, element</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;压栈&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.stack.append(element)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;出栈&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            name = self.stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_top</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;栈顶&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(self.stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.stack) == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">brace_mathc</span>(<span class=\"params\">s</span>):</span></span><br><span class=\"line\">    match = &#123;<span class=\"string\">&#x27;&#125;&#x27;</span>:<span class=\"string\">&#x27;&#123;&#x27;</span>, <span class=\"string\">&#x27;]&#x27;</span>:<span class=\"string\">&#x27;[&#x27;</span>, <span class=\"string\">&#x27;)&#x27;</span>:<span class=\"string\">&#x27;(&#x27;</span>&#125;</span><br><span class=\"line\">    stack = Stack()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ch <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;(&#x27;</span>, <span class=\"string\">&#x27;[&#x27;</span>, <span class=\"string\">&#x27;&#123;&#x27;</span>]:            </span><br><span class=\"line\">            stack.push(ch)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>: <span class=\"comment\"># ),],&#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> stack.is_empty():</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> stack.get_top() == match[ch]:                </span><br><span class=\"line\">                stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> stack.is_empty():</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>          </span><br></pre></td></tr></table></figure>\n<h2 id=\"2-队列\"><a class=\"markdownIt-Anchor\" href=\"#2-队列\"></a> 2. 队列</h2>\n<h3 id=\"队列的介绍\"><a class=\"markdownIt-Anchor\" href=\"#队列的介绍\"></a> 队列的介绍</h3>\n<p>定义：队列(Queue)是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除</p>\n<p><strong>特点</strong>：先进先出</p>\n<p><strong>概念</strong>：队尾、队头</p>\n<ul>\n<li>进行插入的一端称为<strong>队尾</strong>(rear)，插入的侗族称为进队或入队</li>\n<li>进行删除的一端称为<strong>对头</strong>(front)，删除动作称为出队</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608567970517.png\" alt=\"1608567970517\" /></p>\n<h3 id=\"队列的实现\"><a class=\"markdownIt-Anchor\" href=\"#队列的实现\"></a> 队列的实现</h3>\n<p>由于简单队列，元素会自动补位，复杂度高，故不采用</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608568034654.png\" alt=\"1608568034654\" /></p>\n<p>采用<strong>环形队列</strong>实现</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608617105287.png\" alt=\"1608617105287\" /></p>\n<p><strong>实现方式</strong></p>\n<ul>\n<li>环形队列：当队尾指针<code>front == Maxsize -1</code>时 ，再前进一个位置自动到0位\n<ul>\n<li>队首指针前进1：<code>front = (front + 1) % Maxsize</code></li>\n<li>队尾指针前进1：<code>rear = (rear + 1) % Maxsize</code></li>\n<li>队空条件：<code>rear == front</code></li>\n<li>队满条件：<code>(rear + 1) % Maxsize == front</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">实现队列</span></span><br><span class=\"line\"><span class=\"string\">复杂度为1：不自动补位</span></span><br><span class=\"line\"><span class=\"string\">    环形队列</span></span><br><span class=\"line\"><span class=\"string\">    front (front + 1) / size  从队 -1位 前进到 0位  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">队列性质：先进先出</span></span><br><span class=\"line\"><span class=\"string\">    进出队列，为指针指向位置</span></span><br><span class=\"line\"><span class=\"string\">    队尾(rear) 进</span></span><br><span class=\"line\"><span class=\"string\">    队首(front) 出</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">rear == front 队列为空</span></span><br><span class=\"line\"><span class=\"string\">rear +1 = front 队列满了（留一空位不填充，做标识）</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, size=<span class=\"number\">100</span></span>):</span></span><br><span class=\"line\">        self.queue = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(size+<span class=\"number\">1</span>)] <span class=\"comment\"># 初始化固定长度 列表（0填充）</span></span><br><span class=\"line\">        self.size = size</span><br><span class=\"line\">        self.rear = -<span class=\"number\">1</span>  <span class=\"comment\"># 队尾指针</span></span><br><span class=\"line\">        self.front = -<span class=\"number\">1</span> <span class=\"comment\"># 队首指针</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self, element</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.is_full():</span><br><span class=\"line\">            self.rear = (self.rear + <span class=\"number\">1</span>) % self.size</span><br><span class=\"line\">            self.queue[self.rear] = element</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">&quot;Queue is full&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.is_empty():</span><br><span class=\"line\">            self.front = (self.front + <span class=\"number\">1</span>) % self.size</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.queue[self.front]  <span class=\"comment\"># 移动指针，覆盖数值？</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">&quot;Queue is empty&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.rear == self.front</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_full</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (self.rear + <span class=\"number\">1</span>) % self.size == self.front</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    q = Queue(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">6</span>):</span><br><span class=\"line\">        q.push(i)</span><br><span class=\"line\">        print(q.queue)</span><br><span class=\"line\">    print(<span class=\"built_in\">len</span>(q.queue))</span><br></pre></td></tr></table></figure>\n<h3 id=\"队列的内置模块\"><a class=\"markdownIt-Anchor\" href=\"#队列的内置模块\"></a> 队列的内置模块</h3>\n<h4 id=\"双向队列\"><a class=\"markdownIt-Anchor\" href=\"#双向队列\"></a> 双向队列</h4>\n<ul>\n<li>性质：双向队列的两端都支持进队和出队</li>\n<li>双向队列的基本操作：\n<ul>\n<li>队首进队</li>\n<li>队首出队</li>\n<li>队尾进队</li>\n<li>队尾出队</li>\n</ul>\n</li>\n<li>注：\n<ul>\n<li><code>queue</code>模块用于保证线程安全</li>\n<li>算法中，我们常使用 <strong><code>collections.deque</code></strong></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608618073618.png\" alt=\"1608618073618\" /></p>\n<p><strong>使用方法</strong>：<code>from collections import deque</code></p>\n<ul>\n<li>创建队列：<code>queue = deque()</code></li>\n<li>进队：<code>append()</code></li>\n<li>出队：<code>popleft()</code></li>\n<li>双向队列队首进队：<code>appendleft()</code></li>\n<li>双向队列队尾出队：<code>pop()</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">queue模块用于保证 线程安全</span></span><br><span class=\"line\"><span class=\"string\">collections.deque：</span></span><br><span class=\"line\"><span class=\"string\">\t算法的队列一般用它</span></span><br><span class=\"line\"><span class=\"string\">\t是双向队列</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-链表\"><a class=\"markdownIt-Anchor\" href=\"#3-链表\"></a> 3. 链表</h2>\n<p><strong>定义</strong>： 链表是一种在存储单元上非连续、非顺序的存储结构。</p>\n<p>链表由一系列节点组成的元素集合。</p>\n<p>​\t每个节点包含两部分：</p>\n<p>​\t\t数据域或item 和 指向下一个节点的指针next。</p>\n<p>​\t通过节点之间的相互连接，最终串联成一个链表</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608627996382.png\" alt=\"1608627996382\" /></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, item</span>):</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.<span class=\"built_in\">next</span> = <span class=\"built_in\">next</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># 连接节点</span></span><br><span class=\"line\">a = Node(<span class=\"number\">1</span>)</span><br><span class=\"line\">b = Node(<span class=\"number\">2</span>)</span><br><span class=\"line\">c = Node(<span class=\"number\">3</span>)</span><br><span class=\"line\">a.<span class=\"built_in\">next</span> = b</span><br><span class=\"line\">b.<span class=\"built_in\">next</span> = c</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建链表方法\"><a class=\"markdownIt-Anchor\" href=\"#创建链表方法\"></a> <strong>创建链表</strong>（方法）</h4>\n<ol>\n<li>\n<p>头插法</p>\n<ul>\n<li>需知道头节点位置</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608818886301.png\" alt=\"1608818886301\" /></p>\n</li>\n<li>\n<p>尾插法</p>\n<ul>\n<li>需知道头节点、尾节点位置</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608819036458.png\" alt=\"1608819036458\" /></p>\n</li>\n</ol>\n<h4 id=\"创建链表-代码的实现\"><a class=\"markdownIt-Anchor\" href=\"#创建链表-代码的实现\"></a> 创建链表 代码的实现</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, item</span>):</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>头插法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_linklist_head</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    头插法（只需维护头节点）</span></span><br><span class=\"line\"><span class=\"string\">    :param li:</span></span><br><span class=\"line\"><span class=\"string\">    :return: head</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    head = Node(li[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> li[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">        node = Node(element)</span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = head</span><br><span class=\"line\">        head = node</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n<ul>\n<li>尾插法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_linklist_tail</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    尾插法（需维护头、尾节点）</span></span><br><span class=\"line\"><span class=\"string\">    :param li:</span></span><br><span class=\"line\"><span class=\"string\">    :return: head</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    head = Node(li[<span class=\"number\">0</span>])</span><br><span class=\"line\">    tail = head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> li[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">        node = Node(element)</span><br><span class=\"line\">        tail.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\">        tail = node</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n<h4 id=\"链表的遍历\"><a class=\"markdownIt-Anchor\" href=\"#链表的遍历\"></a> 链表的遍历</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_linklist</span>(<span class=\"params\">lk</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> lk:</span><br><span class=\"line\">        print(lk.item, end=<span class=\"string\">&quot;, &quot;</span>)</span><br><span class=\"line\">        lk = lk.<span class=\"built_in\">next</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\"></a> 单链表</h3>\n<h4 id=\"链表节点的插入\"><a class=\"markdownIt-Anchor\" href=\"#链表节点的插入\"></a> 链表节点的插入</h4>\n<ul>\n<li>\n<p>插入4节点</p>\n<p>​\t<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820256066.png\" alt=\"1608820256066\" style=\"zoom:50%;\" /></p>\n</li>\n</ul>\n<ol>\n<li>\n<p>关联 插队时并列节点的指向</p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820355406.png\" alt=\"1608820355406\" style=\"zoom:50%;\" />\n</li>\n<li>\n<p>让被插队的节点指向自己</p>\n</li>\n</ol>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820375086.png\" alt=\"1608820375086\" style=\"zoom:50%;\" />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"built_in\">next</span> = curNode.<span class=\"built_in\">next</span></span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span> = p</span><br></pre></td></tr></table></figure>\n<h4 id=\"链表节点的删除\"><a class=\"markdownIt-Anchor\" href=\"#链表节点的删除\"></a> 链表节点的删除</h4>\n<ul>\n<li>\n<p>删除4节点</p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820823435.png\" alt=\"1608820823435\" style=\"zoom:50%;\" />\n</li>\n</ul>\n<ol>\n<li>\n<p>定义 p指向要删除的节点</p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608821122628.png\" alt=\"1608821122628\" style=\"zoom:50%;\" />\n</li>\n<li>\n<p>让自己的下一节点，指向自己的上一节点</p>\n</li>\n</ol>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820982239.png\" alt=\"1608820982239\" style=\"zoom:50%;\" />\n<ol start=\"3\">\n<li>删除p</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = curNode.<span class=\"built_in\">next</span></span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span> = curNode.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> p</span><br></pre></td></tr></table></figure>\n<h3 id=\"双链表\"><a class=\"markdownIt-Anchor\" href=\"#双链表\"></a> 双链表</h3>\n<p>双链表的每个节点有两个指针：</p>\n<p>​\t一个指向后一个节点</p>\n<p>​\t另一个指向前一个节点</p>\n<h4 id=\"建立双链表\"><a class=\"markdownIt-Anchor\" href=\"#建立双链表\"></a> 建立双链表</h4>\n<p>​\t<img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608822078563.png\" alt=\"1608822078563\" /></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, item=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.prior = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"双链表节点的插入\"><a class=\"markdownIt-Anchor\" href=\"#双链表节点的插入\"></a> 双链表节点的插入</h4>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608880133960.png\" alt=\"1608880133960\" /></p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880204461.png\" alt=\"1608880204461\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880252238.png\" alt=\"1608880252238\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880279154.png\" alt=\"1608880279154\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880298883.png\" alt=\"1608880298883\" style=\"zoom:50%;\" />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"built_in\">next</span> = curNode.<span class=\"built_in\">next</span></span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span>.piror = p</span><br><span class=\"line\">p.prior = curNode</span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span> = p</span><br></pre></td></tr></table></figure>\n<h4 id=\"双链表节点的删除\"><a class=\"markdownIt-Anchor\" href=\"#双链表节点的删除\"></a> 双链表节点的删除</h4>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880392429.png\" alt=\"1608880392429\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880555243.png\" alt=\"1608880555243\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880440395.png\" alt=\"1608880440395\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880477738.png\" alt=\"1608880477738\" style=\"zoom:50%;\" />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p =  curNode.<span class=\"built_in\">next</span></span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span> = p.<span class=\"built_in\">next</span></span><br><span class=\"line\">p.<span class=\"built_in\">next</span>.piror = curNode</span><br><span class=\"line\"><span class=\"keyword\">del</span> p</span><br></pre></td></tr></table></figure>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> </h3>\n<h3 id=\"链表复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#链表复杂度分析\"></a> 链表复杂度分析</h3>\n<p>顺序表（列表/数组）与 链表</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>顺序表</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>按元素值查找</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>按下标查找</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>在某元素后插入</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>删除某元素</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>总结</strong>：</p>\n<ol>\n<li>链表在插入和删除的操作上明显快于顺序表</li>\n<li>链表的内存可以更灵活的分配</li>\n<li>链表这种链式存储的数据结构对树和图的结构有很大的启发性</li>\n</ol>\n<h2 id=\"4-哈希表\"><a class=\"markdownIt-Anchor\" href=\"#4-哈希表\"></a> 4. 哈希表</h2>\n<h3 id=\"哈希表的介绍\"><a class=\"markdownIt-Anchor\" href=\"#哈希表的介绍\"></a> 哈希表的介绍</h3>\n<p>哈希表 = 直接寻址表 + 哈希</p>\n<p><strong>定义</strong>：又称为散列表(Hash Table)，是一种线性表的存储结构。哈希表由一个<strong>直接寻址表</strong>和一个<strong>哈希函数</strong>组成。哈希函数h(k)将元素关键字k作为自变量，返回元素的存储下标。</p>\n<p><strong>特点</strong>：哈希表通过一个哈希函数来计算数据存储的位置的数据结构。通常支持如下操作：</p>\n<ul>\n<li>insert(key, value)：插入键值对 (key, value)</li>\n<li>get(key)：如果存在键为key的键值对则返回其value，否则返回空值</li>\n<li>delete(key)：删除键为key的键值对</li>\n</ul>\n<h4 id=\"哈希表-直接寻址表-哈希\"><a class=\"markdownIt-Anchor\" href=\"#哈希表-直接寻址表-哈希\"></a> 哈希表 = 直接寻址表 + 哈希</h4>\n<h5 id=\"直接寻址表\"><a class=\"markdownIt-Anchor\" href=\"#直接寻址表\"></a> 直接寻址表</h5>\n<p>当关键字的全域U比较小时，直接寻址时一种更简单而有效的方法</p>\n<ul>\n<li>缺点：\n<ul>\n<li>当域U很大时，需要消耗大量内存，很不实际</li>\n<li>如果域U很大而实际出现的key很少，则有大量空间被浪费</li>\n<li>无法处理关键字不是数字的情况</li>\n</ul>\n</li>\n</ul>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608882204198.png\" alt=\"1608882204198\" style=\"zoom:50%;\" />\n<h5 id=\"哈希\"><a class=\"markdownIt-Anchor\" href=\"#哈希\"></a> 哈希</h5>\n<p>直接寻址表：key为k的元素放到k位置上</p>\n<p>改进直接寻址表：哈希</p>\n<ul>\n<li>构建大小为m的寻址表T</li>\n<li>key为 k 的元素放到 h(k) 位置上</li>\n<li>h(k) 是一个函数，其将域U映射到表[0,1,…,m-1]</li>\n</ul>\n<h4 id=\"哈希冲突\"><a class=\"markdownIt-Anchor\" href=\"#哈希冲突\"></a> 哈希冲突</h4>\n<p>哈希函数对不对的key，映射出了相同的结果</p>\n<h5 id=\"解决冲突-开放寻址法\"><a class=\"markdownIt-Anchor\" href=\"#解决冲突-开放寻址法\"></a> 解决冲突 —— 开放寻址法</h5>\n<p>如果哈希函数返回的位置已经有值，则可以向后探查新的位置来存储这个值。</p>\n<ul>\n<li>线性查找：如果位置i被占用，则探查 i+1, i+2, …</li>\n<li>二次查找：如果位置i被占用，则探查 i+1^2, i-1^2, i+2^2, …</li>\n<li>二度哈希：有n个哈希函数，当使用 第1个哈希函数h1 发生冲突时，则尝试使用 h2, h3, …</li>\n</ul>\n<h5 id=\"解决冲突-拉链法\"><a class=\"markdownIt-Anchor\" href=\"#解决冲突-拉链法\"></a> 解决冲突 —— 拉链法</h5>\n<p>哈希表的每个位置都链接一个链表，当发生冲突时，冲突的元素将被加到该位置<strong>链表的最后</strong>。</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608883544925.png\" alt=\"拉链法\" /></p>\n<h4 id=\"哈希表-常见函数\"><a class=\"markdownIt-Anchor\" href=\"#哈希表-常见函数\"></a> 哈希表 —— 常见函数</h4>\n<ul>\n<li>除法哈希法：\n<ul>\n<li>h(k) = k % m</li>\n</ul>\n</li>\n<li>乘法哈希法：\n<ul>\n<li>h(k) = floor(m*(A*key%1))</li>\n</ul>\n</li>\n<li>全域哈希法：\n<ul>\n<li>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1609047881922.png\" alt=\"1609047881922\" style=\"zoom: 67%;\" />\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"哈希表的实现\"><a class=\"markdownIt-Anchor\" href=\"#哈希表的实现\"></a> 哈希表的实现</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 哈希表 基于链表进行插入</span></span><br><span class=\"line\"><span class=\"comment\"># 哈希冲突——拉链法；重复的数放在以链表节点的形式添加在后面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span>:</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;链表类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, item=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">            self.item = item</span><br><span class=\"line\">            self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkListIterator</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;迭代器类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">            self.node = node</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.node:</span><br><span class=\"line\">                cur_node = self.node</span><br><span class=\"line\">                self.node = cur_node.<span class=\"built_in\">next</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> cur_node.item</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, iterable=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        self.head = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.tail = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> iterable:</span><br><span class=\"line\">            self.extend(iterable)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">append</span>(<span class=\"params\">self, obj</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;添加链表节点&quot;&quot;&quot;</span></span><br><span class=\"line\">        s = LinkList.Node(obj)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.head:</span><br><span class=\"line\">            self.head = s</span><br><span class=\"line\">            self.tail = s</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.tail.<span class=\"built_in\">next</span> = s</span><br><span class=\"line\">            self.tail = s</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extend</span>(<span class=\"params\">self, iterable</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;自动进行添加&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">            self.append(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span>(<span class=\"params\">self, obj</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;查找&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> self:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n == obj:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.LinkListIterator(self.head)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;打印&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;&lt;&quot;</span> + <span class=\"string\">&quot;, &quot;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, self)) + <span class=\"string\">&quot;&gt;&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTable</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, size=<span class=\"number\">101</span></span>):</span></span><br><span class=\"line\">        self.size = size</span><br><span class=\"line\">        <span class=\"comment\"># self.T = [None for i in range(self.size)]</span></span><br><span class=\"line\">        self.T = [LinkList() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">h</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> k % self.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        i = self.h(k)</span><br><span class=\"line\">        <span class=\"comment\"># 去重</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.find(k):</span><br><span class=\"line\">            print(<span class=\"string\">&quot;Duplicated Insert.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.T[i].append(k)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        i = self.h(k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.T[i].find(k)</span><br></pre></td></tr></table></figure>\n<h3 id=\"哈希表的应用\"><a class=\"markdownIt-Anchor\" href=\"#哈希表的应用\"></a> 哈希表的应用</h3>\n<ul>\n<li>集合 字典</li>\n<li>md5算法\n<ul>\n<li>曾经密码学中常用的哈希函数，将任意长度的数据映射为128为的哈希值</li>\n<li>文件的哈希值（两个文件哈希值相同）\n<ul>\n<li>帮用户验证下载的文件是否完整</li>\n<li>云存储商判断上传的文件是否存在于服务器上，从而实现妙传功能，避免存储过多相同的文件副本</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SHA2算法\n<ul>\n<li>较安全性受到挑战的MD5合SHA-1，安全性较高</li>\n<li>SHA-2包含一系列的哈希函数：SHA-224，SHA-256，SHA-384 。。。（数字对应哈希值长度）</li>\n<li>挖矿（比特币）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-树\"><a class=\"markdownIt-Anchor\" href=\"#5-树\"></a> 5. 树</h2>\n<h3 id=\"数的介绍\"><a class=\"markdownIt-Anchor\" href=\"#数的介绍\"></a> 数的介绍</h3>\n<h4 id=\"树与二叉树\"><a class=\"markdownIt-Anchor\" href=\"#树与二叉树\"></a> 树与二叉树</h4>\n<ul>\n<li>\n<p>树是一种数据结构。比如目录结构</p>\n</li>\n<li>\n<p>树是一种可以递归定义的数据结构</p>\n</li>\n<li>\n<p>树是由n个节点组成的集合：</p>\n<ul>\n<li>如果n=0，拿这是一颗空树；</li>\n<li>如果n&gt;0，那存在1个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一棵树</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609052341605.png\" alt=\"1609052341605\" /></p>\n</li>\n</ul>\n<p>树的一些概念：</p>\n<ul>\n<li>根节点、叶子节点</li>\n<li>树的深度</li>\n<li>树的度：所有节点最大的度（节点的度：几个分叉）</li>\n<li>孩子节点/父节点</li>\n<li>子树</li>\n</ul>\n<h4 id=\"树的实例模拟文件系统\"><a class=\"markdownIt-Anchor\" href=\"#树的实例模拟文件系统\"></a> 树的实例：模拟文件系统</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 节点属性</span></span><br><span class=\"line\"><span class=\"comment\"># 类型：文件夹/文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存储方式：链式存储</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, <span class=\"built_in\">type</span>=<span class=\"string\">&quot;dir&quot;</span></span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.<span class=\"built_in\">type</span> = <span class=\"built_in\">type</span>  <span class=\"comment\"># &quot;dir&quot; or &quot;file&quot;</span></span><br><span class=\"line\">        self.children = []</span><br><span class=\"line\">        self.parent = <span class=\"literal\">None</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\">      </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystemTree</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.root = Node(<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">        self.now = self.root</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mkdir</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># name 以/结尾</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name[-<span class=\"number\">1</span>] != <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">            name += <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">        node = Node(name)</span><br><span class=\"line\">        self.now.children.append(node)</span><br><span class=\"line\">        node.parent = self.now</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ls</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.now.children</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cd</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name[-<span class=\"number\">1</span>] != <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">            name += <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name == <span class=\"string\">&quot;../&quot;</span>:</span><br><span class=\"line\">            self.now = self.now.parent</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> self.now.children:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> child.name == name:</span><br><span class=\"line\">                self.now == child</span><br><span class=\"line\">                <span class=\"keyword\">return</span> </span><br><span class=\"line\">       \t<span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;invalid dir&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;main&quot;</span>:</span><br><span class=\"line\">    tree = FileSystemTree()</span><br><span class=\"line\">    tree.mkdir(<span class=\"string\">&quot;var/&quot;</span>)</span><br><span class=\"line\">    print(tree.root.children)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n<h3 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\"></a> 二叉树</h3>\n<p>定义：树的度为2（两个节点）的树</p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1609055873038.png\" alt=\"1609055873038\" style=\"zoom:50%;\" />\n<p><strong>二叉树的链式存储</strong>：将二叉树的节点定义为一个对象，节点之间通过类似链表的连接方式来连接。</p>\n<p><strong>节点定义</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BiTreeNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, data</span>):</span></span><br><span class=\"line\">        self.data = data</span><br><span class=\"line\">        self.lchild = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.rchild = <span class=\"literal\">None</span></span><br><span class=\"line\">        </span><br><span class=\"line\">a = BiTreeNode(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">b = BiTreeNode(<span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">c = BiTreeNode(<span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">d = BiTreeNode(<span class=\"string\">&quot;D&quot;</span>)</span><br><span class=\"line\">e = BiTreeNode(<span class=\"string\">&quot;E&quot;</span>)</span><br><span class=\"line\">f = BiTreeNode(<span class=\"string\">&quot;F&quot;</span>)</span><br><span class=\"line\">g = BiTreeNode(<span class=\"string\">&quot;G&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">e.lchild = a</span><br><span class=\"line\">e.rchild = g</span><br><span class=\"line\">a.lchild = c</span><br><span class=\"line\">c.lchild = b</span><br><span class=\"line\">c.rchild = d</span><br><span class=\"line\">g.rchild = f</span><br><span class=\"line\"></span><br><span class=\"line\">root = e</span><br></pre></td></tr></table></figure>\n<h4 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\"></a> </h4>\n<h4 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\"></a> 二叉树的遍历</h4>\n<p>4种遍历方式：</p>\n<ul>\n<li>\n<p>前序遍历：EACBDGF</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 自己</span></span><br><span class=\"line\"><span class=\"comment\"># 2 左子树</span></span><br><span class=\"line\"><span class=\"comment\"># 3 右子树</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_order</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root:</span><br><span class=\"line\">        print(root.data, end=<span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">        pre_order(root.lchild)</span><br><span class=\"line\">        pre_order(root.rchild)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;main&quot;</span>:</span><br><span class=\"line\">\tpre_order(root) <span class=\"comment\"># E,A,C,B,D,G,F,</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>中序遍历：ABCDEGF</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 左子树</span></span><br><span class=\"line\"><span class=\"comment\"># 2 自己</span></span><br><span class=\"line\"><span class=\"comment\"># 3 右子树</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">in_order</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root:</span><br><span class=\"line\">        pre_order(root.lchild)</span><br><span class=\"line\">        print(root.data, end=<span class=\"string\">&quot;,&quot;</span>)        </span><br><span class=\"line\">        pre_order(root.rchild)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>后序遍历：BDCAFGE</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 左</span></span><br><span class=\"line\"><span class=\"comment\"># 2 右</span></span><br><span class=\"line\"><span class=\"comment\"># 3 自己</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post_order</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;中序遍历&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root:</span><br><span class=\"line\">        post_order(root.lchild)</span><br><span class=\"line\">        post_order(root.rchild)</span><br><span class=\"line\">        print(root.data, end=<span class=\"string\">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>层次遍历 ：EAGCFBD</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用队列</span></span><br><span class=\"line\"><span class=\"comment\"># 进主节点</span></span><br><span class=\"line\">\t<span class=\"comment\"># 出主</span></span><br><span class=\"line\">    <span class=\"comment\"># 有子节点 —— 进子</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">level_order</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;层级遍历&quot;&quot;&quot;</span></span><br><span class=\"line\">    q = deque()</span><br><span class=\"line\">    q.append(root)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(q) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        node = q.popleft()</span><br><span class=\"line\">        print(node.data, end=<span class=\"string\">&quot;, &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.lchild:</span><br><span class=\"line\">            q.append(node.lchild)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.rchild:</span><br><span class=\"line\">            q.append(node.rchild)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#二叉搜索树\"></a> 二叉搜索树</h4>\n<p><strong>定义</strong>：二叉搜索树是一棵二叉树，且满足性质：</p>\n<p>​\t设x是二叉树的一个节点。</p>\n<p>​\t如果y是x左子树的一个节点，那么 <code>y.key &lt;= x.key</code>；</p>\n<p>​\t如果y是x右子树的一个节点：那么<code>y.key &gt;= x.key</code></p>\n<p><strong>二叉搜索树的操作</strong>：查询、插入、删除</p>\n<h3 id=\"avl树\"><a class=\"markdownIt-Anchor\" href=\"#avl树\"></a> AVL树</h3>\n<p>windows对进程地址空间的管理用到了AVL树。</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609344914649.png\" alt=\"1609344914649\" /></p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609344929808.png\" alt=\"1609344929808\" /></p>\n","more":"<h2 id=\"数据结构介绍\"><a class=\"markdownIt-Anchor\" href=\"#数据结构介绍\"></a> 数据结构介绍</h2>\n<p><strong>定义</strong>：数据结构是指 相互之间存在着一种或多种关系 的 数据元素的集合 和 该集合中数据元素之间的关系组成。</p>\n<p>简单说：<strong>数据结构就是设计数据以何什么方式组织并存储在计算机中</strong></p>\n<p>如：列表、集合、字典</p>\n<p>N.Wirth: “程序 = 数据结构 + 算法”</p>\n<h3 id=\"数据结构的分类\"><a class=\"markdownIt-Anchor\" href=\"#数据结构的分类\"></a> 数据结构的分类</h3>\n<p>数据结构按照其逻辑结构可分为：线性结构、树结构、图结构</p>\n<ul>\n<li>\n<p><strong>线性结构</strong>：数据结构中的元素存在<strong>一对一</strong>的相互关系</p>\n</li>\n<li>\n<p><strong>树结构</strong>：数据结构中的元素存在<strong>一对多</strong>的相互关系</p>\n</li>\n<li>\n<p><strong>图结构</strong>：数据结构中的元素存在着<strong>多对多</strong>的相互关系</p>\n</li>\n</ul>\n<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\"></a> 列表</h2>\n<p>最简单的线性结构</p>\n<p>存储：顺序表，一块连续的内存</p>\n<p>操作的时间复杂度：</p>\n<ul>\n<li>查找：O(1)\n<ul>\n<li>由于python列表中可以存不同类型的数据，</li>\n<li>所以实质：先为存入的元素分配内存，在将<strong>内存地址</strong>存入列表</li>\n</ul>\n</li>\n<li>插入(insert)：O(n)</li>\n<li>删除(remove)：O(n)</li>\n</ul>\n<h2 id=\"1-栈\"><a class=\"markdownIt-Anchor\" href=\"#1-栈\"></a> 1. 栈</h2>\n<h3 id=\"栈的介绍\"><a class=\"markdownIt-Anchor\" href=\"#栈的介绍\"></a> 栈的介绍</h3>\n<p>栈(Stack)是一个数据集合，可以理解为只能在一端进行插入或删除操作的列表。</p>\n<ul>\n<li>特点：后进先出 （如堆叠的书本、进出电梯）</li>\n<li>概念：栈顶、栈底\n<ul>\n<li>栈底：列表(list)最后一位</li>\n</ul>\n</li>\n<li>栈的基本操作：\n<ul>\n<li>进栈（压栈）：push</li>\n<li>出栈：pop</li>\n<li>取栈顶：gettop</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608538723475.png\" alt=\"1608538723475\" /></p>\n<h3 id=\"栈的实现\"><a class=\"markdownIt-Anchor\" href=\"#栈的实现\"></a> 栈的实现</h3>\n<p>使用一般的列表结构即可实现栈</p>\n<pre><code>* 进栈：`li.append`\n* 出栈：`li.pop`\n* 取栈顶：`li[-1]`\n</code></pre>\n<h3 id=\"栈的应用-括号匹配\"><a class=\"markdownIt-Anchor\" href=\"#栈的应用-括号匹配\"></a> 栈的应用 - 括号匹配</h3>\n<p><strong>示例</strong></p>\n<p>括号匹配问题：给一个字符串，其中包含小括号、中括号、大括号，求该字符串中的括号是否匹配。</p>\n<p><strong>例如</strong>：</p>\n<h2 id=\"-code0-\"><a class=\"markdownIt-Anchor\" href=\"#-code0-\"></a> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()()[]&#123;&#125;   匹配</span><br><span class=\"line\">([&#123;()&#125;])   匹配</span><br><span class=\"line\">[](        不匹配</span><br><span class=\"line\">[(])       不匹配</span><br></pre></td></tr></table></figure></h2>\n<p>解决</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">栈 - 括号匹配</span></span><br><span class=\"line\"><span class=\"string\">    ( 入栈</span></span><br><span class=\"line\"><span class=\"string\">    ) 出栈</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stack</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.stack = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self, element</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;压栈&quot;&quot;&quot;</span></span><br><span class=\"line\">        self.stack.append(element)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;出栈&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            name = self.stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> name</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(e)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_top</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;栈顶&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(self.stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.stack) == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">brace_mathc</span>(<span class=\"params\">s</span>):</span></span><br><span class=\"line\">    match = &#123;<span class=\"string\">&#x27;&#125;&#x27;</span>:<span class=\"string\">&#x27;&#123;&#x27;</span>, <span class=\"string\">&#x27;]&#x27;</span>:<span class=\"string\">&#x27;[&#x27;</span>, <span class=\"string\">&#x27;)&#x27;</span>:<span class=\"string\">&#x27;(&#x27;</span>&#125;</span><br><span class=\"line\">    stack = Stack()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ch <span class=\"keyword\">in</span> s:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ch <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;(&#x27;</span>, <span class=\"string\">&#x27;[&#x27;</span>, <span class=\"string\">&#x27;&#123;&#x27;</span>]:            </span><br><span class=\"line\">            stack.push(ch)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>: <span class=\"comment\"># ),],&#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> stack.is_empty():</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> stack.get_top() == match[ch]:                </span><br><span class=\"line\">                stack.pop()</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> stack.is_empty():</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>          </span><br></pre></td></tr></table></figure>\n<h2 id=\"2-队列\"><a class=\"markdownIt-Anchor\" href=\"#2-队列\"></a> 2. 队列</h2>\n<h3 id=\"队列的介绍\"><a class=\"markdownIt-Anchor\" href=\"#队列的介绍\"></a> 队列的介绍</h3>\n<p>定义：队列(Queue)是一个数据集合，仅允许在列表的一端进行插入，另一端进行删除</p>\n<p><strong>特点</strong>：先进先出</p>\n<p><strong>概念</strong>：队尾、队头</p>\n<ul>\n<li>进行插入的一端称为<strong>队尾</strong>(rear)，插入的侗族称为进队或入队</li>\n<li>进行删除的一端称为<strong>对头</strong>(front)，删除动作称为出队</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608567970517.png\" alt=\"1608567970517\" /></p>\n<h3 id=\"队列的实现\"><a class=\"markdownIt-Anchor\" href=\"#队列的实现\"></a> 队列的实现</h3>\n<p>由于简单队列，元素会自动补位，复杂度高，故不采用</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608568034654.png\" alt=\"1608568034654\" /></p>\n<p>采用<strong>环形队列</strong>实现</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608617105287.png\" alt=\"1608617105287\" /></p>\n<p><strong>实现方式</strong></p>\n<ul>\n<li>环形队列：当队尾指针<code>front == Maxsize -1</code>时 ，再前进一个位置自动到0位\n<ul>\n<li>队首指针前进1：<code>front = (front + 1) % Maxsize</code></li>\n<li>队尾指针前进1：<code>rear = (rear + 1) % Maxsize</code></li>\n<li>队空条件：<code>rear == front</code></li>\n<li>队满条件：<code>(rear + 1) % Maxsize == front</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">实现队列</span></span><br><span class=\"line\"><span class=\"string\">复杂度为1：不自动补位</span></span><br><span class=\"line\"><span class=\"string\">    环形队列</span></span><br><span class=\"line\"><span class=\"string\">    front (front + 1) / size  从队 -1位 前进到 0位  </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">队列性质：先进先出</span></span><br><span class=\"line\"><span class=\"string\">    进出队列，为指针指向位置</span></span><br><span class=\"line\"><span class=\"string\">    队尾(rear) 进</span></span><br><span class=\"line\"><span class=\"string\">    队首(front) 出</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">rear == front 队列为空</span></span><br><span class=\"line\"><span class=\"string\">rear +1 = front 队列满了（留一空位不填充，做标识）</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, size=<span class=\"number\">100</span></span>):</span></span><br><span class=\"line\">        self.queue = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(size+<span class=\"number\">1</span>)] <span class=\"comment\"># 初始化固定长度 列表（0填充）</span></span><br><span class=\"line\">        self.size = size</span><br><span class=\"line\">        self.rear = -<span class=\"number\">1</span>  <span class=\"comment\"># 队尾指针</span></span><br><span class=\"line\">        self.front = -<span class=\"number\">1</span> <span class=\"comment\"># 队首指针</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span>(<span class=\"params\">self, element</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.is_full():</span><br><span class=\"line\">            self.rear = (self.rear + <span class=\"number\">1</span>) % self.size</span><br><span class=\"line\">            self.queue[self.rear] = element</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">&quot;Queue is full&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.is_empty():</span><br><span class=\"line\">            self.front = (self.front + <span class=\"number\">1</span>) % self.size</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.queue[self.front]  <span class=\"comment\"># 移动指针，覆盖数值？</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> IndexError(<span class=\"string\">&quot;Queue is empty&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_empty</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.rear == self.front</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_full</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (self.rear + <span class=\"number\">1</span>) % self.size == self.front</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    q = Queue(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">6</span>):</span><br><span class=\"line\">        q.push(i)</span><br><span class=\"line\">        print(q.queue)</span><br><span class=\"line\">    print(<span class=\"built_in\">len</span>(q.queue))</span><br></pre></td></tr></table></figure>\n<h3 id=\"队列的内置模块\"><a class=\"markdownIt-Anchor\" href=\"#队列的内置模块\"></a> 队列的内置模块</h3>\n<h4 id=\"双向队列\"><a class=\"markdownIt-Anchor\" href=\"#双向队列\"></a> 双向队列</h4>\n<ul>\n<li>性质：双向队列的两端都支持进队和出队</li>\n<li>双向队列的基本操作：\n<ul>\n<li>队首进队</li>\n<li>队首出队</li>\n<li>队尾进队</li>\n<li>队尾出队</li>\n</ul>\n</li>\n<li>注：\n<ul>\n<li><code>queue</code>模块用于保证线程安全</li>\n<li>算法中，我们常使用 <strong><code>collections.deque</code></strong></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608618073618.png\" alt=\"1608618073618\" /></p>\n<p><strong>使用方法</strong>：<code>from collections import deque</code></p>\n<ul>\n<li>创建队列：<code>queue = deque()</code></li>\n<li>进队：<code>append()</code></li>\n<li>出队：<code>popleft()</code></li>\n<li>双向队列队首进队：<code>appendleft()</code></li>\n<li>双向队列队尾出队：<code>pop()</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">queue模块用于保证 线程安全</span></span><br><span class=\"line\"><span class=\"string\">collections.deque：</span></span><br><span class=\"line\"><span class=\"string\">\t算法的队列一般用它</span></span><br><span class=\"line\"><span class=\"string\">\t是双向队列</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-链表\"><a class=\"markdownIt-Anchor\" href=\"#3-链表\"></a> 3. 链表</h2>\n<p><strong>定义</strong>： 链表是一种在存储单元上非连续、非顺序的存储结构。</p>\n<p>链表由一系列节点组成的元素集合。</p>\n<p>​\t每个节点包含两部分：</p>\n<p>​\t\t数据域或item 和 指向下一个节点的指针next。</p>\n<p>​\t通过节点之间的相互连接，最终串联成一个链表</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608627996382.png\" alt=\"1608627996382\" /></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, item</span>):</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.<span class=\"built_in\">next</span> = <span class=\"built_in\">next</span></span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\"># 连接节点</span></span><br><span class=\"line\">a = Node(<span class=\"number\">1</span>)</span><br><span class=\"line\">b = Node(<span class=\"number\">2</span>)</span><br><span class=\"line\">c = Node(<span class=\"number\">3</span>)</span><br><span class=\"line\">a.<span class=\"built_in\">next</span> = b</span><br><span class=\"line\">b.<span class=\"built_in\">next</span> = c</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建链表方法\"><a class=\"markdownIt-Anchor\" href=\"#创建链表方法\"></a> <strong>创建链表</strong>（方法）</h4>\n<ol>\n<li>\n<p>头插法</p>\n<ul>\n<li>需知道头节点位置</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608818886301.png\" alt=\"1608818886301\" /></p>\n</li>\n<li>\n<p>尾插法</p>\n<ul>\n<li>需知道头节点、尾节点位置</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608819036458.png\" alt=\"1608819036458\" /></p>\n</li>\n</ol>\n<h4 id=\"创建链表-代码的实现\"><a class=\"markdownIt-Anchor\" href=\"#创建链表-代码的实现\"></a> 创建链表 代码的实现</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, item</span>):</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>头插法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_linklist_head</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    头插法（只需维护头节点）</span></span><br><span class=\"line\"><span class=\"string\">    :param li:</span></span><br><span class=\"line\"><span class=\"string\">    :return: head</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    head = Node(li[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> li[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">        node = Node(element)</span><br><span class=\"line\">        node.<span class=\"built_in\">next</span> = head</span><br><span class=\"line\">        head = node</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n<ul>\n<li>尾插法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_linklist_tail</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    尾插法（需维护头、尾节点）</span></span><br><span class=\"line\"><span class=\"string\">    :param li:</span></span><br><span class=\"line\"><span class=\"string\">    :return: head</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    head = Node(li[<span class=\"number\">0</span>])</span><br><span class=\"line\">    tail = head</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> li[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">        node = Node(element)</span><br><span class=\"line\">        tail.<span class=\"built_in\">next</span> = node</span><br><span class=\"line\">        tail = node</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n<h4 id=\"链表的遍历\"><a class=\"markdownIt-Anchor\" href=\"#链表的遍历\"></a> 链表的遍历</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_linklist</span>(<span class=\"params\">lk</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> lk:</span><br><span class=\"line\">        print(lk.item, end=<span class=\"string\">&quot;, &quot;</span>)</span><br><span class=\"line\">        lk = lk.<span class=\"built_in\">next</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\"></a> 单链表</h3>\n<h4 id=\"链表节点的插入\"><a class=\"markdownIt-Anchor\" href=\"#链表节点的插入\"></a> 链表节点的插入</h4>\n<ul>\n<li>\n<p>插入4节点</p>\n<p>​\t<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820256066.png\" alt=\"1608820256066\" style=\"zoom:50%;\" /></p>\n</li>\n</ul>\n<ol>\n<li>\n<p>关联 插队时并列节点的指向</p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820355406.png\" alt=\"1608820355406\" style=\"zoom:50%;\" />\n</li>\n<li>\n<p>让被插队的节点指向自己</p>\n</li>\n</ol>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820375086.png\" alt=\"1608820375086\" style=\"zoom:50%;\" />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"built_in\">next</span> = curNode.<span class=\"built_in\">next</span></span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span> = p</span><br></pre></td></tr></table></figure>\n<h4 id=\"链表节点的删除\"><a class=\"markdownIt-Anchor\" href=\"#链表节点的删除\"></a> 链表节点的删除</h4>\n<ul>\n<li>\n<p>删除4节点</p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820823435.png\" alt=\"1608820823435\" style=\"zoom:50%;\" />\n</li>\n</ul>\n<ol>\n<li>\n<p>定义 p指向要删除的节点</p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608821122628.png\" alt=\"1608821122628\" style=\"zoom:50%;\" />\n</li>\n<li>\n<p>让自己的下一节点，指向自己的上一节点</p>\n</li>\n</ol>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608820982239.png\" alt=\"1608820982239\" style=\"zoom:50%;\" />\n<ol start=\"3\">\n<li>删除p</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p = curNode.<span class=\"built_in\">next</span></span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span> = curNode.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\"><span class=\"keyword\">del</span> p</span><br></pre></td></tr></table></figure>\n<h3 id=\"双链表\"><a class=\"markdownIt-Anchor\" href=\"#双链表\"></a> 双链表</h3>\n<p>双链表的每个节点有两个指针：</p>\n<p>​\t一个指向后一个节点</p>\n<p>​\t另一个指向前一个节点</p>\n<h4 id=\"建立双链表\"><a class=\"markdownIt-Anchor\" href=\"#建立双链表\"></a> 建立双链表</h4>\n<p>​\t<img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608822078563.png\" alt=\"1608822078563\" /></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, item=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        self.item = item</span><br><span class=\"line\">        self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.prior = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"双链表节点的插入\"><a class=\"markdownIt-Anchor\" href=\"#双链表节点的插入\"></a> 双链表节点的插入</h4>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608880133960.png\" alt=\"1608880133960\" /></p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880204461.png\" alt=\"1608880204461\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880252238.png\" alt=\"1608880252238\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880279154.png\" alt=\"1608880279154\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880298883.png\" alt=\"1608880298883\" style=\"zoom:50%;\" />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p.<span class=\"built_in\">next</span> = curNode.<span class=\"built_in\">next</span></span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span>.piror = p</span><br><span class=\"line\">p.prior = curNode</span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span> = p</span><br></pre></td></tr></table></figure>\n<h4 id=\"双链表节点的删除\"><a class=\"markdownIt-Anchor\" href=\"#双链表节点的删除\"></a> 双链表节点的删除</h4>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880392429.png\" alt=\"1608880392429\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880555243.png\" alt=\"1608880555243\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880440395.png\" alt=\"1608880440395\" style=\"zoom:50%;\" />\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608880477738.png\" alt=\"1608880477738\" style=\"zoom:50%;\" />\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p =  curNode.<span class=\"built_in\">next</span></span><br><span class=\"line\">curNode.<span class=\"built_in\">next</span> = p.<span class=\"built_in\">next</span></span><br><span class=\"line\">p.<span class=\"built_in\">next</span>.piror = curNode</span><br><span class=\"line\"><span class=\"keyword\">del</span> p</span><br></pre></td></tr></table></figure>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> </h3>\n<h3 id=\"链表复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#链表复杂度分析\"></a> 链表复杂度分析</h3>\n<p>顺序表（列表/数组）与 链表</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>顺序表</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>按元素值查找</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>按下标查找</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>在某元素后插入</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>删除某元素</td>\n<td>O(n)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>总结</strong>：</p>\n<ol>\n<li>链表在插入和删除的操作上明显快于顺序表</li>\n<li>链表的内存可以更灵活的分配</li>\n<li>链表这种链式存储的数据结构对树和图的结构有很大的启发性</li>\n</ol>\n<h2 id=\"4-哈希表\"><a class=\"markdownIt-Anchor\" href=\"#4-哈希表\"></a> 4. 哈希表</h2>\n<h3 id=\"哈希表的介绍\"><a class=\"markdownIt-Anchor\" href=\"#哈希表的介绍\"></a> 哈希表的介绍</h3>\n<p>哈希表 = 直接寻址表 + 哈希</p>\n<p><strong>定义</strong>：又称为散列表(Hash Table)，是一种线性表的存储结构。哈希表由一个<strong>直接寻址表</strong>和一个<strong>哈希函数</strong>组成。哈希函数h(k)将元素关键字k作为自变量，返回元素的存储下标。</p>\n<p><strong>特点</strong>：哈希表通过一个哈希函数来计算数据存储的位置的数据结构。通常支持如下操作：</p>\n<ul>\n<li>insert(key, value)：插入键值对 (key, value)</li>\n<li>get(key)：如果存在键为key的键值对则返回其value，否则返回空值</li>\n<li>delete(key)：删除键为key的键值对</li>\n</ul>\n<h4 id=\"哈希表-直接寻址表-哈希\"><a class=\"markdownIt-Anchor\" href=\"#哈希表-直接寻址表-哈希\"></a> 哈希表 = 直接寻址表 + 哈希</h4>\n<h5 id=\"直接寻址表\"><a class=\"markdownIt-Anchor\" href=\"#直接寻址表\"></a> 直接寻址表</h5>\n<p>当关键字的全域U比较小时，直接寻址时一种更简单而有效的方法</p>\n<ul>\n<li>缺点：\n<ul>\n<li>当域U很大时，需要消耗大量内存，很不实际</li>\n<li>如果域U很大而实际出现的key很少，则有大量空间被浪费</li>\n<li>无法处理关键字不是数字的情况</li>\n</ul>\n</li>\n</ul>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1608882204198.png\" alt=\"1608882204198\" style=\"zoom:50%;\" />\n<h5 id=\"哈希\"><a class=\"markdownIt-Anchor\" href=\"#哈希\"></a> 哈希</h5>\n<p>直接寻址表：key为k的元素放到k位置上</p>\n<p>改进直接寻址表：哈希</p>\n<ul>\n<li>构建大小为m的寻址表T</li>\n<li>key为 k 的元素放到 h(k) 位置上</li>\n<li>h(k) 是一个函数，其将域U映射到表[0,1,…,m-1]</li>\n</ul>\n<h4 id=\"哈希冲突\"><a class=\"markdownIt-Anchor\" href=\"#哈希冲突\"></a> 哈希冲突</h4>\n<p>哈希函数对不对的key，映射出了相同的结果</p>\n<h5 id=\"解决冲突-开放寻址法\"><a class=\"markdownIt-Anchor\" href=\"#解决冲突-开放寻址法\"></a> 解决冲突 —— 开放寻址法</h5>\n<p>如果哈希函数返回的位置已经有值，则可以向后探查新的位置来存储这个值。</p>\n<ul>\n<li>线性查找：如果位置i被占用，则探查 i+1, i+2, …</li>\n<li>二次查找：如果位置i被占用，则探查 i+1^2, i-1^2, i+2^2, …</li>\n<li>二度哈希：有n个哈希函数，当使用 第1个哈希函数h1 发生冲突时，则尝试使用 h2, h3, …</li>\n</ul>\n<h5 id=\"解决冲突-拉链法\"><a class=\"markdownIt-Anchor\" href=\"#解决冲突-拉链法\"></a> 解决冲突 —— 拉链法</h5>\n<p>哈希表的每个位置都链接一个链表，当发生冲突时，冲突的元素将被加到该位置<strong>链表的最后</strong>。</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608883544925.png\" alt=\"拉链法\" /></p>\n<h4 id=\"哈希表-常见函数\"><a class=\"markdownIt-Anchor\" href=\"#哈希表-常见函数\"></a> 哈希表 —— 常见函数</h4>\n<ul>\n<li>除法哈希法：\n<ul>\n<li>h(k) = k % m</li>\n</ul>\n</li>\n<li>乘法哈希法：\n<ul>\n<li>h(k) = floor(m*(A*key%1))</li>\n</ul>\n</li>\n<li>全域哈希法：\n<ul>\n<li>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1609047881922.png\" alt=\"1609047881922\" style=\"zoom: 67%;\" />\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"哈希表的实现\"><a class=\"markdownIt-Anchor\" href=\"#哈希表的实现\"></a> 哈希表的实现</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 哈希表 基于链表进行插入</span></span><br><span class=\"line\"><span class=\"comment\"># 哈希冲突——拉链法；重复的数放在以链表节点的形式添加在后面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkList</span>:</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;链表类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, item=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">            self.item = item</span><br><span class=\"line\">            self.<span class=\"built_in\">next</span> = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkListIterator</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;迭代器类&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, node</span>):</span></span><br><span class=\"line\">            self.node = node</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> self.node:</span><br><span class=\"line\">                cur_node = self.node</span><br><span class=\"line\">                self.node = cur_node.<span class=\"built_in\">next</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> cur_node.item</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> StopIteration</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> self</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, iterable=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        self.head = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.tail = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> iterable:</span><br><span class=\"line\">            self.extend(iterable)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">append</span>(<span class=\"params\">self, obj</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;添加链表节点&quot;&quot;&quot;</span></span><br><span class=\"line\">        s = LinkList.Node(obj)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.head:</span><br><span class=\"line\">            self.head = s</span><br><span class=\"line\">            self.tail = s</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.tail.<span class=\"built_in\">next</span> = s</span><br><span class=\"line\">            self.tail = s</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extend</span>(<span class=\"params\">self, iterable</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;自动进行添加&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> iterable:</span><br><span class=\"line\">            self.append(obj)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span>(<span class=\"params\">self, obj</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;查找&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> self:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n == obj:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.LinkListIterator(self.head)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;打印&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&lt;&lt;&quot;</span> + <span class=\"string\">&quot;, &quot;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, self)) + <span class=\"string\">&quot;&gt;&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTable</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, size=<span class=\"number\">101</span></span>):</span></span><br><span class=\"line\">        self.size = size</span><br><span class=\"line\">        <span class=\"comment\"># self.T = [None for i in range(self.size)]</span></span><br><span class=\"line\">        self.T = [LinkList() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(self.size)]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">h</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> k % self.size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        i = self.h(k)</span><br><span class=\"line\">        <span class=\"comment\"># 去重</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.find(k):</span><br><span class=\"line\">            print(<span class=\"string\">&quot;Duplicated Insert.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.T[i].append(k)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span>(<span class=\"params\">self, k</span>):</span></span><br><span class=\"line\">        i = self.h(k)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.T[i].find(k)</span><br></pre></td></tr></table></figure>\n<h3 id=\"哈希表的应用\"><a class=\"markdownIt-Anchor\" href=\"#哈希表的应用\"></a> 哈希表的应用</h3>\n<ul>\n<li>集合 字典</li>\n<li>md5算法\n<ul>\n<li>曾经密码学中常用的哈希函数，将任意长度的数据映射为128为的哈希值</li>\n<li>文件的哈希值（两个文件哈希值相同）\n<ul>\n<li>帮用户验证下载的文件是否完整</li>\n<li>云存储商判断上传的文件是否存在于服务器上，从而实现妙传功能，避免存储过多相同的文件副本</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SHA2算法\n<ul>\n<li>较安全性受到挑战的MD5合SHA-1，安全性较高</li>\n<li>SHA-2包含一系列的哈希函数：SHA-224，SHA-256，SHA-384 。。。（数字对应哈希值长度）</li>\n<li>挖矿（比特币）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-树\"><a class=\"markdownIt-Anchor\" href=\"#5-树\"></a> 5. 树</h2>\n<h3 id=\"数的介绍\"><a class=\"markdownIt-Anchor\" href=\"#数的介绍\"></a> 数的介绍</h3>\n<h4 id=\"树与二叉树\"><a class=\"markdownIt-Anchor\" href=\"#树与二叉树\"></a> 树与二叉树</h4>\n<ul>\n<li>\n<p>树是一种数据结构。比如目录结构</p>\n</li>\n<li>\n<p>树是一种可以递归定义的数据结构</p>\n</li>\n<li>\n<p>树是由n个节点组成的集合：</p>\n<ul>\n<li>如果n=0，拿这是一颗空树；</li>\n<li>如果n&gt;0，那存在1个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一棵树</li>\n</ul>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609052341605.png\" alt=\"1609052341605\" /></p>\n</li>\n</ul>\n<p>树的一些概念：</p>\n<ul>\n<li>根节点、叶子节点</li>\n<li>树的深度</li>\n<li>树的度：所有节点最大的度（节点的度：几个分叉）</li>\n<li>孩子节点/父节点</li>\n<li>子树</li>\n</ul>\n<h4 id=\"树的实例模拟文件系统\"><a class=\"markdownIt-Anchor\" href=\"#树的实例模拟文件系统\"></a> 树的实例：模拟文件系统</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 节点属性</span></span><br><span class=\"line\"><span class=\"comment\"># 类型：文件夹/文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存储方式：链式存储</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, <span class=\"built_in\">type</span>=<span class=\"string\">&quot;dir&quot;</span></span>):</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.<span class=\"built_in\">type</span> = <span class=\"built_in\">type</span>  <span class=\"comment\"># &quot;dir&quot; or &quot;file&quot;</span></span><br><span class=\"line\">        self.children = []</span><br><span class=\"line\">        self.parent = <span class=\"literal\">None</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.name</span><br><span class=\"line\">      </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileSystemTree</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.root = Node(<span class=\"string\">&quot;/&quot;</span>)</span><br><span class=\"line\">        self.now = self.root</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mkdir</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># name 以/结尾</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name[-<span class=\"number\">1</span>] != <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">            name += <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">        node = Node(name)</span><br><span class=\"line\">        self.now.children.append(node)</span><br><span class=\"line\">        node.parent = self.now</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ls</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.now.children</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cd</span>(<span class=\"params\">self, name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name[-<span class=\"number\">1</span>] != <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">            name += <span class=\"string\">&quot;/&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> name == <span class=\"string\">&quot;../&quot;</span>:</span><br><span class=\"line\">            self.now = self.now.parent</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> child <span class=\"keyword\">in</span> self.now.children:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> child.name == name:</span><br><span class=\"line\">                self.now == child</span><br><span class=\"line\">                <span class=\"keyword\">return</span> </span><br><span class=\"line\">       \t<span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;invalid dir&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;main&quot;</span>:</span><br><span class=\"line\">    tree = FileSystemTree()</span><br><span class=\"line\">    tree.mkdir(<span class=\"string\">&quot;var/&quot;</span>)</span><br><span class=\"line\">    print(tree.root.children)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n<h3 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\"></a> 二叉树</h3>\n<p>定义：树的度为2（两个节点）的树</p>\n<img src=\"C:\\Users\\yango\\AppData\\Roaming\\Typora\\typora-user-images\\1609055873038.png\" alt=\"1609055873038\" style=\"zoom:50%;\" />\n<p><strong>二叉树的链式存储</strong>：将二叉树的节点定义为一个对象，节点之间通过类似链表的连接方式来连接。</p>\n<p><strong>节点定义</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BiTreeNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, data</span>):</span></span><br><span class=\"line\">        self.data = data</span><br><span class=\"line\">        self.lchild = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.rchild = <span class=\"literal\">None</span></span><br><span class=\"line\">        </span><br><span class=\"line\">a = BiTreeNode(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">b = BiTreeNode(<span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">c = BiTreeNode(<span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">d = BiTreeNode(<span class=\"string\">&quot;D&quot;</span>)</span><br><span class=\"line\">e = BiTreeNode(<span class=\"string\">&quot;E&quot;</span>)</span><br><span class=\"line\">f = BiTreeNode(<span class=\"string\">&quot;F&quot;</span>)</span><br><span class=\"line\">g = BiTreeNode(<span class=\"string\">&quot;G&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">e.lchild = a</span><br><span class=\"line\">e.rchild = g</span><br><span class=\"line\">a.lchild = c</span><br><span class=\"line\">c.lchild = b</span><br><span class=\"line\">c.rchild = d</span><br><span class=\"line\">g.rchild = f</span><br><span class=\"line\"></span><br><span class=\"line\">root = e</span><br></pre></td></tr></table></figure>\n<h4 id=\"-2\"><a class=\"markdownIt-Anchor\" href=\"#-2\"></a> </h4>\n<h4 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\"></a> 二叉树的遍历</h4>\n<p>4种遍历方式：</p>\n<ul>\n<li>\n<p>前序遍历：EACBDGF</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 自己</span></span><br><span class=\"line\"><span class=\"comment\"># 2 左子树</span></span><br><span class=\"line\"><span class=\"comment\"># 3 右子树</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_order</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root:</span><br><span class=\"line\">        print(root.data, end=<span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">        pre_order(root.lchild)</span><br><span class=\"line\">        pre_order(root.rchild)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;main&quot;</span>:</span><br><span class=\"line\">\tpre_order(root) <span class=\"comment\"># E,A,C,B,D,G,F,</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>中序遍历：ABCDEGF</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 左子树</span></span><br><span class=\"line\"><span class=\"comment\"># 2 自己</span></span><br><span class=\"line\"><span class=\"comment\"># 3 右子树</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">in_order</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root:</span><br><span class=\"line\">        pre_order(root.lchild)</span><br><span class=\"line\">        print(root.data, end=<span class=\"string\">&quot;,&quot;</span>)        </span><br><span class=\"line\">        pre_order(root.rchild)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>后序遍历：BDCAFGE</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1 左</span></span><br><span class=\"line\"><span class=\"comment\"># 2 右</span></span><br><span class=\"line\"><span class=\"comment\"># 3 自己</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post_order</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;中序遍历&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> root:</span><br><span class=\"line\">        post_order(root.lchild)</span><br><span class=\"line\">        post_order(root.rchild)</span><br><span class=\"line\">        print(root.data, end=<span class=\"string\">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>层次遍历 ：EAGCFBD</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用队列</span></span><br><span class=\"line\"><span class=\"comment\"># 进主节点</span></span><br><span class=\"line\">\t<span class=\"comment\"># 出主</span></span><br><span class=\"line\">    <span class=\"comment\"># 有子节点 —— 进子</span></span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">level_order</span>(<span class=\"params\">root</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;层级遍历&quot;&quot;&quot;</span></span><br><span class=\"line\">    q = deque()</span><br><span class=\"line\">    q.append(root)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(q) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        node = q.popleft()</span><br><span class=\"line\">        print(node.data, end=<span class=\"string\">&quot;, &quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.lchild:</span><br><span class=\"line\">            q.append(node.lchild)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node.rchild:</span><br><span class=\"line\">            q.append(node.rchild)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"二叉搜索树\"><a class=\"markdownIt-Anchor\" href=\"#二叉搜索树\"></a> 二叉搜索树</h4>\n<p><strong>定义</strong>：二叉搜索树是一棵二叉树，且满足性质：</p>\n<p>​\t设x是二叉树的一个节点。</p>\n<p>​\t如果y是x左子树的一个节点，那么 <code>y.key &lt;= x.key</code>；</p>\n<p>​\t如果y是x右子树的一个节点：那么<code>y.key &gt;= x.key</code></p>\n<p><strong>二叉搜索树的操作</strong>：查询、插入、删除</p>\n<h3 id=\"avl树\"><a class=\"markdownIt-Anchor\" href=\"#avl树\"></a> AVL树</h3>\n<p>windows对进程地址空间的管理用到了AVL树。</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609344914649.png\" alt=\"1609344914649\" /></p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1609344929808.png\" alt=\"1609344929808\" /></p>\n","categories":[{"name":"算法和数据结构","path":"api/categories/算法和数据结构.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"数据结构","path":"api/tags/数据结构.json"}]}