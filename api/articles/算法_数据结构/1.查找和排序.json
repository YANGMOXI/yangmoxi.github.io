{"title":"1 查找和排序","slug":"算法_数据结构/1.查找和排序","date":"2021-01-18T14:40:46.308Z","updated":"2021-01-18T15:15:11.294Z","comments":true,"path":"api/articles/算法_数据结构/1.查找和排序.json","excerpt":null,"covers":["C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608792169628.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608789980609.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608788268837.png","https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=478950433,1945325674&amp;fm=11&amp;gp=0.jpg"],"content":"<h2 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\"></a> 递归</h2>\n<h3 id=\"汉诺塔问题\"><a class=\"markdownIt-Anchor\" href=\"#汉诺塔问题\"></a> 汉诺塔问题</h3>\n<h2 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\"></a> 查找</h2>\n<h3 id=\"顺序查找线性查找\"><a class=\"markdownIt-Anchor\" href=\"#顺序查找线性查找\"></a> 顺序查找（线性查找）</h3>\n<p><strong>定义</strong>：从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索道列表最后一个元素为止</p>\n<p><strong>时间复杂度</strong>：O(n)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">linear_search</span>(<span class=\"params\">li, val</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<h3 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\"></a> 二分查找</h3>\n<p>条件：有序列表</p>\n<p><strong>时间复杂度</strong>：O(logn)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># li为有序列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span>(<span class=\"params\">li, val</span>):</span></span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:</span><br><span class=\"line\">        mid = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[mid] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> li[mid] &lt; val: <span class=\"comment\"># 右侧查找</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> </h3>\n<h2 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\"></a> 排序</h2>\n<p><strong>常见排序算法</strong></p>\n<table>\n<thead>\n<tr>\n<th>简单排序</th>\n<th>高效排序</th>\n<th>其他</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>快速排序</td>\n<td>希尔排序</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>堆排序</td>\n<td>计数排序</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>归并排序</td>\n<td>基数排序</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608792169628.png\" alt=\"1608792169628\" /></p>\n<p><strong>注</strong>：</p>\n<p>​\t稳定的排序：冒泡排序、插入排序(摸牌)、归并排序</p>\n<p>​\t稳定性：挨个移动位置的都是稳定，不挨个换的不稳定</p>\n<p><strong>高效排序</strong></p>\n<p>三种算法的时间复杂度都是 O(n*logn)</p>\n<ul>\n<li>一般情况下，就运行时间而言：\n<ul>\n<li>快速排序 &lt; 归并排序 &lt; 堆排序</li>\n</ul>\n</li>\n<li>三种算法缺点：\n<ul>\n<li>快速排序：极端情况下排序效率低</li>\n<li>归并排序：需要额外的内存开销</li>\n<li>堆排序：在快的排序算法中相对较慢</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\"></a> 冒泡排序</h3>\n<p><strong>定义</strong>：列表每2个相邻的数，如果前面比后面大，则两数交换位置</p>\n<p><strong>特点</strong>：一趟排序，无序区减少1个数，有序区增加一个数</p>\n<ul>\n<li>递增列表：一趟向队尾冒一个大值（趟数↑ 值↓）</li>\n</ul>\n<p><strong>时间复杂度</strong>：O(n^2)</p>\n<p><strong>注</strong>：可优化</p>\n<ol>\n<li>因每趟比较好，末尾有序数+1，所以下一次可少比较一位：<code>j =&gt; range(len(li)-i-1)</code></li>\n<li>设立 <code>flag=False</code> 若该趟比较后，列表排序位置不变，可直接进入下一次</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>): <span class=\"comment\"># 第i趟</span></span><br><span class=\"line\">        flag = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-i-<span class=\"number\">1</span>): <span class=\"comment\"># 下标j做比较(指针)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                li[j], li[j+<span class=\"number\">1</span>] = li[j+<span class=\"number\">1</span>], li[j]</span><br><span class=\"line\">                flag = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<h3 id=\"选择排序\"><a class=\"markdownIt-Anchor\" href=\"#选择排序\"></a> 选择排序</h3>\n<ol>\n<li>循环遍历一次，取得最小数放第一位（有序区）</li>\n<li>再从无序区取得最小数，放第2位。。。以此类推</li>\n</ol>\n<p><strong>时间复杂度</strong>：O(n^2)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)): <span class=\"comment\"># 下标0~8i</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)): <span class=\"comment\"># 无序区</span></span><br><span class=\"line\">            tmp = li[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[i]:</span><br><span class=\"line\">                li[j] = li[i]</span><br><span class=\"line\">                li[i] = tmp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优化\n<ul>\n<li>由于第7次比较时，已完成最后一次交换（可省去一轮）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-<span class=\"number\">1</span>): <span class=\"comment\"># 下标0~8i</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)): <span class=\"comment\"># 无序区</span></span><br><span class=\"line\">            <span class=\"comment\"># tmp = li[j]</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[i]:</span><br><span class=\"line\">                li[j], li[i] = li[i],li[j]</span><br><span class=\"line\">             </span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a class=\"markdownIt-Anchor\" href=\"#插入排序\"></a> 插入排序</h3>\n<p>扑克插牌，每摸一张牌，和手里的牌作比较：小的往前放，大的向后放</p>\n<ul>\n<li>空间复杂度：O(n^2)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">   手牌初始：0</span></span><br><span class=\"line\"><span class=\"string\">   摸牌 1~8 次</span></span><br><span class=\"line\"><span class=\"string\">   比较手牌：</span></span><br><span class=\"line\"><span class=\"string\">       比手牌小，左移</span></span><br><span class=\"line\"><span class=\"string\">       和次牌比-小 左移</span></span><br><span class=\"line\"><span class=\"string\">       比手牌大，放右</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   关系：</span></span><br><span class=\"line\"><span class=\"string\">       无序区：len(li) -i</span></span><br><span class=\"line\"><span class=\"string\">       有序区(0~8)：i - 1 </span></span><br><span class=\"line\"><span class=\"string\">       指针j = i - 1</span></span><br><span class=\"line\"><span class=\"string\">   &quot;&quot;&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">       j = i - <span class=\"number\">1</span></span><br><span class=\"line\">       my_turn = li[i]</span><br><span class=\"line\">       <span class=\"keyword\">while</span> my_turn &lt; li[j] <span class=\"keyword\">and</span> j&gt;=<span class=\"number\">0</span> :</span><br><span class=\"line\">           li[j+<span class=\"number\">1</span>] = li[j]</span><br><span class=\"line\">           li[j] = my_turn <span class=\"comment\"># 优化：可以和else合并</span></span><br><span class=\"line\">           j -= <span class=\"number\">1</span>            </span><br><span class=\"line\">       <span class=\"keyword\">else</span>: <span class=\"comment\"># my_turn &gt; li[j]</span></span><br><span class=\"line\">           li[j+<span class=\"number\">1</span>] = my_turn</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优化版</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)): <span class=\"comment\"># 摸牌次数 共8次</span></span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span> <span class=\"comment\"># 已有的手牌（有序）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]: <span class=\"comment\"># 摸的牌比手中的小，(朝左)交换位置</span></span><br><span class=\"line\">            li[j+<span class=\"number\">1</span>] = li[j]</span><br><span class=\"line\">            j = j - <span class=\"number\">1</span> <span class=\"comment\"># 摸牌 和 此位的牌比</span></span><br><span class=\"line\">        li[j+<span class=\"number\">1</span>] = tmp</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\"></a> 快速排序</h3>\n<ol>\n<li>\n<p>取第一个元素p，循环遍历比较，使p归位置</p>\n</li>\n<li>\n<p>取p两端 各和p比较 ，排序：左边都比p小，右边都比p大</p>\n</li>\n<li>\n<p>递归</p>\n</li>\n</ol>\n<p><strong>时间复杂度</strong>：O(n*logn)  (因涉及到递归，不严谨推导)</p>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>\n<p>递归耗费系统资源</p>\n</li>\n<li>\n<p>最坏情况：(倒叙列表)</p>\n<p>[9, 8, 7, 6, 5, 4, 3, 2, 1] 每次移动一位</p>\n<p>解决办法：随机找一个数和第一个数交换</p>\n</li>\n</ol>\n<ul>\n<li>快速排序 - 框架</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span>(<span class=\"params\">data, left, right</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(data, left, right) <span class=\"comment\"># 归位</span></span><br><span class=\"line\">        quick_sort(data, left, mid-<span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(data, mid+<span class=\"number\">1</span>, right)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span>(<span class=\"params\">li, left, right</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    归位</span></span><br><span class=\"line\"><span class=\"string\">    :param li:</span></span><br><span class=\"line\"><span class=\"string\">    :param left: 左指针</span></span><br><span class=\"line\"><span class=\"string\">    :param right: 右指针</span></span><br><span class=\"line\"><span class=\"string\">    :return: 归位后p的下标</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    tmp = li[left]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[right] &gt;= tmp:  <span class=\"comment\"># 从右找比tmp小的数</span></span><br><span class=\"line\">            right -= <span class=\"number\">1</span>  <span class=\"comment\"># 往左走</span></span><br><span class=\"line\">        li[left] = li[right] <span class=\"comment\"># 找到后，填补空位（左）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span>       </span><br><span class=\"line\">        li[right] = li[left] <span class=\"comment\"># 找到后，填补空位（右）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    li[left] = tmp  <span class=\"comment\"># 循环终止，left=right</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"堆排序\"><a class=\"markdownIt-Anchor\" href=\"#堆排序\"></a> 堆排序</h3>\n<h3 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\"></a> 归并排序</h3>\n<p>python内部<code>sort()</code>方法基于归并排序</p>\n<p><strong>特点</strong></p>\n<ol>\n<li>分解 =&gt; 有序</li>\n<li>归并（需用新列表储存）</li>\n</ol>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>分解：将列表越分越小，直至分成一个元素。\n<ul>\n<li>终止条件：一个元素是有序的</li>\n</ul>\n</li>\n<li>合并：将两个有序列表归并，列表越来越大。</li>\n</ol>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608789980609.png\" alt=\"1608789980609\" /></p>\n<p><strong>什么是归并</strong>？</p>\n<p>假设列表中分为<strong>两段有序</strong>，如何将其合并成一个有序列表</p>\n<p><strong>归并(merge)</strong>：左右两段 分别取出 元素进行比较 (从左至右取出)，小的数先出来，</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608788268837.png\" alt=\"1608788268837\" /></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span>(<span class=\"params\">li, low, mid, high</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    合并（对有序的左右两段 归并）</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新的 有序列表</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    ltmp = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:  <span class=\"comment\"># 只要左右两边都有数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &lt; li[j]:</span><br><span class=\"line\">            ltmp.append(li[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ltmp.append(li[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># print(ltmp)</span></span><br><span class=\"line\">    <span class=\"comment\"># 执行完以上代码，有一端没有数了</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        ltmp.append(li[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        ltmp.append(li[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    li[low:high + <span class=\"number\">1</span>] = ltmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_sort</span>(<span class=\"params\">li, low, high</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    归并排序</span></span><br><span class=\"line\"><span class=\"string\">    1. 分解（递归）</span></span><br><span class=\"line\"><span class=\"string\">    2. 归并</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:  <span class=\"comment\"># 至少2个元素</span></span><br><span class=\"line\">        <span class=\"comment\"># 分解</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        merge_sort(li, low, mid)</span><br><span class=\"line\">        merge_sort(li, mid + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">        <span class=\"comment\"># 合并</span></span><br><span class=\"line\">        merge(li, low, mid, high)</span><br></pre></td></tr></table></figure>\n<h3 id=\"希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#希尔排序\"></a> 希尔排序</h3>\n<p><strong>定义</strong>：是一种分组插入排序算法（插入排序的变形）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">注：</span></span><br><span class=\"line\"><span class=\"string\">\tgap对半分组，为希尔排序的一种</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t希尔排序按gap区分，可通过优化gap序列，来提升时间复杂度</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>\n<p>分组：再每趟基础上分组</p>\n<ul>\n<li>d1 = n//2</li>\n<li>d2 = d1/2</li>\n<li>d3 = d2/2</li>\n<li>…</li>\n<li>最后一趟：只有一个元素</li>\n</ul>\n</li>\n<li>\n<p>排序：</p>\n<ul>\n<li>\n<p><strong>每趟</strong>并不使得某些元素有序，而是使整体数据越来越<strong>接近有序</strong>；</p>\n</li>\n<li>\n<p><strong>最后</strong>一趟排序使得<strong>所有数据有序</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>时间复杂度</strong>：</p>\n<ol>\n<li>希尔排序的运行效率有gap序列决定，不同序列分组，有不一样的结果，较为复杂</li>\n<li>效率：低于堆排序</li>\n</ol>\n<p>​</p>\n<p>分组 &amp; 排序</p>\n<p><img src=\"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=478950433,1945325674&amp;fm=11&amp;gp=0.jpg\" alt=\"img\" /></p>\n<ul>\n<li>插入排序变形版</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort_gap</span>(<span class=\"params\">li, gap</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;分组 + 插入排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(gap, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - gap</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> li[j] &gt; tmp:</span><br><span class=\"line\">            li[j + gap] = li[j]</span><br><span class=\"line\">            j -= gap  <span class=\"comment\"># 与分到的组中的数作比较 gap：组间隔距离</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            li[j + gap] = tmp</span><br><span class=\"line\">        print(li)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shell_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;希尔排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    d = <span class=\"built_in\">len</span>(li) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> d &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        insert_sort_gap(li, d)</span><br><span class=\"line\">        d //= <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>整合版</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shell_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    gap = <span class=\"built_in\">len</span>(li) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> gap &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(gap, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">            tmp = li[i]</span><br><span class=\"line\">            j = i - gap</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]:</span><br><span class=\"line\">                li[j+gap] = li[j]</span><br><span class=\"line\">                j -= gap</span><br><span class=\"line\">            li[j+gap] = tmp</span><br><span class=\"line\">        gap /= <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"计数排序\"><a class=\"markdownIt-Anchor\" href=\"#计数排序\"></a> 计数排序</h3>\n<p>对列表进行排序，已知列表中的数范围都在 0~100 之间。设计时间复杂度为 O(n) 的算法</p>\n<p><strong>前提条件</strong>：已知列表中的数范围</p>\n<p><strong>时间复杂度</strong>：O(n)</p>\n<p>​\t * 快于python的sort(O*(nlogn))排序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_sort</span>(<span class=\"params\">li, max_count=<span class=\"number\">100</span></span>):</span></span><br><span class=\"line\">    count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_count+<span class=\"number\">1</span>)] </span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> li:  <span class=\"comment\"># O(n) </span></span><br><span class=\"line\">        count[val] += <span class=\"number\">1</span></span><br><span class=\"line\">    li.clear()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind, val <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(count): <span class=\"comment\"># O(n) </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(val):</span><br><span class=\"line\">            li.append(ind)</span><br></pre></td></tr></table></figure>\n<h3 id=\"桶排序\"><a class=\"markdownIt-Anchor\" href=\"#桶排序\"></a> 桶排序</h3>\n<h3 id=\"基数排序\"><a class=\"markdownIt-Anchor\" href=\"#基数排序\"></a> 基数排序</h3>\n<h2 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\"></a> 补充</h2>\n<ul>\n<li>设置递归最大深度</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.setrecursionlimit(<span class=\"number\">10000</span>) </span><br></pre></td></tr></table></figure>\n","more":"<h2 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\"></a> 递归</h2>\n<h3 id=\"汉诺塔问题\"><a class=\"markdownIt-Anchor\" href=\"#汉诺塔问题\"></a> 汉诺塔问题</h3>\n<h2 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\"></a> 查找</h2>\n<h3 id=\"顺序查找线性查找\"><a class=\"markdownIt-Anchor\" href=\"#顺序查找线性查找\"></a> 顺序查找（线性查找）</h3>\n<p><strong>定义</strong>：从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索道列表最后一个元素为止</p>\n<p><strong>时间复杂度</strong>：O(n)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">linear_search</span>(<span class=\"params\">li, val</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    <span class=\"keyword\">return</span> </span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<h3 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\"></a> 二分查找</h3>\n<p>条件：有序列表</p>\n<p><strong>时间复杂度</strong>：O(logn)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># li为有序列表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binary_search</span>(<span class=\"params\">li, val</span>):</span></span><br><span class=\"line\">    left = <span class=\"number\">0</span></span><br><span class=\"line\">    right = <span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:</span><br><span class=\"line\">        mid = (left + right) // <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[mid] == val:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> li[mid] &lt; val: <span class=\"comment\"># 右侧查找</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\"></a> </h3>\n<h2 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\"></a> 排序</h2>\n<p><strong>常见排序算法</strong></p>\n<table>\n<thead>\n<tr>\n<th>简单排序</th>\n<th>高效排序</th>\n<th>其他</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>快速排序</td>\n<td>希尔排序</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>堆排序</td>\n<td>计数排序</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>归并排序</td>\n<td>基数排序</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608792169628.png\" alt=\"1608792169628\" /></p>\n<p><strong>注</strong>：</p>\n<p>​\t稳定的排序：冒泡排序、插入排序(摸牌)、归并排序</p>\n<p>​\t稳定性：挨个移动位置的都是稳定，不挨个换的不稳定</p>\n<p><strong>高效排序</strong></p>\n<p>三种算法的时间复杂度都是 O(n*logn)</p>\n<ul>\n<li>一般情况下，就运行时间而言：\n<ul>\n<li>快速排序 &lt; 归并排序 &lt; 堆排序</li>\n</ul>\n</li>\n<li>三种算法缺点：\n<ul>\n<li>快速排序：极端情况下排序效率低</li>\n<li>归并排序：需要额外的内存开销</li>\n<li>堆排序：在快的排序算法中相对较慢</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\"></a> 冒泡排序</h3>\n<p><strong>定义</strong>：列表每2个相邻的数，如果前面比后面大，则两数交换位置</p>\n<p><strong>特点</strong>：一趟排序，无序区减少1个数，有序区增加一个数</p>\n<ul>\n<li>递增列表：一趟向队尾冒一个大值（趟数↑ 值↓）</li>\n</ul>\n<p><strong>时间复杂度</strong>：O(n^2)</p>\n<p><strong>注</strong>：可优化</p>\n<ol>\n<li>因每趟比较好，末尾有序数+1，所以下一次可少比较一位：<code>j =&gt; range(len(li)-i-1)</code></li>\n<li>设立 <code>flag=False</code> 若该趟比较后，列表排序位置不变，可直接进入下一次</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li) - <span class=\"number\">1</span>): <span class=\"comment\"># 第i趟</span></span><br><span class=\"line\">        flag = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-i-<span class=\"number\">1</span>): <span class=\"comment\"># 下标j做比较(指针)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &gt; li[j+<span class=\"number\">1</span>]:</span><br><span class=\"line\">                li[j], li[j+<span class=\"number\">1</span>] = li[j+<span class=\"number\">1</span>], li[j]</span><br><span class=\"line\">                flag = <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<h3 id=\"选择排序\"><a class=\"markdownIt-Anchor\" href=\"#选择排序\"></a> 选择排序</h3>\n<ol>\n<li>循环遍历一次，取得最小数放第一位（有序区）</li>\n<li>再从无序区取得最小数，放第2位。。。以此类推</li>\n</ol>\n<p><strong>时间复杂度</strong>：O(n^2)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)): <span class=\"comment\"># 下标0~8i</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)): <span class=\"comment\"># 无序区</span></span><br><span class=\"line\">            tmp = li[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[i]:</span><br><span class=\"line\">                li[j] = li[i]</span><br><span class=\"line\">                li[i] = tmp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>优化\n<ul>\n<li>由于第7次比较时，已完成最后一次交换（可省去一轮）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(li)-<span class=\"number\">1</span>): <span class=\"comment\"># 下标0~8i</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)): <span class=\"comment\"># 无序区</span></span><br><span class=\"line\">            <span class=\"comment\"># tmp = li[j]</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> li[j] &lt; li[i]:</span><br><span class=\"line\">                li[j], li[i] = li[i],li[j]</span><br><span class=\"line\">             </span><br></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a class=\"markdownIt-Anchor\" href=\"#插入排序\"></a> 插入排序</h3>\n<p>扑克插牌，每摸一张牌，和手里的牌作比较：小的往前放，大的向后放</p>\n<ul>\n<li>空间复杂度：O(n^2)</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">   手牌初始：0</span></span><br><span class=\"line\"><span class=\"string\">   摸牌 1~8 次</span></span><br><span class=\"line\"><span class=\"string\">   比较手牌：</span></span><br><span class=\"line\"><span class=\"string\">       比手牌小，左移</span></span><br><span class=\"line\"><span class=\"string\">       和次牌比-小 左移</span></span><br><span class=\"line\"><span class=\"string\">       比手牌大，放右</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">   关系：</span></span><br><span class=\"line\"><span class=\"string\">       无序区：len(li) -i</span></span><br><span class=\"line\"><span class=\"string\">       有序区(0~8)：i - 1 </span></span><br><span class=\"line\"><span class=\"string\">       指针j = i - 1</span></span><br><span class=\"line\"><span class=\"string\">   &quot;&quot;&quot;</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">       j = i - <span class=\"number\">1</span></span><br><span class=\"line\">       my_turn = li[i]</span><br><span class=\"line\">       <span class=\"keyword\">while</span> my_turn &lt; li[j] <span class=\"keyword\">and</span> j&gt;=<span class=\"number\">0</span> :</span><br><span class=\"line\">           li[j+<span class=\"number\">1</span>] = li[j]</span><br><span class=\"line\">           li[j] = my_turn <span class=\"comment\"># 优化：可以和else合并</span></span><br><span class=\"line\">           j -= <span class=\"number\">1</span>            </span><br><span class=\"line\">       <span class=\"keyword\">else</span>: <span class=\"comment\"># my_turn &gt; li[j]</span></span><br><span class=\"line\">           li[j+<span class=\"number\">1</span>] = my_turn</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优化版</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(li)): <span class=\"comment\"># 摸牌次数 共8次</span></span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - <span class=\"number\">1</span> <span class=\"comment\"># 已有的手牌（有序）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]: <span class=\"comment\"># 摸的牌比手中的小，(朝左)交换位置</span></span><br><span class=\"line\">            li[j+<span class=\"number\">1</span>] = li[j]</span><br><span class=\"line\">            j = j - <span class=\"number\">1</span> <span class=\"comment\"># 摸牌 和 此位的牌比</span></span><br><span class=\"line\">        li[j+<span class=\"number\">1</span>] = tmp</span><br></pre></td></tr></table></figure>\n<h3 id=\"快速排序\"><a class=\"markdownIt-Anchor\" href=\"#快速排序\"></a> 快速排序</h3>\n<ol>\n<li>\n<p>取第一个元素p，循环遍历比较，使p归位置</p>\n</li>\n<li>\n<p>取p两端 各和p比较 ，排序：左边都比p小，右边都比p大</p>\n</li>\n<li>\n<p>递归</p>\n</li>\n</ol>\n<p><strong>时间复杂度</strong>：O(n*logn)  (因涉及到递归，不严谨推导)</p>\n<p><strong>缺点</strong>：</p>\n<ol>\n<li>\n<p>递归耗费系统资源</p>\n</li>\n<li>\n<p>最坏情况：(倒叙列表)</p>\n<p>[9, 8, 7, 6, 5, 4, 3, 2, 1] 每次移动一位</p>\n<p>解决办法：随机找一个数和第一个数交换</p>\n</li>\n</ol>\n<ul>\n<li>快速排序 - 框架</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span>(<span class=\"params\">data, left, right</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &lt; right:</span><br><span class=\"line\">        mid = partition(data, left, right) <span class=\"comment\"># 归位</span></span><br><span class=\"line\">        quick_sort(data, left, mid-<span class=\"number\">1</span>)</span><br><span class=\"line\">        quick_sort(data, mid+<span class=\"number\">1</span>, right)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partition</span>(<span class=\"params\">li, left, right</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    归位</span></span><br><span class=\"line\"><span class=\"string\">    :param li:</span></span><br><span class=\"line\"><span class=\"string\">    :param left: 左指针</span></span><br><span class=\"line\"><span class=\"string\">    :param right: 右指针</span></span><br><span class=\"line\"><span class=\"string\">    :return: 归位后p的下标</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    tmp = li[left]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[right] &gt;= tmp:  <span class=\"comment\"># 从右找比tmp小的数</span></span><br><span class=\"line\">            right -= <span class=\"number\">1</span>  <span class=\"comment\"># 往左走</span></span><br><span class=\"line\">        li[left] = li[right] <span class=\"comment\"># 找到后，填补空位（左）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right <span class=\"keyword\">and</span> li[left] &lt;= tmp:</span><br><span class=\"line\">            left += <span class=\"number\">1</span>       </span><br><span class=\"line\">        li[right] = li[left] <span class=\"comment\"># 找到后，填补空位（右）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    li[left] = tmp  <span class=\"comment\"># 循环终止，left=right</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> left</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"堆排序\"><a class=\"markdownIt-Anchor\" href=\"#堆排序\"></a> 堆排序</h3>\n<h3 id=\"归并排序\"><a class=\"markdownIt-Anchor\" href=\"#归并排序\"></a> 归并排序</h3>\n<p>python内部<code>sort()</code>方法基于归并排序</p>\n<p><strong>特点</strong></p>\n<ol>\n<li>分解 =&gt; 有序</li>\n<li>归并（需用新列表储存）</li>\n</ol>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>分解：将列表越分越小，直至分成一个元素。\n<ul>\n<li>终止条件：一个元素是有序的</li>\n</ul>\n</li>\n<li>合并：将两个有序列表归并，列表越来越大。</li>\n</ol>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608789980609.png\" alt=\"1608789980609\" /></p>\n<p><strong>什么是归并</strong>？</p>\n<p>假设列表中分为<strong>两段有序</strong>，如何将其合并成一个有序列表</p>\n<p><strong>归并(merge)</strong>：左右两段 分别取出 元素进行比较 (从左至右取出)，小的数先出来，</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608788268837.png\" alt=\"1608788268837\" /></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge</span>(<span class=\"params\">li, low, mid, high</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    合并（对有序的左右两段 归并）</span></span><br><span class=\"line\"><span class=\"string\">    :return: 新的 有序列表</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    i = low</span><br><span class=\"line\">    j = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    ltmp = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid <span class=\"keyword\">and</span> j &lt;= high:  <span class=\"comment\"># 只要左右两边都有数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> li[i] &lt; li[j]:</span><br><span class=\"line\">            ltmp.append(li[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ltmp.append(li[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># print(ltmp)</span></span><br><span class=\"line\">    <span class=\"comment\"># 执行完以上代码，有一端没有数了</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= mid:</span><br><span class=\"line\">        ltmp.append(li[i])</span><br><span class=\"line\">        i += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt;= high:</span><br><span class=\"line\">        ltmp.append(li[j])</span><br><span class=\"line\">        j += <span class=\"number\">1</span></span><br><span class=\"line\">    li[low:high + <span class=\"number\">1</span>] = ltmp</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">merge_sort</span>(<span class=\"params\">li, low, high</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    归并排序</span></span><br><span class=\"line\"><span class=\"string\">    1. 分解（递归）</span></span><br><span class=\"line\"><span class=\"string\">    2. 归并</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> low &lt; high:  <span class=\"comment\"># 至少2个元素</span></span><br><span class=\"line\">        <span class=\"comment\"># 分解</span></span><br><span class=\"line\">        mid = (low + high) // <span class=\"number\">2</span></span><br><span class=\"line\">        merge_sort(li, low, mid)</span><br><span class=\"line\">        merge_sort(li, mid + <span class=\"number\">1</span>, high)</span><br><span class=\"line\">        <span class=\"comment\"># 合并</span></span><br><span class=\"line\">        merge(li, low, mid, high)</span><br></pre></td></tr></table></figure>\n<h3 id=\"希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#希尔排序\"></a> 希尔排序</h3>\n<p><strong>定义</strong>：是一种分组插入排序算法（插入排序的变形）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">注：</span></span><br><span class=\"line\"><span class=\"string\">\tgap对半分组，为希尔排序的一种</span></span><br><span class=\"line\"><span class=\"string\">\t</span></span><br><span class=\"line\"><span class=\"string\">\t希尔排序按gap区分，可通过优化gap序列，来提升时间复杂度</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>特点</strong>：</p>\n<ol>\n<li>\n<p>分组：再每趟基础上分组</p>\n<ul>\n<li>d1 = n//2</li>\n<li>d2 = d1/2</li>\n<li>d3 = d2/2</li>\n<li>…</li>\n<li>最后一趟：只有一个元素</li>\n</ul>\n</li>\n<li>\n<p>排序：</p>\n<ul>\n<li>\n<p><strong>每趟</strong>并不使得某些元素有序，而是使整体数据越来越<strong>接近有序</strong>；</p>\n</li>\n<li>\n<p><strong>最后</strong>一趟排序使得<strong>所有数据有序</strong></p>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>时间复杂度</strong>：</p>\n<ol>\n<li>希尔排序的运行效率有gap序列决定，不同序列分组，有不一样的结果，较为复杂</li>\n<li>效率：低于堆排序</li>\n</ol>\n<p>​</p>\n<p>分组 &amp; 排序</p>\n<p><img src=\"https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=478950433,1945325674&amp;fm=11&amp;gp=0.jpg\" alt=\"img\" /></p>\n<ul>\n<li>插入排序变形版</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort_gap</span>(<span class=\"params\">li, gap</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;分组 + 插入排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(gap, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">        tmp = li[i]</span><br><span class=\"line\">        j = i - gap</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> li[j] &gt; tmp:</span><br><span class=\"line\">            li[j + gap] = li[j]</span><br><span class=\"line\">            j -= gap  <span class=\"comment\"># 与分到的组中的数作比较 gap：组间隔距离</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            li[j + gap] = tmp</span><br><span class=\"line\">        print(li)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shell_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;希尔排序&quot;&quot;&quot;</span></span><br><span class=\"line\">    d = <span class=\"built_in\">len</span>(li) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> d &gt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        insert_sort_gap(li, d)</span><br><span class=\"line\">        d //= <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>整合版</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shell_sort</span>(<span class=\"params\">li</span>):</span></span><br><span class=\"line\">    gap = <span class=\"built_in\">len</span>(li) // <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> gap &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(gap, <span class=\"built_in\">len</span>(li)):</span><br><span class=\"line\">            tmp = li[i]</span><br><span class=\"line\">            j = i - gap</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> tmp &lt; li[j]:</span><br><span class=\"line\">                li[j+gap] = li[j]</span><br><span class=\"line\">                j -= gap</span><br><span class=\"line\">            li[j+gap] = tmp</span><br><span class=\"line\">        gap /= <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"计数排序\"><a class=\"markdownIt-Anchor\" href=\"#计数排序\"></a> 计数排序</h3>\n<p>对列表进行排序，已知列表中的数范围都在 0~100 之间。设计时间复杂度为 O(n) 的算法</p>\n<p><strong>前提条件</strong>：已知列表中的数范围</p>\n<p><strong>时间复杂度</strong>：O(n)</p>\n<p>​\t * 快于python的sort(O*(nlogn))排序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_sort</span>(<span class=\"params\">li, max_count=<span class=\"number\">100</span></span>):</span></span><br><span class=\"line\">    count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_count+<span class=\"number\">1</span>)] </span><br><span class=\"line\">    <span class=\"keyword\">for</span> val <span class=\"keyword\">in</span> li:  <span class=\"comment\"># O(n) </span></span><br><span class=\"line\">        count[val] += <span class=\"number\">1</span></span><br><span class=\"line\">    li.clear()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ind, val <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(count): <span class=\"comment\"># O(n) </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(val):</span><br><span class=\"line\">            li.append(ind)</span><br></pre></td></tr></table></figure>\n<h3 id=\"桶排序\"><a class=\"markdownIt-Anchor\" href=\"#桶排序\"></a> 桶排序</h3>\n<h3 id=\"基数排序\"><a class=\"markdownIt-Anchor\" href=\"#基数排序\"></a> 基数排序</h3>\n<h2 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\"></a> 补充</h2>\n<ul>\n<li>设置递归最大深度</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.setrecursionlimit(<span class=\"number\">10000</span>) </span><br></pre></td></tr></table></figure>\n","categories":[{"name":"算法和数据结构","path":"api/categories/算法和数据结构.json"}],"tags":[{"name":"python","path":"api/tags/python.json"}]}