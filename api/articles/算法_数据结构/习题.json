{"title":"常考算法题（汇总）","slug":"算法_数据结构/习题","date":"2021-01-19T06:03:19.127Z","updated":"2021-01-19T06:05:32.770Z","comments":true,"path":"api/articles/算法_数据结构/习题.json","excerpt":null,"covers":["C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608800325066.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608800446913.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608809551984.png","C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608813530391.png"],"content":"<h2 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\"></a> 递归</h2>\n<h3 id=\"1-爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#1-爬楼梯\"></a> 1. 爬楼梯</h3>\n<p>n个台阶，一次可以走1步，也可以走2步，一共多少种走法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将问题规模缩小化</span></span><br><span class=\"line\">\t<span class=\"comment\"># 只剩一阶：1种走法</span></span><br><span class=\"line\">    <span class=\"comment\"># 剩两阶：2种走法</span></span><br><span class=\"line\">n = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ladder</span>(<span class=\"params\">n</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> n == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ladder(n-<span class=\"number\">1</span>) + ladder(n-<span class=\"number\">2</span>) <span class=\"comment\"># 最后剩1个+剩2个台阶有几种走法</span></span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n<h2 id=\"栈和队列\"><a class=\"markdownIt-Anchor\" href=\"#栈和队列\"></a> 栈和队列</h2>\n<h3 id=\"迷宫问题\"><a class=\"markdownIt-Anchor\" href=\"#迷宫问题\"></a> 迷宫问题</h3>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608800325066.png\" alt=\"1608800325066\" /></p>\n<ul>\n<li>迷宫</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maze = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p><strong>栈解法</strong>（深度优先 - 最长路径）</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608800446913.png\" alt=\"1608800446913\" /></p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608809551984.png\" alt=\"1608809551984\" /></p>\n</li>\n</ol>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方向：上、右、下、左</span></span><br><span class=\"line\">dirs = [</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y - <span class=\"number\">1</span>, x),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y, x + <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y + <span class=\"number\">1</span>, x),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y, x - <span class=\"number\">1</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maze_path</span>(<span class=\"params\">y1, x1, y2, x2</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    栈 - 深度优先解迷宫</span></span><br><span class=\"line\"><span class=\"string\">    :param x1, y1: 起点坐标</span></span><br><span class=\"line\"><span class=\"string\">    :param x2, y2: 终点坐标</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    stack.append((y1, x1))  <span class=\"comment\"># 走的通：进栈；走不通：出栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack) &gt; <span class=\"number\">0</span>:  <span class=\"comment\"># &gt;0 表示路径走的通； &lt;0 走不通</span></span><br><span class=\"line\">        <span class=\"comment\"># 当前节点</span></span><br><span class=\"line\">        curNode = stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 判断当前节点是否为终点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> curNode[<span class=\"number\">0</span>] == y2 <span class=\"keyword\">and</span> curNode[<span class=\"number\">1</span>] == x2:</span><br><span class=\"line\">            print(<span class=\"string\">&quot;到终点了， 路径如下&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> path <span class=\"keyword\">in</span> stack:</span><br><span class=\"line\">                print(path)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"comment\"># 下走一节点（四个方向）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">dir</span> <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            nextNode = <span class=\"built_in\">dir</span>(curNode[<span class=\"number\">0</span>], curNode[<span class=\"number\">1</span>])  <span class=\"comment\"># 用当前节点定位下一步</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                stack.append(nextNode) <span class=\"comment\"># 进栈</span></span><br><span class=\"line\">                maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span>  <span class=\"comment\"># 标记为走过</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>  <span class=\"comment\"># 找到一个就break，继续下一步</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span> <span class=\"comment\"># 走不通也标记为走过</span></span><br><span class=\"line\">            stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;该迷宫没有解&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    maze_path(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p><strong>队列解法</strong>（广度优先 - 最短路径）</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608813530391.png\" alt=\"1608813530391\" /></p>\n</li>\n</ol>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方向：上、右、下、左</span></span><br><span class=\"line\">dirs = [</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y - <span class=\"number\">1</span>, x),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y, x + <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y + <span class=\"number\">1</span>, x),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y, x - <span class=\"number\">1</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_r</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;打印路径&quot;&quot;&quot;</span></span><br><span class=\"line\">    curNode = path[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    realpath = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> curNode[<span class=\"number\">2</span>] != -<span class=\"number\">1</span>:</span><br><span class=\"line\">        realpath.append(curNode[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\">        curNode = path[curNode[<span class=\"number\">2</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">    realpath.append(curNode[<span class=\"number\">0</span>:<span class=\"number\">2</span>])  <span class=\"comment\"># 加入起点</span></span><br><span class=\"line\">    <span class=\"comment\"># 方向输出（正向）</span></span><br><span class=\"line\">    realpath.reverse()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> realpath:</span><br><span class=\"line\">        print(node)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maze_path_queue</span>(<span class=\"params\">y1, x1, y2, x2</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    队列 解迷宫——先进先出</span></span><br><span class=\"line\"><span class=\"string\">    queue(y, x, i)</span></span><br><span class=\"line\"><span class=\"string\">    i: 该坐标的标记位；起点记为-1</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    queue.append((y1, x1, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    path = []  <span class=\"comment\"># 记录出队节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        curNode = queue.pop()  <span class=\"comment\"># 走下一步前，先出队</span></span><br><span class=\"line\">        path.append(curNode)  <span class=\"comment\"># 记录出队的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> curNode[<span class=\"number\">0</span>] == y2 <span class=\"keyword\">and</span>  curNode[<span class=\"number\">1</span>] == x2: <span class=\"comment\"># 当前节点是否是终点</span></span><br><span class=\"line\">            print(<span class=\"string\">&quot;抵达终点，路径如下&quot;</span>)</span><br><span class=\"line\">            print_r(path)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"comment\"># 前进一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">dir</span> <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            nextNode = <span class=\"built_in\">dir</span>(curNode[<span class=\"number\">0</span>], curNode[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append((nextNode[<span class=\"number\">0</span>], nextNode[<span class=\"number\">1</span>], <span class=\"built_in\">len</span>(path) - <span class=\"number\">1</span>))  <span class=\"comment\"># len(path)-1)：标记位; 起始: -1</span></span><br><span class=\"line\">                maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;没有路了&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    maze_path_queue(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> yy <span class=\"keyword\">in</span> maze:</span><br><span class=\"line\">        print(yy)</span><br></pre></td></tr></table></figure>\n","more":"<h2 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\"></a> 递归</h2>\n<h3 id=\"1-爬楼梯\"><a class=\"markdownIt-Anchor\" href=\"#1-爬楼梯\"></a> 1. 爬楼梯</h3>\n<p>n个台阶，一次可以走1步，也可以走2步，一共多少种走法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将问题规模缩小化</span></span><br><span class=\"line\">\t<span class=\"comment\"># 只剩一阶：1种走法</span></span><br><span class=\"line\">    <span class=\"comment\"># 剩两阶：2种走法</span></span><br><span class=\"line\">n = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ladder</span>(<span class=\"params\">n</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> n == <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ladder(n-<span class=\"number\">1</span>) + ladder(n-<span class=\"number\">2</span>) <span class=\"comment\"># 最后剩1个+剩2个台阶有几种走法</span></span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n<h2 id=\"栈和队列\"><a class=\"markdownIt-Anchor\" href=\"#栈和队列\"></a> 栈和队列</h2>\n<h3 id=\"迷宫问题\"><a class=\"markdownIt-Anchor\" href=\"#迷宫问题\"></a> 迷宫问题</h3>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608800325066.png\" alt=\"1608800325066\" /></p>\n<ul>\n<li>迷宫</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maze = [</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p><strong>栈解法</strong>（深度优先 - 最长路径）</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608800446913.png\" alt=\"1608800446913\" /></p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608809551984.png\" alt=\"1608809551984\" /></p>\n</li>\n</ol>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方向：上、右、下、左</span></span><br><span class=\"line\">dirs = [</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y - <span class=\"number\">1</span>, x),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y, x + <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y + <span class=\"number\">1</span>, x),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y, x - <span class=\"number\">1</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maze_path</span>(<span class=\"params\">y1, x1, y2, x2</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    栈 - 深度优先解迷宫</span></span><br><span class=\"line\"><span class=\"string\">    :param x1, y1: 起点坐标</span></span><br><span class=\"line\"><span class=\"string\">    :param x2, y2: 终点坐标</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    stack.append((y1, x1))  <span class=\"comment\"># 走的通：进栈；走不通：出栈</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack) &gt; <span class=\"number\">0</span>:  <span class=\"comment\"># &gt;0 表示路径走的通； &lt;0 走不通</span></span><br><span class=\"line\">        <span class=\"comment\"># 当前节点</span></span><br><span class=\"line\">        curNode = stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"comment\"># 判断当前节点是否为终点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> curNode[<span class=\"number\">0</span>] == y2 <span class=\"keyword\">and</span> curNode[<span class=\"number\">1</span>] == x2:</span><br><span class=\"line\">            print(<span class=\"string\">&quot;到终点了， 路径如下&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> path <span class=\"keyword\">in</span> stack:</span><br><span class=\"line\">                print(path)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"comment\"># 下走一节点（四个方向）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">dir</span> <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            nextNode = <span class=\"built_in\">dir</span>(curNode[<span class=\"number\">0</span>], curNode[<span class=\"number\">1</span>])  <span class=\"comment\"># 用当前节点定位下一步</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                stack.append(nextNode) <span class=\"comment\"># 进栈</span></span><br><span class=\"line\">                maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span>  <span class=\"comment\"># 标记为走过</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>  <span class=\"comment\"># 找到一个就break，继续下一步</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span> <span class=\"comment\"># 走不通也标记为走过</span></span><br><span class=\"line\">            stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;该迷宫没有解&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    maze_path(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p><strong>队列解法</strong>（广度优先 - 最短路径）</p>\n<p><img src=\"C:%5CUsers%5Cyango%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1608813530391.png\" alt=\"1608813530391\" /></p>\n</li>\n</ol>\n<ul>\n<li>代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方向：上、右、下、左</span></span><br><span class=\"line\">dirs = [</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y - <span class=\"number\">1</span>, x),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y, x + <span class=\"number\">1</span>),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y + <span class=\"number\">1</span>, x),</span><br><span class=\"line\">    <span class=\"keyword\">lambda</span> y, x: (y, x - <span class=\"number\">1</span>),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_r</span>(<span class=\"params\">path</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;打印路径&quot;&quot;&quot;</span></span><br><span class=\"line\">    curNode = path[-<span class=\"number\">1</span>]</span><br><span class=\"line\">    realpath = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> curNode[<span class=\"number\">2</span>] != -<span class=\"number\">1</span>:</span><br><span class=\"line\">        realpath.append(curNode[<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\">        curNode = path[curNode[<span class=\"number\">2</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\">    realpath.append(curNode[<span class=\"number\">0</span>:<span class=\"number\">2</span>])  <span class=\"comment\"># 加入起点</span></span><br><span class=\"line\">    <span class=\"comment\"># 方向输出（正向）</span></span><br><span class=\"line\">    realpath.reverse()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> node <span class=\"keyword\">in</span> realpath:</span><br><span class=\"line\">        print(node)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maze_path_queue</span>(<span class=\"params\">y1, x1, y2, x2</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    队列 解迷宫——先进先出</span></span><br><span class=\"line\"><span class=\"string\">    queue(y, x, i)</span></span><br><span class=\"line\"><span class=\"string\">    i: 该坐标的标记位；起点记为-1</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    queue.append((y1, x1, -<span class=\"number\">1</span>))</span><br><span class=\"line\">    path = []  <span class=\"comment\"># 记录出队节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(queue) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        curNode = queue.pop()  <span class=\"comment\"># 走下一步前，先出队</span></span><br><span class=\"line\">        path.append(curNode)  <span class=\"comment\"># 记录出队的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> curNode[<span class=\"number\">0</span>] == y2 <span class=\"keyword\">and</span>  curNode[<span class=\"number\">1</span>] == x2: <span class=\"comment\"># 当前节点是否是终点</span></span><br><span class=\"line\">            print(<span class=\"string\">&quot;抵达终点，路径如下&quot;</span>)</span><br><span class=\"line\">            print_r(path)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"comment\"># 前进一位</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"built_in\">dir</span> <span class=\"keyword\">in</span> dirs:</span><br><span class=\"line\">            nextNode = <span class=\"built_in\">dir</span>(curNode[<span class=\"number\">0</span>], curNode[<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">if</span> maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                queue.append((nextNode[<span class=\"number\">0</span>], nextNode[<span class=\"number\">1</span>], <span class=\"built_in\">len</span>(path) - <span class=\"number\">1</span>))  <span class=\"comment\"># len(path)-1)：标记位; 起始: -1</span></span><br><span class=\"line\">                maze[nextNode[<span class=\"number\">0</span>]][nextNode[<span class=\"number\">1</span>]] = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;没有路了&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    maze_path_queue(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> yy <span class=\"keyword\">in</span> maze:</span><br><span class=\"line\">        print(yy)</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"算法和数据结构","path":"api/categories/算法和数据结构.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"算法","path":"api/tags/算法.json"},{"name":"面试题","path":"api/tags/面试题.json"}]}